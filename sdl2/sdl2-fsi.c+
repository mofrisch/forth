/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#include <stdio.h>
#include <string.h>
#include <stddef.h>

// Do not edit below this line
// end-of-default-includes


// #define DECLSPEC
// #define SDLCALL
// #define SDL_PRINTF_FORMAT_STRING

#include <SDL2/SDL.h>
#include <SDL2/SDL_log.h>
#include <SDL2/SDL_main.h>
#include <SDL2/SDL_revision.h>
#include <SDL2/SDL_version.h>

typedef enum{ NONE = -1, GFORTH = 0, SWIFTFORTH, VFX } SwigTargetSystem;
SwigTargetSystem swigTargetSystem = NONE;

unsigned char swigPrintStackComments = 1;

/* comments */
void swigNewline()
{
	printf( "\n" );
}

void swigComment( char *comment )
{
	printf( "\\ %s", comment );
}

/* generic print */
void swigPrint( char* gforth, char *swiftForth, char *vfx )
{
	if( swigTargetSystem == GFORTH )
		printf( "%s", gforth );
	else if( swigTargetSystem == SWIFTFORTH )
		printf( "%s", swiftForth );
	else if( swigTargetSystem == VFX )
		printf( "%s", vfx );
	printf( "\n" );
}
void swigPrintSystem( SwigTargetSystem targetSystem, char *text )
{
	if( targetSystem == swigTargetSystem )
	    printf( "%s\n", text );
}

/* constants */
void swigIntConstant( long constant, char *name )
{
	printf( "#%ld\tconstant %s\n", constant, name );
}

void swigUnsignedIntConstant( unsigned long constant, char *name )
{
	printf( "#%lu\tconstant %s\n", constant, name );
}

void swigLongConstant( long long constant, char *name )
{
	printf( "#%lld.\t2constant %s\n", constant, name );
}

void swigUnsignedLongConstant( unsigned long long constant, char *name )
{
	printf( "#%llu.\t2constant %s\n", constant, name );
}

void swigFloatConstant( double constant, char *name )
{
	char buffer[128];
	sprintf( buffer, "%f", constant );

	/* if the constant contains no exponent, add one */
	char *s;
	for( s = buffer; *s != 0; s++ )
		if( *s == 'e' || *s == 'E' )
			break;

	/* exponent found */
	if( *s != 0 )
		printf( "%s\tfconstant %s\n", buffer, name );
	/* not found */
	else
		printf( "%se0\tfconstant %s\n", buffer, name );
}

void swigStringConstant( char* constant, char *name )
{
	char c;
	printf( ": %s s\\\" ", name );
	while(( c = *constant++ ))
	{
		switch(c)
		{
			case '\b': printf( "\\b" ); break;
			case '\n': printf( "\\n" ); break;
			case '\f': printf( "\\f" ); break;
			case '\r': printf( "\\r" ); break;
			case '\t': printf( "\\t" ); break;
			case '"' : printf( "\\q" ); break;
			default:
				if(c < 0x20)
					printf("\\x%02x", c);
				else
					printf("%c", c); break;
		}
	}
	printf(	"\" ;\n" );
}

/* structs */
void swigStructField( char *name, size_t offset, size_t size )
{
	printf( "\tdrop %zu %zu +field %s\n", offset, size, name );
}

/* functions */
void swigFunction( char* gforth, char *swiftForth, char *vfx, char *stackComment )
{
	if( swigTargetSystem == GFORTH )
		printf( "%s", gforth );
	else if( swigTargetSystem == SWIFTFORTH )
		printf( "%s", swiftForth );
	else if( swigTargetSystem == VFX )
		printf( "%s", vfx );

	if( swigPrintStackComments )
		printf( "%s", stackComment );

	printf( "\n" );
}

/* function pointers */
void swigFunctionPointer( char* gforth, char *swiftForth, char *vfx, char *stackComment )
{
	swigFunction( gforth, swiftForth, vfx, stackComment );
}

/* callbacks */
void swigCallback( char* gforth, char *swiftForth, char *vfx, char *stackComment )
{
	swigFunction( gforth, swiftForth, vfx, stackComment );
}

void swigUsage( char **argv )
{
	fprintf( stderr, "Usage: %s [-gforth|-swiftforth|-vfx]\n", argv[0] );
}

int main( int argc, char **argv )
{
	int i;

	/* check arguments */
	for( i = 1; i < argc; i++ )
		if( strcmp( argv[i], "-gforth" ) == 0 )
			swigTargetSystem = GFORTH;
		else if( strcmp( argv[i], "-swiftforth" ) == 0 )
			swigTargetSystem = SWIFTFORTH;
		else if( strcmp( argv[i], "-vfx" ) == 0 )
			swigTargetSystem = VFX;

	if( swigTargetSystem == NONE )
	{
		fprintf( stderr, "Error: no target system specified\n" );
		swigUsage( argv );
		return 1;
	}

	/* primer */
	printf( "\\ This file has been generated using SWIG and fsi,\n"
		"\\ and is already platform dependent, search for the corresponding\n"
		"\\ fsi-file to compile it where no one has compiled it before ;)\n"
		"\\ Forth systems have their own own dynamic loader and don't need addional C-Code.\n"
		"\\ That's why this file will just print normal forth-code once compiled\n"
		"\\ and can be used directly with include or require.\n"
		"\\ As all comments are stripped during the compilation, please\n"
		"\\ insert the copyright notice of the original file here.\n"
	);



	swigNewline();

	swigComment("----===< prefix >===-----\n");

	swigPrint( "c-library sdl2\ns\" sdl2\" add-lib\n\\c // #define DECLSPEC\n\\c // #define SDLCALL\n\\c // #define SDL_PRINTF_FORMAT_STRING\n\\c #include <SDL2/SDL.h>\n\\c #include <SDL2/SDL_log.h>\n\\c #include <SDL2/SDL_main.h>\n\\c #include <SDL2/SDL_revision.h>\n\\c #include <SDL2/SDL_version.h>", "( none )", "( none )" );

	swigNewline();

	swigComment("----===< int constants >===-----\n");
	#ifdef SDL_INIT_TIMER
		swigUnsignedIntConstant( SDL_INIT_TIMER, "SDL_INIT_TIMER" );
	#endif
	#ifdef SDL_INIT_AUDIO
		swigUnsignedIntConstant( SDL_INIT_AUDIO, "SDL_INIT_AUDIO" );
	#endif
	#ifdef SDL_INIT_VIDEO
		swigUnsignedIntConstant( SDL_INIT_VIDEO, "SDL_INIT_VIDEO" );
	#endif
	#ifdef SDL_INIT_JOYSTICK
		swigUnsignedIntConstant( SDL_INIT_JOYSTICK, "SDL_INIT_JOYSTICK" );
	#endif
	#ifdef SDL_INIT_HAPTIC
		swigUnsignedIntConstant( SDL_INIT_HAPTIC, "SDL_INIT_HAPTIC" );
	#endif
	#ifdef SDL_INIT_GAMECONTROLLER
		swigUnsignedIntConstant( SDL_INIT_GAMECONTROLLER, "SDL_INIT_GAMECONTROLLER" );
	#endif
	#ifdef SDL_INIT_EVENTS
		swigUnsignedIntConstant( SDL_INIT_EVENTS, "SDL_INIT_EVENTS" );
	#endif
	#ifdef SDL_INIT_SENSOR
		swigUnsignedIntConstant( SDL_INIT_SENSOR, "SDL_INIT_SENSOR" );
	#endif
	#ifdef SDL_INIT_NOPARACHUTE
		swigUnsignedIntConstant( SDL_INIT_NOPARACHUTE, "SDL_INIT_NOPARACHUTE" );
	#endif
	#ifdef SDL_INIT_EVERYTHING
		swigUnsignedIntConstant( SDL_INIT_EVERYTHING, "SDL_INIT_EVERYTHING" );
	#endif
	#ifdef SDL_MAX_LOG_MESSAGE
		swigIntConstant( SDL_MAX_LOG_MESSAGE, "SDL_MAX_LOG_MESSAGE" );
	#endif
	#ifdef SDL_REVISION_NUMBER
		swigIntConstant( SDL_REVISION_NUMBER, "SDL_REVISION_NUMBER" );
	#endif
	#ifdef SDL_MAJOR_VERSION
		swigIntConstant( SDL_MAJOR_VERSION, "SDL_MAJOR_VERSION" );
	#endif
	#ifdef SDL_MINOR_VERSION
		swigIntConstant( SDL_MINOR_VERSION, "SDL_MINOR_VERSION" );
	#endif
	#ifdef SDL_PATCHLEVEL
		swigIntConstant( SDL_PATCHLEVEL, "SDL_PATCHLEVEL" );
	#endif
	#ifdef SDL_COMPILEDVERSION
		swigIntConstant( SDL_COMPILEDVERSION, "SDL_COMPILEDVERSION" );
	#endif

	swigNewline();

	swigComment("--------===< enums >===---------\n");
	swigIntConstant( SDL_LOG_CATEGORY_APPLICATION, "SDL_LOG_CATEGORY_APPLICATION" );
	swigIntConstant( SDL_LOG_CATEGORY_ERROR, "SDL_LOG_CATEGORY_ERROR" );
	swigIntConstant( SDL_LOG_CATEGORY_ASSERT, "SDL_LOG_CATEGORY_ASSERT" );
	swigIntConstant( SDL_LOG_CATEGORY_SYSTEM, "SDL_LOG_CATEGORY_SYSTEM" );
	swigIntConstant( SDL_LOG_CATEGORY_AUDIO, "SDL_LOG_CATEGORY_AUDIO" );
	swigIntConstant( SDL_LOG_CATEGORY_VIDEO, "SDL_LOG_CATEGORY_VIDEO" );
	swigIntConstant( SDL_LOG_CATEGORY_RENDER, "SDL_LOG_CATEGORY_RENDER" );
	swigIntConstant( SDL_LOG_CATEGORY_INPUT, "SDL_LOG_CATEGORY_INPUT" );
	swigIntConstant( SDL_LOG_CATEGORY_TEST, "SDL_LOG_CATEGORY_TEST" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED1, "SDL_LOG_CATEGORY_RESERVED1" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED2, "SDL_LOG_CATEGORY_RESERVED2" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED3, "SDL_LOG_CATEGORY_RESERVED3" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED4, "SDL_LOG_CATEGORY_RESERVED4" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED5, "SDL_LOG_CATEGORY_RESERVED5" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED6, "SDL_LOG_CATEGORY_RESERVED6" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED7, "SDL_LOG_CATEGORY_RESERVED7" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED8, "SDL_LOG_CATEGORY_RESERVED8" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED9, "SDL_LOG_CATEGORY_RESERVED9" );
	swigIntConstant( SDL_LOG_CATEGORY_RESERVED10, "SDL_LOG_CATEGORY_RESERVED10" );
	swigIntConstant( SDL_LOG_CATEGORY_CUSTOM, "SDL_LOG_CATEGORY_CUSTOM" );
	swigIntConstant( SDL_LOG_PRIORITY_VERBOSE, "SDL_LOG_PRIORITY_VERBOSE" );
	swigIntConstant( SDL_LOG_PRIORITY_DEBUG, "SDL_LOG_PRIORITY_DEBUG" );
	swigIntConstant( SDL_LOG_PRIORITY_INFO, "SDL_LOG_PRIORITY_INFO" );
	swigIntConstant( SDL_LOG_PRIORITY_WARN, "SDL_LOG_PRIORITY_WARN" );
	swigIntConstant( SDL_LOG_PRIORITY_ERROR, "SDL_LOG_PRIORITY_ERROR" );
	swigIntConstant( SDL_LOG_PRIORITY_CRITICAL, "SDL_LOG_PRIORITY_CRITICAL" );
	swigIntConstant( SDL_NUM_LOG_PRIORITIES, "SDL_NUM_LOG_PRIORITIES" );

	swigNewline();

	swigComment("-------===< structs >===--------\n");

	swigComment("SDL_version\n");
	printf( "begin-structure SDL_version\n" );
	swigStructField( "SDL_version-major", offsetof( struct SDL_version, major ), sizeof( Uint8 ) );
	swigStructField( "SDL_version-minor", offsetof( struct SDL_version, minor ), sizeof( Uint8 ) );
	swigStructField( "SDL_version-patch", offsetof( struct SDL_version, patch ), sizeof( Uint8 ) );
	printf( "drop %zu end-structure\n", sizeof( struct SDL_version ) );

	swigNewline();

	swigComment("------===< callbacks >===-------\n");
	swigCallback( "c-callback SDL_LogOutputFunction: a n n s -- void", "", "", "	( userdata category priority message -- )" );
	swigCallback( "c-callback SDL_main_func: n a -- n", "", "", "	( argc argv -- )" );

	swigNewline();

	swigComment("------===< functions >===-------\n");
	swigFunction( "c-function SDL_Init SDL_Init n -- n", "FUNCTION: SDL_Init ( flags -- n )", "EXTERN: \"C\" int SDL_Init( int flags );", "	( flags -- )" );
	swigFunction( "c-function SDL_InitSubSystem SDL_InitSubSystem n -- n", "FUNCTION: SDL_InitSubSystem ( flags -- n )", "EXTERN: \"C\" int SDL_InitSubSystem( int flags );", "	( flags -- )" );
	swigFunction( "c-function SDL_QuitSubSystem SDL_QuitSubSystem n -- void", "FUNCTION: SDL_QuitSubSystem ( flags -- void )", "EXTERN: \"C\" void SDL_QuitSubSystem( int flags );", "	( flags -- )" );
	swigFunction( "c-function SDL_WasInit SDL_WasInit n -- n", "FUNCTION: SDL_WasInit ( flags -- n )", "EXTERN: \"C\" int SDL_WasInit( int flags );", "	( flags -- )" );
	swigFunction( "c-function SDL_Quit SDL_Quit  -- void", "FUNCTION: SDL_Quit (  -- void )", "EXTERN: \"C\" void SDL_Quit(  );", "	( -- )" );
	swigFunction( "c-function SDL_LogSetAllPriority SDL_LogSetAllPriority n -- void", "FUNCTION: SDL_LogSetAllPriority ( priority -- void )", "EXTERN: \"C\" void SDL_LogSetAllPriority( int priority );", "	( priority -- )" );
	swigFunction( "c-function SDL_LogSetPriority SDL_LogSetPriority n n -- void", "FUNCTION: SDL_LogSetPriority ( category priority -- void )", "EXTERN: \"C\" void SDL_LogSetPriority( int category, int priority );", "	( category priority -- )" );
	swigFunction( "c-function SDL_LogGetPriority SDL_LogGetPriority n -- n", "FUNCTION: SDL_LogGetPriority ( category -- n )", "EXTERN: \"C\" int SDL_LogGetPriority( int category );", "	( category -- )" );
	swigFunction( "c-function SDL_LogResetPriorities SDL_LogResetPriorities  -- void", "FUNCTION: SDL_LogResetPriorities (  -- void )", "EXTERN: \"C\" void SDL_LogResetPriorities(  );", "	( -- )" );
	swigFunction( "c-function SDL_Log SDL_Log s ... -- void", "FUNCTION: SDL_Log ( fmt  -- void )", "EXTERN: \"C\" void SDL_Log( char * fmt, ...  );", "	( fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogVerbose SDL_LogVerbose n s ... -- void", "FUNCTION: SDL_LogVerbose ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogVerbose( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogDebug SDL_LogDebug n s ... -- void", "FUNCTION: SDL_LogDebug ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogDebug( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogInfo SDL_LogInfo n s ... -- void", "FUNCTION: SDL_LogInfo ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogInfo( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogWarn SDL_LogWarn n s ... -- void", "FUNCTION: SDL_LogWarn ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogWarn( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogError SDL_LogError n s ... -- void", "FUNCTION: SDL_LogError ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogError( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogCritical SDL_LogCritical n s ... -- void", "FUNCTION: SDL_LogCritical ( category fmt  -- void )", "EXTERN: \"C\" void SDL_LogCritical( int category, char * fmt, ...  );", "	( category fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogMessage SDL_LogMessage n n s ... -- void", "FUNCTION: SDL_LogMessage ( category priority fmt  -- void )", "EXTERN: \"C\" void SDL_LogMessage( int category, int priority, char * fmt, ...  );", "	( category priority fmt <noname> -- )" );
	swigFunction( "c-function SDL_LogMessageV SDL_LogMessageV n n s n -- void", "FUNCTION: SDL_LogMessageV ( category priority fmt ap -- void )", "EXTERN: \"C\" void SDL_LogMessageV( int category, int priority, char * fmt, n ap );", "	( category priority fmt ap -- )" );
	swigFunction( "c-function SDL_LogGetOutputFunction SDL_LogGetOutputFunction a a -- void", "FUNCTION: SDL_LogGetOutputFunction ( callback userdata -- void )", "EXTERN: \"C\" void SDL_LogGetOutputFunction( void * callback, void * userdata );", "	( callback userdata -- )" );
	swigFunction( "c-function SDL_LogSetOutputFunction SDL_LogSetOutputFunction a a -- void", "FUNCTION: SDL_LogSetOutputFunction ( callback userdata -- void )", "EXTERN: \"C\" void SDL_LogSetOutputFunction( void * callback, void * userdata );", "	( callback userdata -- )" );
	swigFunction( "c-function SDL_main SDL_main n a -- n", "FUNCTION: SDL_main ( argc argv -- n )", "EXTERN: \"C\" int SDL_main( int argc, void * argv );", "	( argc argv -- )" );
	swigFunction( "c-function SDL_SetMainReady SDL_SetMainReady  -- void", "FUNCTION: SDL_SetMainReady (  -- void )", "EXTERN: \"C\" void SDL_SetMainReady(  );", "	( -- )" );
	swigFunction( "c-function SDL_GetVersion SDL_GetVersion a -- void", "FUNCTION: SDL_GetVersion ( ver -- void )", "EXTERN: \"C\" void SDL_GetVersion( void * ver );", "	( ver -- )" );
	swigFunction( "c-function SDL_GetRevision SDL_GetRevision  -- s", "FUNCTION: SDL_GetRevision (  -- s )", "EXTERN: \"C\" char * SDL_GetRevision(  );", "	( -- )" );
	swigFunction( "c-function SDL_GetRevisionNumber SDL_GetRevisionNumber  -- n", "FUNCTION: SDL_GetRevisionNumber (  -- n )", "EXTERN: \"C\" int SDL_GetRevisionNumber(  );", "	( -- )" );

	swigNewline();

	swigComment("----===< postfix >===-----\n");

	swigPrint( "end-c-library", "( none )", "( none )" );
	
	return 0;
} /* end of main */



