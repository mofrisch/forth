
Running FP Tests

Running ak-fp-test.fth
----------------------


CHECKING FS. 
You might see 1.0000E0  : 1.0000E0 
You might see 2.0000E1  : 2.0000E1 
You might see 2.0000E-2 : 2.0000E-2 
You might see -3.3300E4 : -3.3300E4 
You might see 3.3333E0  : 3.3333E0 
You might see 6.6667E-2 : 6.6667E-2 
CHECKING FE. 
You might see 1.0000E0  : 1.0000E0 
You might see 20.000E0  : 20.000E0 
You might see 300.00E0  : 300.00E0 
You might see 4.0000E3  : 4.0000E3 
You might see 333.33E-3 : 333.33E-3 
You might see 6.6667E3  : 6.6667E3 
CHECKING F. 
You might see 1000.   : 1000. 
You might see 1100.   : 1100. 
You might see 0.33333 : 0.33333 
You might see 66.667  : 66.667 
You might see 0.00023 : 0.000234 
You might see 0.00024 : 0.000236 

End of ak-fp-test.fth

Running fatan2-test.fs
----------------------

floating-point and data stacks *separate*
testing normal values
testing Single UNIX 3 special values spec
testing Single UNIX 3 special values optional spec

#ERRORS: 0 


End of fatan2-test.fs

Running ieee-arith-test.fs
--------------------------

TESTING F+
TESTING F-
TESTING F*
TESTING F/
TESTING FSQRT
NOT TESTING F*+
#ERRORS: 0 


End of ieee-arith-test.fs

Running ieee-fprox-test.fs
--------------------------

TESTING equality of floating-point encoding
TESTING absolute tolerance
TESTING relative tolerance
#ERRORS: 0 

End of ieee-fprox-test.fs

Running fpzero-test.4th
-----------------------


System supports fp signed zero. 
#ERRORS: 0 

End of fpzero-test.4th

Running fpio-test.4th
---------------------
FPIO-TEST         V1.1      01 Dec     2010 
TESTING Conversion of Exactly Representable Numbers

TESTING Rounding of Numbers

End of fpio-test.4th

Running to-float-test.4th
-------------------------
TESTING >FLOAT

#ERRORS: 0 

End of to-float-test.4th

Running paranoia.4th
--------------------

Lest this program stop prematurely, i.e. before displaying

   `END OF TEST',

try to persuade the computer NOT to terminate execution when an
error like Over/Underflow or Division by Zero occurs, but rather
to persevere with a surrogate value after, perhaps, displaying some
warning.  If persuasion avails naught, don't despair but run this
program anyway to see how many milestones it passes, and then
amend it to make further progress.

Answer questions with Y, y, N or n (unless otherwise indicated).
Diagnosis resumes after milestone Number 0 
         Page: 1 

Users are invited to help debug and augment this program so it will
cope with unanticipated and newly uncovered arithmetic pathologies.
Please send suggestions and interesting results to

Richard Karpinski
Computer Center U-76
University of California
San Francisco, CA 94143-0704, USA

In doing so, please include the following information:

Precision: double
Version: 10 February 1989; Forth
Computer:
Compiler:
Optimization level:
Other relevant compiler options:
Diagnosis resumes after milestone Number 1 
         Page: 2 

Running this program should reveal these characteristics:

    Radix = 1, 2, 4, 8, 10, 16, 100, 256 ...
    Precision = number of significant digits carried.
    U2 = Radix/Radix^Precision = One Ulp
(OneUlpnit in the Last Place) of 1.000xxx .
    U1 = 1/Radix^Precision = One Ulp of numbers a little less than 1.0 .
    Adequacy of guard digits for Mult., Div. and Subt.
    Whether arithmetic is chopped, correctly rounded, or something else
for Mult., Div., Add/Subt. and Sqrt.
    Whether a Sticky Bit used correctly for rounding.
    UnderflowThreshold = an underflow threshold.
    E0 and PseudoZero tell whether underflow is abrupt, gradual, or fuzzy.
    V = an overflow threshold, roughly.
    V0  tells, roughly, whether  Infinity  is represented.
    Comparisions are checked for consistency with subtraction
and for contamination with pseudo-zeros.
    Sqrt is tested.  Y^X is not tested.
    Extra-precise subexpressions are revealed but NOT YET tested.
    Decimal-Binary conversion is NOT YET tested for accuracy.
Diagnosis resumes after milestone Number 2 
         Page: 3 

The program attempts to discriminate among

  FLAWs, like lack of a sticky bit,
  Serious DEFECTs, like lack of a guard digit, and
  FAILUREs, like 2+2 == 5 .

Failures may confound subsequent diagnoses.

The diagnostic capabilities of this program go beyond an earlier
program called `MACHAR', which can be found at the end of the
book  `Software Manual for the Elementary Functions' (1980) by
W. J. Cody and W. Waite. Although both programs try to discover
the Radix, Precision and range (over/underflow thresholds)
of the arithmetic, this program tries to cope with a wider variety
of pathologies, and to say how well the arithmetic is implemented.
The program is based upon a conventional radix representation for
floating-point numbers, but also allows logarithmic encoding
as used by certain early WANG machines.

BASIC version of this program (C) 1983 by Prof. W. M. Kahan;
see source comments for more history.
Diagnosis resumes after milestone Number 3 
         Page: 4 

Program is now RUNNING tests on small integers:
-1, 0, 1/2, 1, 2, 3, 4, 5, 9, 27, 32 & 240 are O.K.

Searching for Radix and Precision.
Radix = 2. .
Closest relative separation found is U1 = 1.1102E-16 

Recalculating radix and precision 
confirms closest relative separation U1 .
Radix confirmed.
The number of significant digits of the Radix is 53. 
Diagnosis resumes after milestone Number 30 
         Page: 5 

Subtraction appears to be normalized, as it should be.
Checking for guard digit in F*, F/, and F-.
    F*, F/, and F- appear to have guard digits, as they should.
Diagnosis resumes after milestone Number 40 
         Page: 6 

Checking rounding on multiply, divide and add/subtract.

Does Multiplication commute?  Testing on 20 random pairs.
    No failures found in 20 integer pairs.

Running test of square root(x).
Testing if sqrt(X * X) == X for 20 Integers X.
Test for sqrt monotonicity.
sqrt has passed a test for Monotonicity.
Testing whether sqrt is rounded or chopped.
Diagnosis resumes after milestone Number 90 
         Page: 7 

Testing powers Z^i for small Integers Z and i.
... no discrepancies found.

Seeking Underflow thresholds UfThold and E0.
Smallest strictly positive number found is E0 = 4.9407E-324 
Since comparison denies Z = 0, evaluating (Z + Z) / Z should be safe.
What the machine gets for (Z + Z) / Z is  2. 
This is O.K., provided Over/Underflow has NOT just been signaled.
Underflow is gradual; it incurs Absolute Error =
(roundoff in UfThold) < E0.
The Underflow threshold is 2.2251E-308 below which
calculation may suffer larger Relative error than merely roundoff.
Since underflow occurs below the threshold
UfThold = 2.0000E0 ^-1.0220E3 
only underflow should afflict the expression
     2.0000E0 ^-2.0440E3 
actually calculating yields: 0.0000E0 
This computed value is O.K.

Testing X^((X + 1) / (X - 1)) vs. exp(2) = 7.3891E0 as X -> 1.
Accuracy seems adequate.
Testing powers Z^Q at four nearly extreme values.
... no discrepancies found.

Diagnosis resumes after milestone Number 160 
         Page: 8 

Searching for Overflow threshold:
This may generate an error.
Can `Z = -Y' overflow?
Trying it on Y = -in
Seems O.K.
Overflow threshold is V  = 1.7977E308 
Overflow saturates at V0 = inf
No Overflow should be signaled for V * 1 = 1.7977E308 
                          nor for V / 1 = 1.7977E308 
Any overflow signal separating this * from the one
above is a DEFECT.

Diagnosis resumes after milestone Number 190 
         Page: 9 


What message and/or values does Division by Zero produce?

   Trying to compute 1 / 0 produces ...inf

   Trying to compute 0 / 0 produces ...NaN
Diagnosis resumes after milestone Number 220 
         Page: 10 


FAILUREs  encountered = 0 
SERIOUS DEFECTs  discovered = 0 
DEFECTs  discovered = 0 
END OF TEST.

End of paranoia.fth


FP tests finished successfully

