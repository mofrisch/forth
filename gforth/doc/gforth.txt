Gforth
1 Goals of Gforth
2 Gforth Environment
  2.1 Invoking Gforth
  2.2 Leaving Gforth
  2.3 Help on Gforth
  2.4 Command-line editing
  2.5 Environment variables
  2.6 Gforth files
  2.7 Gforth in pipes
  2.8 Startup speed
3 Forth Tutorial
  3.1 Starting Gforth
  3.2 Syntax
  3.3 Crash Course
  3.4 Stack
  3.5 Arithmetics
  3.6 Stack Manipulation
  3.7 Using files for Forth code
  3.8 Comments
  3.9 Colon Definitions
  3.10 Decompilation
  3.11 Stack-Effect Comments
  3.12 Types
  3.13 Factoring
  3.14 Designing the stack effect
  3.15 Local Variables
  3.16 Conditional execution
  3.17 Flags and Comparisons
  3.18 General Loops
  3.19 Counted loops
  3.20 Recursion
  3.21 Leaving definitions or loops
  3.22 Return Stack
  3.23 Memory
  3.24 Characters and Strings
  3.25 Alignment
  3.26 Floating Point
  3.27 Files
    3.27.1 Open file for input
    3.27.2 Create file for output
    3.27.3 Scan file for a particular line
    3.27.4 Copy input to output
    3.27.5 Close files
  3.28 Interpretation and Compilation Semantics and Immediacy
  3.29 Execution Tokens
  3.30 Exceptions
  3.31 Defining Words
  3.32 Arrays and Records
  3.33 'POSTPONE'
  3.34 'Literal'
  3.35 Advanced macros
  3.36 Compilation Tokens
  3.37 Wordlists and Search Order
4 An Introduction to Standard Forth
  4.1 Introducing the Text Interpreter
  4.2 Stacks, postfix notation and parameter passing
  4.3 Your first Forth definition
  4.4 How does that work?
  4.5 Forth is written in Forth
  4.6 Review - elements of a Forth system
  4.7 Where To Go Next
  4.8 Exercises
5 Forth Words
  5.1 Notation
  5.2 Case insensitivity
  5.3 Comments
  5.4 Boolean Flags
  5.5 Arithmetic
    5.5.1 Single precision
    5.5.2 Double precision
    5.5.3 Mixed precision
    5.5.4 Integer division
    5.5.5 Two-stage integer division
    5.5.6 Bitwise operations
    5.5.7 Numeric comparison
    5.5.8 Floating Point
  5.6 Stack Manipulation
    5.6.1 Data stack
    5.6.2 Floating point stack
    5.6.3 Return stack
    5.6.4 Locals stack
    5.6.5 Stack pointer manipulation
  5.7 Memory
    5.7.1 Memory model
    5.7.2 Dictionary allocation
    5.7.3 Heap allocation
    5.7.4 Memory Access
    5.7.5 Address arithmetic
    5.7.6 Memory Blocks
  5.8 Control Structures
    5.8.1 Selection
    5.8.2 Simple Loops
    5.8.3 Counted Loops
    5.8.4 'Begin' loops with multiple exits
    5.8.5 General control structures with 'case'
    5.8.6 Arbitrary control structures
      5.8.6.1 Programming Style
    5.8.7 Calls and returns
    5.8.8 Exception Handling
  5.9 Defining Words
    5.9.1 'CREATE'
    5.9.2 Variables
    5.9.3 Constants
    5.9.4 Values
    5.9.5 Colon Definitions
    5.9.6 Anonymous Definitions
    5.9.7 Quotations
    5.9.8 Supplying the name of a defined word
    5.9.9 User-defined Defining Words
      5.9.9.1 Applications of 'CREATE..DOES>'
      5.9.9.2 The gory details of 'CREATE..DOES>'
      5.9.9.3 Advanced does> usage example
      5.9.9.4 'Const-does>'
    5.9.10 Deferred Words
    5.9.11 Forward
    5.9.12 Aliases
  5.10 Interpretation and Compilation Semantics
    5.10.1 Combined Words
  5.11 Tokens for Words
    5.11.1 Execution token
    5.11.2 Compilation token
    5.11.3 Name token
  5.12 Compiling words
    5.12.1 Literals
    5.12.2 Macros
  5.13 The Text Interpreter
    5.13.1 Input Sources
    5.13.2 Number Conversion
    5.13.3 Interpret/Compile states
    5.13.4 Interpreter Directives
    5.13.5 Recognizers
  5.14 The Input Stream
  5.15 Word Lists
    5.15.1 Vocabularies
    5.15.2 Why use word lists?
    5.15.3 Word list example
  5.16 Environmental Queries
  5.17 Files
    5.17.1 Forth source files
    5.17.2 General files
    5.17.3 Redirection
    5.17.4 Directories
    5.17.5 Search Paths
      5.17.5.1 Source Search Paths
      5.17.5.2 General Search Paths
  5.18 Blocks
  5.19 Other I/O
    5.19.1 Simple numeric output
    5.19.2 Formatted numeric output
    5.19.3 String Formats
    5.19.4 Displaying characters and strings
    5.19.5 String words
    5.19.6 Terminal output
      5.19.6.1 Color output
      5.19.6.2 Color themes
    5.19.7 Single-key input
    5.19.8 Line input and conversion
    5.19.9 Pipes
    5.19.10 Xchars and Unicode
  5.20 OS command line arguments
  5.21 Locals
    5.21.1 Gforth locals
      5.21.1.1 Where are locals visible by name?
      5.21.1.2 How long do locals live?
      5.21.1.3 Locals programming style
      5.21.1.4 Locals implementation
      5.21.1.5 Closures
    5.21.2 Standard Forth locals
  5.22 Structures
    5.22.1 Why explicit structure support?
    5.22.2 Structure Usage
    5.22.3 Structure Naming Convention
    5.22.4 Structure Implementation
    5.22.5 Structure Glossary
    5.22.6 Forth200x Structures
  5.23 Object-oriented Forth
    5.23.1 Why object-oriented programming?
    5.23.2 Object-Oriented Terminology
    5.23.3 The 'objects.fs' model
      5.23.3.1 Properties of the 'objects.fs' model
      5.23.3.2 Basic 'objects.fs' Usage
      5.23.3.3 The 'object.fs' base class
      5.23.3.4 Creating objects
      5.23.3.5 Object-Oriented Programming Style
      5.23.3.6 Class Binding
      5.23.3.7 Method conveniences
      5.23.3.8 Classes and Scoping
      5.23.3.9 Dividing classes
      5.23.3.10 Object Interfaces
      5.23.3.11 'objects.fs' Implementation
      5.23.3.12 'objects.fs' Glossary
    5.23.4 The 'oof.fs' model
      5.23.4.1 Properties of the 'oof.fs' model
      5.23.4.2 Basic 'oof.fs' Usage
      5.23.4.3 The 'oof.fs' base class
      5.23.4.4 Class Declaration
      5.23.4.5 Class Implementation
    5.23.5 The 'mini-oof.fs' model
      5.23.5.1 Basic 'mini-oof.fs' Usage
      5.23.5.2 Mini-OOF Example
      5.23.5.3 'mini-oof.fs' Implementation
    5.23.6 Comparison with other object models
  5.24 Programming Tools
    5.24.1 Locating source code definitions
    5.24.2 Locating documentation
    5.24.3 Locating uses of a word
    5.24.4 Locating exception source
    5.24.5 Examining compiled code
    5.24.6 Examining data and code
    5.24.7 Forgetting words
    5.24.8 Debugging
    5.24.9 Assertions
    5.24.10 Singlestep Debugger
    5.24.11 Code Coverage and Execution Frequency
  5.25 Multitasker
    5.25.1 Ptheads
      5.25.1.1 Special User Variables
      5.25.1.2 Semaphores
      5.25.1.3 Atomic operations
      5.25.1.4 Message Queues
      5.25.1.5 Conditions
  5.26 C Interface
    5.26.1 Calling C functions
    5.26.2 Declaring C Functions
    5.26.3 Calling C function pointers from Forth
    5.26.4 Defining library interfaces
    5.26.5 Declaring OS-level libraries
    5.26.6 Callbacks
    5.26.7 How the C interface works
    5.26.8 Low-Level C Interface Words
    5.26.9 Migrating from Gforth 0.7
  5.27 Assembler and Code Words
    5.27.1 Definitions in assembly language
    5.27.2 Common Assembler
    5.27.3 Common Disassembler
    5.27.4 386 Assembler
    5.27.5 AMD64 (x86_64) Assembler
    5.27.6 Alpha Assembler
    5.27.7 MIPS assembler
    5.27.8 PowerPC assembler
    5.27.9 ARM Assembler
    5.27.10 Other assemblers
  5.28 Threading Words
  5.29 Passing Commands to the Operating System
  5.30 Keeping track of Time
  5.31 Miscellaneous Words
6 Error messages
7 Tools
  7.1 'ans-report.fs': Report the words used, sorted by wordset
    7.1.1 Caveats
  7.2 Stack depth changes during interpretation
8 Standard conformance
  8.1 The Core Words
    8.1.1 Implementation Defined Options
    8.1.2 Ambiguous conditions
    8.1.3 Other system documentation
  8.2 The optional Block word set
    8.2.1 Implementation Defined Options
    8.2.2 Ambiguous conditions
    8.2.3 Other system documentation
  8.3 The optional Double Number word set
    8.3.1 Ambiguous conditions
  8.4 The optional Exception word set
    8.4.1 Implementation Defined Options
  8.5 The optional Facility word set
    8.5.1 Implementation Defined Options
    8.5.2 Ambiguous conditions
  8.6 The optional File-Access word set
    8.6.1 Implementation Defined Options
    8.6.2 Ambiguous conditions
  8.7 The optional Floating-Point word set
    8.7.1 Implementation Defined Options
    8.7.2 Ambiguous conditions
  8.8 The optional Locals word set
    8.8.1 Implementation Defined Options
    8.8.2 Ambiguous conditions
  8.9 The optional Memory-Allocation word set
    8.9.1 Implementation Defined Options
  8.10 The optional Programming-Tools word set
    8.10.1 Implementation Defined Options
    8.10.2 Ambiguous conditions
  8.11 The optional Search-Order word set
    8.11.1 Implementation Defined Options
    8.11.2 Ambiguous conditions
9 Should I use Gforth extensions?
10 Model
11 Integrating Gforth into C programs
  11.1 Types
  11.2 Variables
  11.3 Functions
  11.4 Signals
12 Emacs and Gforth
  12.1 Installing gforth.el
  12.2 Emacs Tags
  12.3 Hilighting
  12.4 Auto-Indentation
  12.5 Blocks Files
13 Image Files
  13.1 Image Licensing Issues
  13.2 Image File Background
  13.3 Non-Relocatable Image Files
  13.4 Data-Relocatable Image Files
  13.5 Fully Relocatable Image Files
    13.5.1 'gforthmi'
    13.5.2 'cross.fs'
  13.6 Stack and Dictionary Sizes
  13.7 Running Image Files
  13.8 Modifying the Startup Sequence
14 Engine
  14.1 Portability
  14.2 Threading
    14.2.1 Scheduling
    14.2.2 Direct or Indirect Threaded?
    14.2.3 Dynamic Superinstructions
    14.2.4 DOES>
  14.3 Primitives
    14.3.1 Automatic Generation
    14.3.2 TOS Optimization
    14.3.3 Produced code
  14.4 Performance
15 Cross Compiler
  15.1 Using the Cross Compiler
  15.2 How the Cross Compiler Works
Appendix A Bugs
Appendix B Authors and Ancestors of Gforth
  B.1 Authors and Contributors
  B.2 Pedigree
Appendix C Other Forth-related information
Appendix D Licenses
  D.1 GNU Free Documentation License
    D.1.1 ADDENDUM: How to use this License for your documents
  D.2 GNU GENERAL PUBLIC LICENSE
Word Index
Concept and Word Index
Gforth
******

This manual is for Gforth (version 0.7.9_20200716, February 8, 2018), a
fast and portable implementation of the Standard Forth language.  It
serves as reference manual, but it also contains an introduction to
Forth and a Forth tutorial.

   Authors: Bernd Paysan, Anton Ertl, Gerald Wodni Copyright © 1995,
1996, 1997, 1998, 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014,2015,2016,2017,2018,2019 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by the
     Free Software Foundation raise funds for GNU development."

1 Goals of Gforth
*****************

The goal of the Gforth Project is to develop a standard model for
Standard Forth.  This can be split into several subgoals:

   * Gforth should conform to the Forth Standard.
   * It should be a model, i.e.  it should define all the
     implementation-dependent things.
   * It should become standard, i.e.  widely accepted and used.  This
     goal is the most difficult one.

   To achieve these goals Gforth should be
   * Similar to previous models (fig-Forth, F83)
   * Powerful.  It should provide for all the things that are considered
     necessary today and even some that are not yet considered
     necessary.
   * Efficient.  It should not get the reputation of being exceptionally
     slow.
   * Free.
   * Available on many machines/easy to port.

   Have we achieved these goals?  Gforth conforms to the Forth-94 (ANS
Forth) and Forth-2012 standards.  It may be considered a model, but we
have not yet documented which parts of the model are stable and which
parts we are likely to change.  It certainly has not yet become a de
facto standard, but it appears to be quite popular.  It has some
similarities to and some differences from previous models.  It has some
powerful features, but not yet everything that we envisioned.  We
certainly have achieved our execution speed goals (*note
Performance::)(1).  It is free and available on many machines.

   ---------- Footnotes ----------

   (1) However, in 1998 the bar was raised when the major commercial
Forth vendors switched to native code compilers.

2 Gforth Environment
********************

Note: ultimately, the Gforth man page will be auto-generated from the
material in this chapter.

   For related information about the creation of images see *note Image
Files::.

2.1 Invoking Gforth
===================

Gforth is made up of two parts; an executable "engine" (named 'gforth'
or 'gforth-fast') and an image file.  To start it, you will usually just
say 'gforth' -- this automatically loads the default image file
'gforth.fi'.  In many other cases the default Gforth image will be
invoked like this:
     gforth [file | -e forth-code] ...
This interprets the contents of the files and the Forth code in the
order they are given.

   In addition to the 'gforth' engine, there is also an engine called
'gforth-fast', which is faster, but gives less informative error
messages (*note Error messages::) and may catch some errors (in
particular, stack underflows and integer division errors) later or not
at all.  You should use it for debugged, performance-critical programs.

   Moreover, there is an engine called 'gforth-itc', which is useful in
some backwards-compatibility situations (*note Direct or Indirect
Threaded?::).

   In general, the command line looks like this:

     gforth[-fast] [engine options] [image options]

   The engine options must come before the rest of the command line.
They are:

'--image-file file'
'-i file'
     Loads the Forth image file instead of the default 'gforth.fi'
     (*note Image Files::).

'--appl-image file'
     Loads the image file and leaves all further command-line arguments
     to the image (instead of processing them as engine options).  This
     is useful for building executable application images on Unix, built
     with 'gforthmi --application ...'.

'--path path'
'-p path'
     Uses path for searching the image file and Forth source code files
     instead of the default in the environment variable 'GFORTHPATH' or
     the path specified at installation time and the working directory
     '.' (e.g., '/usr/local/share/gforth/0.2.0:.').  A path is given as
     a list of directories, separated by ':' (previous versions had ';'
     for other OSes, but since Cygwin now only accepts
     '/cygdrive/<letter>', and we dropped support for OS/2 and MS-DOS,
     it is ':' everywhere).

'--dictionary-size size'
'-m size'
     Allocate size space for the Forth dictionary space instead of using
     the default specified in the image (typically 256K). The size
     specification for this and subsequent options consists of an
     integer and a unit (e.g., '4M').  The unit can be one of 'b'
     (bytes), 'e' (element size, in this case Cells), 'k' (kilobytes),
     'M' (Megabytes), 'G' (Gigabytes), and 'T' (Terabytes).  If no unit
     is specified, 'e' is used.

'--data-stack-size size'
'-d size'
     Allocate size space for the data stack instead of using the default
     specified in the image (typically 16K).

'--return-stack-size size'
'-r size'
     Allocate size space for the return stack instead of using the
     default specified in the image (typically 15K).

'--fp-stack-size size'
'-f size'
     Allocate size space for the floating point stack instead of using
     the default specified in the image (typically 15.5K). In this case
     the unit specifier 'e' refers to floating point numbers.

'--locals-stack-size size'
'-l size'
     Allocate size space for the locals stack instead of using the
     default specified in the image (typically 14.5K).

'--vm-commit'
     Normally, Gforth tries to start up even if there is not enough
     virtual memory for the dictionary and the stacks (using
     'MAP_NORESERVE' on OSs that support it); so you can ask for a
     really big dictionary and/or stacks, and as long as you don't use
     more virtual memory than is available, everything will be fine (but
     if you use more, processes get killed).  With this option you just
     use the default allocation policy of the OS; for OSs that don't
     overcommit (e.g., Solaris), this means that you cannot and should
     not ask for as big dictionary and stacks, but once Gforth
     successfully starts up, out-of-memory won't kill it.

'--help'
'-h'
     Print a message about the command-line options

'--version'
'-v'
     Print version and exit

'--debug'
     Print some information useful for debugging on startup.

'--offset-image'
     Start the dictionary at a slightly different position than would be
     used otherwise (useful for creating data-relocatable images, *note
     Data-Relocatable Image Files::).

'--no-offset-im'
     Start the dictionary at the normal position.

'--clear-dictionary'
     Initialize all bytes in the dictionary to 0 before loading the
     image (*note Data-Relocatable Image Files::).

'--die-on-signal'
     Normally Gforth handles most signals (e.g., the user interrupt
     SIGINT, or the segmentation violation SIGSEGV) by translating it
     into a Forth 'THROW'.  With this option, Gforth exits if it
     receives such a signal.  This option is useful when the engine
     and/or the image might be severely broken (such that it causes
     another signal before recovering from the first); this option
     avoids endless loops in such cases.

'--no-dynamic'
'--dynamic'
     Disable or enable dynamic superinstructions with replication (*note
     Dynamic Superinstructions::).

'--no-super'
     Disable dynamic superinstructions, use just dynamic replication;
     this is useful if you want to patch threaded code (*note Dynamic
     Superinstructions::).

'--ss-number=N'
     Use only the first N static superinstructions compiled into the
     engine (default: use them all; note that only 'gforth-fast' has
     any).  This option is useful for measuring the performance impact
     of static superinstructions.

'--ss-min-codesize'
'--ss-min-ls'
'--ss-min-lsu'
'--ss-min-nexts'
     Use specified metric for determining the cost of a primitive or
     static superinstruction for static superinstruction selection.
     'Codesize' is the native code size of the primive or static
     superinstruction, 'ls' is the number of loads and stores, 'lsu' is
     the number of loads, stores, and updates, and 'nexts' is the number
     of dispatches (not taking dynamic superinstructions into account),
     i.e.  every primitive or static superinstruction has cost 1.
     Default: 'codesize' if you use dynamic code generation, otherwise
     'nexts'.

'--ss-greedy'
     This option is useful for measuring the performance impact of
     static superinstructions.  By default, an optimal shortest-path
     algorithm is used for selecting static superinstructions.  With
     '--ss-greedy' this algorithm is modified to assume that anything
     after the static superinstruction currently under consideration is
     not combined into static superinstructions.  With '--ss-min-nexts'
     this produces the same result as a greedy algorithm that always
     selects the longest superinstruction available at the moment.
     E.g., if there are superinstructions AB and BCD, then for the
     sequence A B C D the optimal algorithm will select A BCD and the
     greedy algorithm will select AB C D.

'--print-metrics'
     Prints some metrics used during static superinstruction selection:
     'code size' is the actual size of the dynamically generated code.
     'Metric codesize' is the sum of the codesize metrics as seen by
     static superinstruction selection; there is a difference from 'code
     size', because not all primitives and static superinstructions are
     compiled into dynamically generated code, and because of markers.
     The other metrics correspond to the 'ss-min-...' options.  This
     option is useful for evaluating the effects of the '--ss-...'
     options.

   As explained above, the image-specific command-line arguments for the
default image 'gforth.fi' consist of a sequence of filenames and '-e
FORTH-CODE' options that are interpreted in the sequence in which they
are given.  The '-e FORTH-CODE' or '--evaluate FORTH-CODE' option
evaluates the Forth code.  This option takes only one argument; if you
want to evaluate more Forth words, you have to quote them or use '-e'
several times.  To exit after processing the command line (instead of
entering interactive mode) append '-e bye' to the command line.  You can
also process the command-line arguments with a Forth program (*note OS
command line arguments::).

   If you have several versions of Gforth installed, 'gforth' will
invoke the version that was installed last.  'gforth-version' invokes a
specific version.  If your environment contains the variable
'GFORTHPATH', you may want to override it by using the '--path' option.

   On startup, before processing any of the image option, the user
initialization file either specified in the environment variable
'GFORTH_ENV' or, if not set, '~/.config/gforthrc0' is included, if it
exists.  If 'GFORTH_ENV' is "'off'," nothing is included.  After
processing all the image options and just before printing the boot
message, the user initialization file '~/.config/gforthrc' from your
home directory is included, unless the option '--no-rc' is given.

2.2 Leaving Gforth
==================

You can leave Gforth by typing 'bye' or 'Ctrl-d' (at the start of a
line) or (if you invoked Gforth with the '--die-on-signal' option)
'Ctrl-c'.  When you leave Gforth, all of your definitions and data are
discarded.  For ways of saving the state of the system before leaving
Gforth see *note Image Files::.

'bye'       --         unknown       "bye"

2.3 Help on Gforth
==================

Gforth has a simple, text-based online help system.

'help'       "rest-of-line" --         gforth       "help"
   If no name is given, show basic help.  If a documentation node name
is given followed by "::", show the start of the node.  If the name of a
word is given, show the documentation of the word if it exists, or its
source code if not.  Use 'g' to enter the editor at the point shown by
'help'.

'authors'       --         unknown       "authors"
   show the list of authors

'license'       --         gforth       "license"
   print the license statement

2.4 Command-line editing
========================

Gforth maintains a history file that records every line that you type to
the text interpreter.  This file is preserved between sessions, and is
used to provide a command-line recall facility; if you type 'Ctrl-P'
repeatedly you can recall successively older commands from this (or
previous) session(s).  The full list of command-line editing facilities
is:

   * 'Ctrl-p' ("previous") (or up-arrow) to recall successively older
     commands from the history buffer.
   * 'Ctrl-n' ("next") (or down-arrow) to recall successively newer
     commands from the history buffer.
   * 'Ctrl-f' (or right-arrow) to move the cursor right,
     non-destructively.
   * 'Ctrl-b' (or left-arrow) to move the cursor left,
     non-destructively.
   * 'Ctrl-h' (backspace) to delete the character to the left of the
     cursor, closing up the line.
   * 'Ctrl-k' to delete ("kill") from the cursor to the end of the line.
   * 'Ctrl-a' to move the cursor to the start of the line.
   * 'Ctrl-e' to move the cursor to the end of the line.
   * <RET> ('Ctrl-m') or <LFD> ('Ctrl-j') to submit the current line.
   * <TAB> to step through all possible full-word completions of the
     word currently being typed.
   * 'Ctrl-d' on an empty line line to terminate Gforth (gracefully,
     using 'bye').
   * 'Ctrl-x' (or 'Ctrl-d' on a non-empty line) to delete the character
     under the cursor.

   When editing, displayable characters are inserted to the left of the
cursor position; the line is always in "insert" (as opposed to
"overstrike") mode.

   On Unix systems, the history file is '~/.local/share/gforth/history'
by default(1).  You can find out the name and location of your history
file using:

     history-file type \ Unix-class systems

     history-file type \ Other systems
     history-dir  type

   If you enter long definitions by hand, you can use a text editor to
paste them out of the history file into a Forth source file for reuse at
a later time.

   Gforth never trims the size of the history file, so you should do
this periodically, if necessary.

   ---------- Footnotes ----------

   (1) i.e.  it is stored in the user's home directory.

2.5 Environment variables
=========================

Gforth uses these environment variables:

   * 'GFORTHHIST' -- (Unix systems only) specifies the path for the
     history file '.gforth-history'.  Default: '$HOME/.gforth-history'.

   * 'GFORTHPATH' -- specifies the path used when searching for the
     gforth image file and for Forth source-code files (usually '.', the
     current working directory).  Path separator is ':', a typical path
     would be '/usr/local/share/gforth/0.8.0:.'.

   * 'LANG' -- see 'LC_CTYPE'

   * 'LC_ALL' -- see 'LC_CTYPE'

   * 'LC_CTYPE' -- If this variable contains "UTF-8" on Gforth startup,
     Gforth uses the UTF-8 encoding for strings internally and expects
     its input and produces its output in UTF-8 encoding, otherwise the
     encoding is 8bit (see *note Xchars and Unicode::).  If this
     environment variable is unset, Gforth looks in 'LC_ALL', and if
     that is unset, in 'LANG'.

   * 
     'GFORTHSYSTEMPREFIX' -- specifies what to prepend to the argument of
     'system' before passing it to C's 'system()'.  Default:
     '"./$COMSPEC /c "' on Windows, '""' on other OSs.  The prefix and
     the command are directly concatenated, so if a space between them
     is necessary, append it to the prefix.

   * 'GFORTH' -- used by 'gforthmi', *Note gforthmi::.

   * 'GFORTHD' -- used by 'gforthmi', *Note gforthmi::.

   * 'TMP', 'TEMP' - (non-Unix systems only) used as a potential
     location for the history file.

   All the Gforth environment variables default to sensible values if
they are not set.

2.6 Gforth files
================

When you install Gforth on a Unix system, it installs files in these
locations by default:

   * '/usr/local/bin/gforth'
   * '/usr/local/bin/gforthmi'
   * '/usr/local/man/man1/gforth.1' - man page.
   * '/usr/local/info' - the Info version of this manual.
   * '/usr/local/lib/gforth/<version>/...' - Gforth '.fi' files.
   * '/usr/local/share/gforth/<version>/TAGS' - Emacs TAGS file.
   * '/usr/local/share/gforth/<version>/...' - Gforth source files.
   * '.../emacs/site-lisp/gforth.el' - Emacs gforth mode.

   You can select different places for installation by using 'configure'
options (listed with 'configure --help').

2.7 Gforth in pipes
===================

Gforth can be used in pipes created elsewhere (described in the
following).  It can also create pipes on its own (*note Pipes::).

   If you pipe into Gforth, your program should read with 'read-file' or
'read-line' from 'stdin' (*note General files::).  'Key' does not
recognize the end of input.  Words like 'accept' echo the input and are
therefore usually not useful for reading from a pipe.  You have to
invoke the Forth program with an OS command-line option, as you have no
chance to use the Forth command line (the text interpreter would try to
interpret the pipe input).

   You can output to a pipe with 'type', 'emit', 'cr' etc.

   When you write to a pipe that has been closed at the other end,
Gforth receives a SIGPIPE signal ("pipe broken").  Gforth translates
this into the exception 'broken-pipe-error'.  If your application does
not catch that exception, the system catches it and exits, usually
silently (unless you were working on the Forth command line; then it
prints an error message and exits).  This is usually the desired
behaviour.

   If you do not like this behaviour, you have to catch the exception
yourself, and react to it.

   Here's an example of an invocation of Gforth that is usable in a
pipe:

     gforth -e ": foo begin pad dup 10 stdin read-file throw dup while \
      type repeat ; foo bye"

   This example just copies the input verbatim to the output.  A very
simple pipe containing this example looks like this:

     cat startup.fs |
     gforth -e ": foo begin pad dup 80 stdin read-file throw dup while \
      type repeat ; foo bye"|
     head

   Pipes involving Gforth's 'stderr' output do not work.

2.8 Startup speed
=================

If Gforth is used for CGI scripts or in shell scripts, its startup speed
may become a problem.  On a 3GHz Core 2 Duo E8400 under 64-bit Linux
2.6.27.8 with libc-2.7, 'gforth-fast -e bye' takes 13.1ms user and 1.2ms
system time ('gforth -e bye' is faster on startup with about 3.4ms user
time and 1.2ms system time, because it subsumes some of the options
discussed below).

   If startup speed is a problem, you may consider the following ways to
improve it; or you may consider ways to reduce the number of startups
(for example, by using Fast-CGI). Note that the first steps below
improve the startup time at the cost of run-time (including
compile-time), so whether they are profitable depends on the balance of
these times in your application.

   An easy step that influences Gforth startup speed is the use of a
number of options that increase run-time, but decrease image-loading
time.

   The first of these that you should try is '--ss-number=0
--ss-states=1' because this option buys relatively little run-time
speedup and costs quite a bit of time at startup.  'gforth-fast
--ss-number=0 --ss-states=1 -e bye' takes about 2.8ms user and 1.5ms
system time.

   The next option is '--no-dynamic' which has a substantial impact on
run-time (about a factor of 2 on several platforms), but still makes
startup speed a little faster: 'gforth-fast --ss-number=0 --ss-states=1
--no-dynamic -e bye' consumes about 2.6ms user and 1.2ms system time.

   The next step to improve startup speed is to use a data-relocatable
image (*note Data-Relocatable Image Files::).  This avoids the
relocation cost for the code in the image (but not for the data).  Note
that the image is then specific to the particular binary you are using
(i.e., whether it is 'gforth', 'gforth-fast', and even the particular
build).  You create the data-relocatable image that works with
'./gforth-fast' with 'GFORTHD="./gforth-fast --no-dynamic" gforthmi
gforthdr.fi' (the '--no-dynamic' is required here or the image will not
work).  And you run it with 'gforth-fast -i gforthdr.fi ... -e bye' (the
flags discussed above don't matter here, because they only come into
play on relocatable code).  'gforth-fast -i gforthdr.fi -e bye' takes
about 1.1ms user and 1.2ms system time.

   One step further is to avoid all relocation cost and part of the
copy-on-write cost through using a non-relocatable image (*note
Non-Relocatable Image Files::).  However, this has the disadvantage that
it does not work on operating systems with address space randomization
(the default in, e.g., Linux nowadays), or if the dictionary moves for
any other reason (e.g., because of a change of the OS kernel or an
updated library), so we cannot really recommend it.  You create a
non-relocatable image with 'gforth-fast --no-dynamic -e "savesystem
gforthnr.fi bye"' (the '--no-dynamic' is required here, too).  And you
run it with 'gforth-fast -i gforthnr.fi ... -e bye' (again the flags
discussed above don't matter).  'gforth-fast -i gforthdr.fi -e bye'
takes about 0.9ms user and 0.9ms system time.

   If the script you want to execute contains a significant amount of
code, it may be profitable to compile it into the image to avoid the
cost of compiling it at startup time.

3 Forth Tutorial
****************

The difference of this chapter from the Introduction (*note
Introduction::) is that this tutorial is more fast-paced, should be used
while sitting in front of a computer, and covers much more material, but
does not explain how the Forth system works.

   This tutorial can be used with any Standard-compliant Forth; any
Gforth-specific features are marked as such and you can skip them if you
work with another Forth.  This tutorial does not explain all features of
Forth, just enough to get you started and give you some ideas about the
facilities available in Forth.  Read the rest of the manual when you are
through this.

   The intended way to use this tutorial is that you work through it
while sitting in front of the console, take a look at the examples and
predict what they will do, then try them out; if the outcome is not as
expected, find out why (e.g., by trying out variations of the example),
so you understand what's going on.  There are also some assignments that
you should solve.

   This tutorial assumes that you have programmed before and know what,
e.g., a loop is.

3.1 Starting Gforth
===================

You can start Gforth by typing its name:

     gforth

   That puts you into interactive mode; you can leave Gforth by typing
'bye'.  While in Gforth, you can edit the command line and access the
command line history with cursor keys, similar to bash.

3.2 Syntax
==========

A "word" is a sequence of arbitrary characters (except white space).
Words are separated by white space.  E.g., each of the following lines
contains exactly one word:

     word
     !@#$%^&*()
     1234567890
     5!a

   A frequent beginner's error is to leave out necessary white space,
resulting in an error like 'Undefined word'; so if you see such an
error, check if you have put spaces wherever necessary.

     ." hello, world" \ correct
     ."hello, world"  \ gives an "Undefined word" error

   Gforth and most other Forth systems ignore differences in case (they
are case-insensitive), i.e., 'word' is the same as 'Word'.  If your
system is case-sensitive, you may have to type all the examples given
here in upper case.

3.3 Crash Course
================

Forth does not prevent you from shooting yourself in the foot.  Let's
try a few ways to crash Gforth:

     0 0 !
     here execute
     ' catch >body 20 erase abort
     ' (quit) >body 20 erase

   The last two examples are guaranteed to destroy important parts of
Gforth (and most other systems), so you better leave Gforth afterwards
(if it has not finished by itself).  On some systems you may have to
kill gforth from outside (e.g., in Unix with 'kill').

   You will find out later what these lines do and then you will get an
idea why they produce crashes.

   Now that you know how to produce crashes (and that there's not much
to them), let's learn how to produce meaningful programs.

3.4 Stack
=========

The most obvious feature of Forth is the stack.  When you type in a
number, it is pushed on the stack.  You can display the contents of the
stack with '.s'.

     1 2 .s
     3 .s

   '.s' displays the top-of-stack to the right, i.e., the numbers appear
in '.s' output as they appeared in the input.

   You can print the top element of the stack with '.'.

     1 2 3 . . .

   In general, words consume their stack arguments ('.s' is an
exception).

     Assignment: What does the stack contain after '5 6 7 .'?

3.5 Arithmetics
===============

The words '+', '-', '*', '/', and 'mod' always operate on the top two
stack items:

     2 2 .s
     + .s
     .
     2 1 - .
     7 3 mod .

   The operands of '-', '/', and 'mod' are in the same order as in the
corresponding infix expression (this is generally the case in Forth).

   Parentheses are superfluous (and not available), because the order of
the words unambiguously determines the order of evaluation and the
operands:

     3 4 + 5 * .
     3 4 5 * + .

     Assignment: What are the infix expressions corresponding to the
     Forth code above?  Write '6-7*8+9' in Forth notation(1).

   To change the sign, use 'negate':

     2 negate .

     Assignment: Convert -(-3)*4-5 to Forth.

   '/mod' performs both '/' and 'mod'.

     7 3 /mod . .

   Reference: *note Arithmetic::.

   ---------- Footnotes ----------

   (1) This notation is also known as Postfix or RPN (Reverse Polish
Notation).

3.6 Stack Manipulation
======================

Stack manipulation words rearrange the data on the stack.

     1 .s drop .s
     1 .s dup .s drop drop .s
     1 2 .s over .s drop drop drop
     1 2 .s swap .s drop drop
     1 2 3 .s rot .s drop drop drop

   These are the most important stack manipulation words.  There are
also variants that manipulate twice as many stack items:

     1 2 3 4 .s 2swap .s 2drop 2drop

   Two more stack manipulation words are:

     1 2 .s nip .s drop
     1 2 .s tuck .s 2drop drop

     Assignment: Replace 'nip' and 'tuck' with combinations of other
     stack manipulation words.

          Given:          How do you get:
          1 2 3           3 2 1
          1 2 3           1 2 3 2
          1 2 3           1 2 3 3
          1 2 3           1 3 3
          1 2 3           2 1 3
          1 2 3 4         4 3 2 1
          1 2 3           1 2 3 1 2 3
          1 2 3 4         1 2 3 4 1 2
          1 2 3
          1 2 3           1 2 3 4
          1 2 3           1 3

     5 dup * .

     Assignment: Write 17^3 and 17^4 in Forth, without writing '17' more
     than once.  Write a piece of Forth code that expects two numbers on
     the stack (A and B, with B on top) and computes '(a-b)(a+1)'.

   Reference: *note Stack Manipulation::.

3.7 Using files for Forth code
==============================

While working at the Forth command line is convenient for one-line
examples and short one-off code, you probably want to store your source
code in files for convenient editing and persistence.  You can use your
favourite editor (Gforth includes Emacs support, *note Emacs and
Gforth::) to create FILE.FS and use

     s" FILE.FS" included

   to load it into your Forth system.  The file name extension I use for
Forth files is '.fs'.

   You can easily start Gforth with some files loaded like this:

     gforth FILE1.FS FILE2.FS

   If an error occurs during loading these files, Gforth terminates,
whereas an error during 'INCLUDED' within Gforth usually gives you a
Gforth command line.  Starting the Forth system every time gives you a
clean start every time, without interference from the results of earlier
tries.

   I often put all the tests in a file, then load the code and run the
tests with

     gforth CODE.FS TESTS.FS -e bye

   (often by performing this command with 'C-x C-e' in Emacs).  The '-e
bye' ensures that Gforth terminates afterwards so that I can restart
this command without ado.

   The advantage of this approach is that the tests can be repeated
easily every time the program ist changed, making it easy to catch bugs
introduced by the change.

   Reference: *note Forth source files::.

3.8 Comments
============

     \ That's a comment; it ends at the end of the line
     ( Another comment; it ends here: )  .s

   '\' and '(' are ordinary Forth words and therefore have to be
separated with white space from the following text.

     \This gives an "Undefined word" error

   The first ')' ends a comment started with '(', so you cannot nest
'('-comments; and you cannot comment out text containing a ')' with '(
... )'(1).

   I use '\'-comments for descriptive text and for commenting out code
of one or more line; I use '('-comments for describing the stack effect,
the stack contents, or for commenting out sub-line pieces of code.

   The Emacs mode 'gforth.el' (*note Emacs and Gforth::) supports these
uses by commenting out a region with 'C-x \', uncommenting a region with
'C-u C-x \', and filling a '\'-commented region with 'M-q'.

   Reference: *note Comments::.

   ---------- Footnotes ----------

   (1) therefore it's a good idea to avoid ')' in word names.

3.9 Colon Definitions
=====================

are similar to procedures and functions in other programming languages.

     : squared ( n -- n^2 )
        dup * ;
     5 squared .
     7 squared .

   ':' starts the colon definition; its name is 'squared'.  The
following comment describes its stack effect.  The words 'dup *' are not
executed, but compiled into the definition.  ';' ends the colon
definition.

   The newly-defined word can be used like any other word, including
using it in other definitions:

     : cubed ( n -- n^3 )
        dup squared * ;
     -5 cubed .
     : fourth-power ( n -- n^4 )
        squared squared ;
     3 fourth-power .

     Assignment: Write colon definitions for 'nip', 'tuck', 'negate',
     and '/mod' in terms of other Forth words, and check if they work
     (hint: test your tests on the originals first).  Don't let the
     'redefined'-Messages spook you, they are just warnings.

   Reference: *note Colon Definitions::.

3.10 Decompilation
==================

You can decompile colon definitions with 'see':

     see squared
     see cubed

   In Gforth 'see' shows you a reconstruction of the source code from
the executable code.  Informations that were present in the source, but
not in the executable code, are lost (e.g., comments).

   You can also decompile the predefined words:

     see .
     see +

3.11 Stack-Effect Comments
==========================

By convention the comment after the name of a definition describes the
stack effect: The part in front of the '--' describes the state of the
stack before the execution of the definition, i.e., the parameters that
are passed into the colon definition; the part behind the '--' is the
state of the stack after the execution of the definition, i.e., the
results of the definition.  The stack comment only shows the top stack
items that the definition accesses and/or changes.

   You should put a correct stack effect on every definition, even if it
is just '( -- )'.  You should also add some descriptive comment to more
complicated words (I usually do this in the lines following ':').  If
you don't do this, your code becomes unreadable (because you have to
work through every definition before you can understand any).

     Assignment: The stack effect of 'swap' can be written like this:
     'x1 x2 -- x2 x1'.  Describe the stack effect of '-', 'drop', 'dup',
     'over', 'rot', 'nip', and 'tuck'.  Hint: When you are done, you can
     compare your stack effects to those in this manual (*note Word
     Index::).

   Sometimes programmers put comments at various places in colon
definitions that describe the contents of the stack at that place (stack
comments); i.e., they are like the first part of a stack-effect comment.
E.g.,

     : cubed ( n -- n^3 )
        dup squared  ( n n^2 ) * ;

   In this case the stack comment is pretty superfluous, because the
word is simple enough.  If you think it would be a good idea to add such
a comment to increase readability, you should also consider factoring
the word into several simpler words (*note Factoring: Factoring
Tutorial.), which typically eliminates the need for the stack comment;
however, if you decide not to refactor it, then having such a comment is
better than not having it.

   The names of the stack items in stack-effect and stack comments in
the standard, in this manual, and in many programs specify the type
through a type prefix, similar to Fortran and Hungarian notation.  The
most frequent prefixes are:

'n'
     signed integer
'u'
     unsigned integer
'c'
     character
'f'
     Boolean flags, i.e.  'false' or 'true'.
'a-addr,a-'
     Cell-aligned address
'c-addr,c-'
     Char-aligned address (note that a Char may have two bytes in
     Windows NT)
'xt'
     Execution token, same size as Cell
'w,x'
     Cell, can contain an integer or an address.  It usually takes 32,
     64 or 16 bits (depending on your platform and Forth system).  A
     cell is more commonly known as machine word, but the term _word_
     already means something different in Forth.
'd'
     signed double-cell integer
'ud'
     unsigned double-cell integer
'r'
     Float (on the FP stack)

   You can find a more complete list in *note Notation::.

     Assignment: Write stack-effect comments for all definitions you
     have written up to now.

3.12 Types
==========

In Forth the names of the operations are not overloaded; so similar
operations on different types need different names; e.g., '+' adds
integers, and you have to use 'f+' to add floating-point numbers.  The
following prefixes are often used for related operations on different
types:

'(none)'
     signed integer
'u'
     unsigned integer
'c'
     character
'd'
     signed double-cell integer
'ud, du'
     unsigned double-cell integer
'2'
     two cells (not-necessarily double-cell numbers)
'm, um'
     mixed single-cell and double-cell operations
'f'
     floating-point (note that in stack comments 'f' represents flags,
     and 'r' represents FP numbers; also, you need to include the
     exponent part in literal FP numbers, *note Floating Point
     Tutorial::).

   If there are no differences between the signed and the unsigned
variant (e.g., for '+'), there is only the prefix-less variant.

   Forth does not perform type checking, neither at compile time, nor at
run time.  If you use the wrong operation, the data are interpreted
incorrectly:

     -1 u.

   If you have only experience with type-checked languages until now,
and have heard how important type-checking is, don't panic!  In my
experience (and that of other Forthers), type errors in Forth code are
usually easy to find (once you get used to it), the increased vigilance
of the programmer tends to catch some harder errors in addition to most
type errors, and you never have to work around the type system, so in
most situations the lack of type-checking seems to be a win (projects to
add type checking to Forth have not caught on).

3.13 Factoring
==============

If you try to write longer definitions, you will soon find it hard to
keep track of the stack contents.  Therefore, good Forth programmers
tend to write only short definitions (e.g., three lines).  The art of
finding meaningful short definitions is known as factoring (as in
factoring polynomials).

   Well-factored programs offer additional advantages: smaller, more
general words, are easier to test and debug and can be reused more and
better than larger, specialized words.

   So, if you run into difficulties with stack management, when writing
code, try to define meaningful factors for the word, and define the word
in terms of those.  Even if a factor contains only two words, it is
often helpful.

   Good factoring is not easy, and it takes some practice to get the
knack for it; but even experienced Forth programmers often don't find
the right solution right away, but only when rewriting the program.  So,
if you don't come up with a good solution immediately, keep trying,
don't despair.

3.14 Designing the stack effect
===============================

In other languages you can use an arbitrary order of parameters for a
function; and since there is only one result, you don't have to deal
with the order of results, either.

   In Forth (and other stack-based languages, e.g., PostScript) the
parameter and result order of a definition is important and should be
designed well.  The general guideline is to design the stack effect such
that the word is simple to use in most cases, even if that complicates
the implementation of the word.  Some concrete rules are:

   * Words consume all of their parameters (e.g., '.').

   * If there is a convention on the order of parameters (e.g., from
     mathematics or another programming language), stick with it (e.g.,
     '-').

   * If one parameter usually requires only a short computation (e.g.,
     it is a constant), pass it on the top of the stack.  Conversely,
     parameters that usually require a long sequence of code to compute
     should be passed as the bottom (i.e., first) parameter.  This makes
     the code easier to read, because the reader does not need to keep
     track of the bottom item through a long sequence of code (or,
     alternatively, through stack manipulations).  E.g., '!' (store,
     *note Memory::) expects the address on top of the stack because it
     is usually simpler to compute than the stored value (often the
     address is just a variable).

   * Similarly, results that are usually consumed quickly should be
     returned on the top of stack, whereas a result that is often used
     in long computations should be passed as bottom result.  E.g., the
     file words like 'open-file' return the error code on the top of
     stack, because it is usually consumed quickly by 'throw'; moreover,
     the error code has to be checked before doing anything with the
     other results.

   These rules are just general guidelines, don't lose sight of the
overall goal to make the words easy to use.  E.g., if the convention
rule conflicts with the computation-length rule, you might decide in
favour of the convention if the word will be used rarely, and in favour
of the computation-length rule if the word will be used frequently
(because with frequent use the cost of breaking the computation-length
rule would be quite high, and frequent use makes it easier to remember
an unconventional order).

3.15 Local Variables
====================

You can define local variables (_locals_) in a colon definition:

     : swap { a b -- b a }
       b a ;
     1 2 swap .s 2drop

   (If your Forth system does not support this syntax, include
'compat/anslocal.fs' first).

   In this example '{ a b -- b a }' is the locals definition; it takes
two cells from the stack, puts the top of stack in 'b' and the next
stack element in 'a'.  '--' starts a comment ending with '}'.  After the
locals definition, using the name of the local will push its value on
the stack.  You can omit the comment part ('-- b a'):

     : swap ( x1 x2 -- x2 x1 )
       { a b } b a ;

   In Gforth you can have several locals definitions, anywhere in a
colon definition; in contrast, in a standard program you can have only
one locals definition per colon definition, and that locals definition
must be outside any control structure.

   With locals you can write slightly longer definitions without running
into stack trouble.  However, I recommend trying to write colon
definitions without locals for exercise purposes to help you gain the
essential factoring skills.

     Assignment: Rewrite your definitions until now with locals

   Reference: *note Locals::.

3.16 Conditional execution
==========================

In Forth you can use control structures only inside colon definitions.
An 'if'-structure looks like this:

     : abs ( n1 -- +n2 )
         dup 0 < if
             negate
         endif ;
     5 abs .
     -5 abs .

   'if' takes a flag from the stack.  If the flag is non-zero (true),
the following code is performed, otherwise execution continues after the
'endif' (or 'else').  '<' compares the top two stack elements and
produces a flag:

     1 2 < .
     2 1 < .
     1 1 < .

   Actually the standard name for 'endif' is 'then'.  This tutorial
presents the examples using 'endif', because this is often less
confusing for people familiar with other programming languages where
'then' has a different meaning.  If your system does not have 'endif',
define it with

     : endif postpone then ; immediate

   You can optionally use an 'else'-part:

     : min ( n1 n2 -- n )
       2dup < if
         drop
       else
         nip
       endif ;
     2 3 min .
     3 2 min .

     Assignment: Write 'min' without 'else'-part (hint: what's the
     definition of 'nip'?).

   Reference: *note Selection::.

3.17 Flags and Comparisons
==========================

In a false-flag all bits are clear (0 when interpreted as integer).  In
a canonical true-flag all bits are set (-1 as a twos-complement signed
integer); in many contexts (e.g., 'if') any non-zero value is treated as
true flag.

     false .
     true .
     true hex u. decimal

   Comparison words produce canonical flags:

     1 1 = .
     1 0= .
     0 1 < .
     0 0 < .
     -1 1 u< . \ type error, u< interprets -1 as large unsigned number
     -1 1 < .

   Gforth supports all combinations of the prefixes '0 u d d0 du f f0'
(or none) and the comparisons '= <> < > <= >='.  Only a part of these
combinations are standard (for details see the standard, *note Numeric
comparison::, *note Floating Point:: or *note Word Index::).

   You can use 'and or xor invert' as operations on canonical flags.
Actually they are bitwise operations:

     1 2 and .
     1 2 or .
     1 3 xor .
     1 invert .

   You can convert a zero/non-zero flag into a canonical flag with '0<>'
(and complement it on the way with '0='; indeed, it is more common to
use '0=' instead of 'invert' for canonical flags).

     1 0= .
     1 0<> .

   While you can use 'if' without '0<>' to test for zero/non-zero, you
sometimes need to use '0<>' when combining zero/non-zero values with
'and or xor' because of their bitwise nature.  The simplest, least
error-prone, and probably clearest way is to use '0<>' in all these
cases, but in some cases you can use fewer '0<>'s.  Here are some stack
effects, where fc represents a canonical flag, and fz represents
zero/non-zero (every fc also works as fz):

     or  ( fz1 fz2 -- fz3 )
     and ( fz1 fc  -- fz2 )
     and ( fc  fz1 -- fz2 )

   So, if you see code like this:

     ( n1 n2 ) 0<> and if

   This tests whether n1 and n2 are non-zero and if yes, performs the
code after 'if'; it treats n1 as zero/non-zero and uses '0<>' to convert
n2 into a canonical flag; the 'and' then produces an fz, which is
consumed by the 'if'.

   You can use the all-bits-set feature of canonical flags and the
bitwise operation of the Boolean operations to avoid 'if's:

     : foo ( n1 -- n2 )
       0= if
         14
       else
         0
       endif ;
     0 foo .
     1 foo .

     : foo ( n1 -- n2 )
       0= 14 and ;
     0 foo .
     1 foo .

     Assignment: Write 'min' without 'if'.

   For reference, see *note Boolean Flags::, *note Numeric comparison::,
and *note Bitwise operations::.

3.18 General Loops
==================

The endless loop is the most simple one:

     : endless ( -- )
       0 begin
         dup . 1+
       again ;
     endless

   Terminate this loop by pressing 'Ctrl-C' (in Gforth).  'begin' does
nothing at run-time, 'again' jumps back to 'begin'.

   A loop with one exit at any place looks like this:

     : log2 ( +n1 -- n2 )
     \ logarithmus dualis of n1>0, rounded down to the next integer
       assert( dup 0> )
       2/ 0 begin
         over 0> while
           1+ swap 2/ swap
       repeat
       nip ;
     7 log2 .
     8 log2 .

   At run-time 'while' consumes a flag; if it is 0, execution continues
behind the 'repeat'; if the flag is non-zero, execution continues behind
the 'while'.  'Repeat' jumps back to 'begin', just like 'again'.

   In Forth there are a number of combinations/abbreviations, like '1+'.
However, '2/' is not one of them; it shifts its argument right by one
bit (arithmetic shift right), and viewed as division that always rounds
towards negative infinity (floored division), like Gforth's '/' (since
Gforth 0.7), but unlike '/' in many other Forth systems.

     -5 2 / . \ -2 or -3
     -5 2/ .  \ -3

   'assert(' is no standard word, but you can get it on systems other
than Gforth by including 'compat/assert.fs'.  You can see what it does
by trying

     0 log2 .

   Here's a loop with an exit at the end:

     : log2 ( +n1 -- n2 )
     \ logarithmus dualis of n1>0, rounded down to the next integer
       assert( dup 0 > )
       -1 begin
         1+ swap 2/ swap
         over 0 <=
       until
       nip ;

   'Until' consumes a flag; if it is zero, execution continues at the
'begin', otherwise after the 'until'.

     Assignment: Write a definition for computing the greatest common
     divisor.

   Reference: *note Simple Loops::.

3.19 Counted loops
==================

     : ^ ( n1 u -- n )
     \ n = the uth power of n1
       1 swap 0 u+do
         over *
       loop
       nip ;
     3 2 ^ .
     4 3 ^ .

   'U+do' (from 'compat/loops.fs', if your Forth system doesn't have it)
takes two numbers of the stack '( u3 u4 -- )', and then performs the
code between 'u+do' and 'loop' for 'u3-u4' times (or not at all, if
'u3-u4<0').

   You can see the stack effect design rules at work in the stack effect
of the loop start words: Since the start value of the loop is more
frequently constant than the end value, the start value is passed on the
top-of-stack.

   You can access the counter of a counted loop with 'i':

     : fac ( u -- u! )
       1 swap 1+ 1 u+do
         i *
       loop ;
     5 fac .
     7 fac .

   There is also '+do', which expects signed numbers (important for
deciding whether to enter the loop).

     Assignment: Write a definition for computing the nth Fibonacci
     number.

   You can also use increments other than 1:

     : up2 ( n1 n2 -- )
       +do
         i .
       2 +loop ;
     10 0 up2

     : down2 ( n1 n2 -- )
       -do
         i .
       2 -loop ;
     0 10 down2

   Reference: *note Counted Loops::.

3.20 Recursion
==============

Usually the name of a definition is not visible in the definition; but
earlier definitions are usually visible:

     1 0 / . \ "Floating-point unidentified fault" in Gforth on some platforms
     : / ( n1 n2 -- n )
       dup 0= if
         -10 throw \ report division by zero
       endif
       /           \ old version
     ;
     1 0 /

   For recursive definitions you can use 'recursive' (non-standard) or
'recurse':

     : fac1 ( n -- n! ) recursive
      dup 0> if
        dup 1- fac1 *
      else
        drop 1
      endif ;
     7 fac1 .

     : fac2 ( n -- n! )
      dup 0> if
        dup 1- recurse *
      else
        drop 1
      endif ;
     8 fac2 .

     Assignment: Write a recursive definition for computing the nth
     Fibonacci number.

   Reference (including indirect recursion): *Note Calls and returns::.

3.21 Leaving definitions or loops
=================================

'EXIT' exits the current definition right away.  For every counted loop
that is left in this way, an 'UNLOOP' has to be performed before the
'EXIT':

     : ...
      ... u+do
        ... if
          ... unloop exit
        endif
        ...
      loop
      ... ;

   'LEAVE' leaves the innermost counted loop right away:

     : ...
      ... u+do
        ... if
          ... leave
        endif
        ...
      loop
      ... ;

   Reference: *note Calls and returns::, *note Counted Loops::.

3.22 Return Stack
=================

In addition to the data stack Forth also has a second stack, the return
stack; most Forth systems store the return addresses of procedure calls
there (thus its name).  Programmers can also use this stack:

     : foo ( n1 n2 -- )
      .s
      >r .s
      r@ .
      >r .s
      r@ .
      r> .
      r@ .
      r> . ;
     1 2 foo

   '>r' takes an element from the data stack and pushes it onto the
return stack; conversely, 'r>' moves an element from the return to the
data stack; 'r@' pushes a copy of the top of the return stack on the
data stack.

   Forth programmers usually use the return stack for storing data
temporarily, if using the data stack alone would be too complex, and
factoring and locals are not an option:

     : 2swap ( x1 x2 x3 x4 -- x3 x4 x1 x2 )
      rot >r rot r> ;

   The return address of the definition and the loop control parameters
of counted loops usually reside on the return stack, so you have to take
all items, that you have pushed on the return stack in a colon
definition or counted loop, from the return stack before the definition
or loop ends.  You cannot access items that you pushed on the return
stack outside some definition or loop within the definition of loop.

   If you miscount the return stack items, this usually ends in a crash:

     : crash ( n -- )
       >r ;
     5 crash

   You cannot mix using locals and using the return stack (according to
the standard; Gforth has no problem).  However, they solve the same
problems, so this shouldn't be an issue.

     Assignment: Can you rewrite any of the definitions you wrote until
     now in a better way using the return stack?

   Reference: *note Return stack::.

3.23 Memory
===========

You can create a global variable 'v' with

     variable v ( -- addr )

   'v' pushes the address of a cell in memory on the stack.  This cell
was reserved by 'variable'.  You can use '!' (store) to store values
from the stack into this cell and '@' (fetch) to load the value from
memory onto the stack:

     v .
     5 v ! .s
     v @ .

   You can see a raw dump of memory with 'dump':

     v 1 cells .s dump

   'Cells ( n1 -- n2 )' gives you the number of bytes (or, more
generally, address units (aus)) that 'n1 cells' occupy.  You can also
reserve more memory:

     create v2 20 cells allot
     v2 20 cells dump

   creates a variable-like word 'v2' and reserves 20 uninitialized
cells; the address pushed by 'v2' points to the start of these 20 cells
(*note CREATE::).  You can use address arithmetic to access these cells:

     3 v2 5 cells + !
     v2 20 cells dump

   You can reserve and initialize memory with ',':

     create v3
       5 , 4 , 3 , 2 , 1 ,
     v3 @ .
     v3 cell+ @ .
     v3 2 cells + @ .
     v3 5 cells dump

     Assignment: Write a definition 'vsum ( addr u -- n )' that computes
     the sum of 'u' cells, with the first of these cells at 'addr', the
     next one at 'addr cell+' etc.

   The difference between 'variable' and 'create' is that 'variable'
allots a cell, and that you cannot allot additional memory to a variable
in standard Forth.

   You can also reserve memory without creating a new word:

     here 10 cells allot .
     here .

   The first 'here' pushes the start address of the memory area, the
second 'here' the address after the dictionary area.  You should store
the start address somewhere, or you will have a hard time finding the
memory area again.

   'Allot' manages dictionary memory.  The dictionary memory contains
the system's data structures for words etc.  on Gforth and most other
Forth systems.  It is managed like a stack: You can free the memory that
you have just 'allot'ed with

     -10 cells allot
     here .

   Note that you cannot do this if you have created a new word in the
meantime (because then your 'allot'ed memory is no longer on the top of
the dictionary "stack").

   Alternatively, you can use 'allocate' and 'free' which allow freeing
memory in any order:

     10 cells allocate throw .s
     20 cells allocate throw .s
     swap
     free throw
     free throw

   The 'throw's deal with errors (e.g., out of memory).

   And there is also a garbage collector
(http://www.complang.tuwien.ac.at/forth/garbage-collection.zip), which
eliminates the need to 'free' memory explicitly.

   Reference: *note Memory::.

3.24 Characters and Strings
===========================

On the stack characters take up a cell, like numbers.  In memory they
have their own size (one 8-bit byte on most systems), and therefore
require their own words for memory access:

     create v4
       104 c, 97 c, 108 c, 108 c, 111 c,
     v4 4 chars + c@ .
     v4 5 chars dump

   The preferred representation of strings on the stack is 'addr
u-count', where 'addr' is the address of the first character and
'u-count' is the number of characters in the string.

     v4 5 type

   You get a string constant with

     s" hello, world" .s
     type

   Make sure you have a space between 's"' and the string; 's"' is a
normal Forth word and must be delimited with white space (try what
happens when you remove the space).

   However, this interpretive use of 's"' is quite restricted: the
string exists only until the next call of 's"' (some Forth systems keep
more than one of these strings, but usually they still have a limited
lifetime).

     s" hello," s" world" .s
     type
     type

   You can also use 's"' in a definition, and the resulting strings then
live forever (well, for as long as the definition):

     : foo s" hello," s" world" ;
     foo .s
     type
     type

     Assignment: 'Emit ( c -- )' types 'c' as character (not a number).
     Implement 'type ( addr u -- )'.

   Reference: *note Memory Blocks::.

3.25 Alignment
==============

On many processors cells have to be aligned in memory, if you want to
access them with '@' and '!' (and even if the processor does not require
alignment, access to aligned cells is faster).

   'Create' aligns 'here' (i.e., the place where the next allocation
will occur, and that the 'create'd word points to).  Likewise, the
memory produced by 'allocate' starts at an aligned address.  Adding a
number of 'cells' to an aligned address produces another aligned
address.

   However, address arithmetic involving 'char+' and 'chars' can create
an address that is not cell-aligned.  'Aligned ( addr -- a-addr )'
produces the next aligned address:

     v3 char+ aligned .s @ .
     v3 char+ .s @ .

   Similarly, 'align' advances 'here' to the next aligned address:

     create v5 97 c,
     here .
     align here .
     1000 ,

   Note that you should use aligned addresses even if your processor
does not require them, if you want your program to be portable.

   Reference: *note Address arithmetic::.

3.26 Floating Point
===================

Floating-point (FP) numbers and arithmetic in Forth works mostly as one
might expect, but there are a few things worth noting:

   The first point is not specific to Forth, but so important and yet
not universally known that I mention it here: FP numbers are not reals.
Many properties (e.g., arithmetic laws) that reals have and that one
expects of all kinds of numbers do not hold for FP numbers.  If you want
to use FP computations, you should learn about their problems and how to
avoid them; a good starting point is 'David Goldberg, What Every
Computer Scientist Should Know About Floating-Point Arithmetic
(http://docs.sun.com/source/806-3568/ncg_goldberg.html), ACM Computing
Surveys 23(1):5-48, March 1991'.

   In Forth source code literal FP numbers need an exponent, e.g.,
'1e0'; this can also be written shorter as '1e', longer as '+1.0e+0',
and many variations in between.  The reason for this is that, for
historical reasons, Forth interprets a decimal point alone (e.g., '1.')
as indicating a double-cell integer.  Examples:

     2e 2e f+ f.

   Another requirement for literal FP numbers is that the current base
is decimal; with a hex base '1e' is interpreted as an integer.

   Forth has a separate stack for FP numbers in conformance with
Forth-2012.  One advantage of this model is that cells are not in the
way when accessing FP values, and vice versa.  Forth has a set of words
for manipulating the FP stack: 'fdup fswap fdrop fover frot' and
(non-standard) 'fnip ftuck fpick'.

   FP arithmetic words are prefixed with 'F'.  There is the usual set
'f+ f- f* f/ f** fnegate' as well as a number of words for other
functions, e.g., 'fsqrt fsin fln fmin'.  One word that you might expect
is 'f='; but 'f=' is non-standard, because FP computation results are
usually inaccurate, so exact comparison is usually a mistake, and one
should use approximate comparison.  Unfortunately, 'f~', the standard
word for that purpose, is not well designed, so Gforth provides 'f~abs'
and 'f~rel' as well.

   And of course there are words for accessing FP numbers in memory ('f@
f!'), and for address arithmetic ('floats float+ faligned').  There are
also variants of these words with an 'sf' and 'df' prefix for accessing
IEEE format single-precision and double-precision numbers in memory;
their main purpose is for accessing external FP data (e.g., that has
been read from or will be written to a file).

   Here is an example of a dot-product word and its use:

     : v* ( f_addr1 nstride1 f_addr2 nstride2 ucount -- r )
       >r swap 2swap swap 0e r> 0 ?DO
         dup f@ over + 2swap dup f@ f* f+ over + 2swap
       LOOP
       2drop 2drop ;

     create v 1.23e f, 4.56e f, 7.89e f,

     v 1 floats  v 1 floats  3  v* f.

     Assignment: Write a program to solve a quadratic equation.  Then
     read 'Henry G. Baker, You Could Learn a Lot from a Quadratic
     (http://home.pipeline.com/~hbaker1/sigplannotices/sigcol05.ps.gz),
     ACM SIGPLAN Notices, 33(1):30-39, January 1998', and see if you can
     improve your program.  Finally, find a test case where the original
     and the improved version produce different results.

   Reference: *note Floating Point::; *note Floating point stack::;
*note Number Conversion::; *note Memory Access::; *note Address
arithmetic::.

3.27 Files
==========

This section gives a short introduction into how to use files inside
Forth.  It's broken up into five easy steps:

  1. Open an ASCII text file for input
  2. Open a file for output
  3. Read input file until string matches (or some other condition is
     met)
  4. Write some lines from input (modified or not) to output
  5. Close the files.

   Reference: *note General files::.

3.27.1 Open file for input
--------------------------

     s" foo.in"  r/o open-file throw Value fd-in

3.27.2 Create file for output
-----------------------------

     s" foo.out" w/o create-file throw Value fd-out

   The available file modes are r/o for read-only access, r/w for
read-write access, and w/o for write-only access.  You could open both
files with r/w, too, if you like.  All file words return error codes;
for most applications, it's best to pass there error codes with 'throw'
to the outer error handler.

   If you want words for opening and assigning, define them as follows:

     0 Value fd-in
     0 Value fd-out
     : open-input ( addr u -- )  r/o open-file throw to fd-in ;
     : open-output ( addr u -- )  w/o create-file throw to fd-out ;

   Usage example:

     s" foo.in" open-input
     s" foo.out" open-output

3.27.3 Scan file for a particular line
--------------------------------------

     256 Constant max-line
     Create line-buffer  max-line 2 + allot

     : scan-file ( addr u -- )
       begin
           line-buffer max-line fd-in read-line throw
       while
              >r 2dup line-buffer r> compare 0=
          until
       else
          drop
       then
       2drop ;

   'read-line ( addr u1 fd -- u2 flag ior )' reads up to u1 bytes into
the buffer at addr, and returns the number of bytes read, a flag that is
false when the end of file is reached, and an error code.

   'compare ( addr1 u1 addr2 u2 -- n )' compares two strings and returns
zero if both strings are equal.  It returns a positive number if the
first string is lexically greater, a negative if the second string is
lexically greater.

   We haven't seen this loop here; it has two exits.  Since the 'while'
exits with the number of bytes read on the stack, we have to clean up
that separately; that's after the 'else'.

   Usage example:

     s" The text I search is here" scan-file

3.27.4 Copy input to output
---------------------------

     : copy-file ( -- )
       begin
           line-buffer max-line fd-in read-line throw
       while
           line-buffer swap fd-out write-line throw
       repeat
       drop ;

3.27.5 Close files
------------------

     fd-in close-file throw
     fd-out close-file throw

   Likewise, you can put that into definitions, too:

     : close-input ( -- )  fd-in close-file throw ;
     : close-output ( -- )  fd-out close-file throw ;

     Assignment: How could you modify 'copy-file' so that it copies
     until a second line is matched?  Can you write a program that
     extracts a section of a text file, given the line that starts and
     the line that terminates that section?

3.28 Interpretation and Compilation Semantics and Immediacy
===========================================================

When a word is compiled, it behaves differently from being interpreted.
E.g., consider '+':

     1 2 + .
     : foo + ;

   These two behaviours are known as compilation and interpretation
semantics.  For normal words (e.g., '+'), the compilation semantics is
to append the interpretation semantics to the currently defined word
('foo' in the example above).  I.e., when 'foo' is executed later, the
interpretation semantics of '+' (i.e., adding two numbers) will be
performed.

   However, there are words with non-default compilation semantics,
e.g., the control-flow words like 'if'.  You can use 'immediate' to
change the compilation semantics of the last defined word to be equal to
the interpretation semantics:

     : [FOO] ( -- )
      5 . ; immediate

     [FOO]
     : bar ( -- )
       [FOO] ;
     bar
     see bar

   Two conventions to mark words with non-default compilation semantics
are names with brackets (more frequently used) and to write them all in
upper case (less frequently used).

   For some words, such as 'if', using their interpretation semantics is
usually a mistake, so we mark them as 'compile-only', and you get a
warning when you interpret them.

     : flip ( -- )
      6 . ; compile-only \ but not immediate
     flip

     : flop ( -- )
      flip ;
     flop

   In this example, first the interpretation semantics of 'flip' is used
(and you get a warning); the second use of 'flip' uses the compilation
semantics (and you get no warning).  You can also see in this example
that compile-only is a property that is evaluated at text interpretation
time, not at run-time.

   The text interpreter has two states: in interpret state, it performs
the interpretation semantics of words it encounters; in compile state,
it performs the compilation semantics of these words.

   Among other things, ':' switches into compile state, and ';' switches
back to interpret state.  They contain the factors ']' (switch to
compile state) and '[' (switch to interpret state), that do nothing but
switch the state.

     : xxx ( -- )
       [ 5 . ]
     ;

     xxx
     see xxx

   These brackets are also the source of the naming convention mentioned
above.

   Reference: *note Interpretation and Compilation Semantics::.

3.29 Execution Tokens
=====================

'' word' gives you the execution token (XT) of a word.  The XT is a cell
representing the interpretation semantics of a word.  You can execute
this semantics with 'execute':

     ' + .s
     1 2 rot execute .

   The XT is similar to a function pointer in C. However, parameter
passing through the stack makes it a little more flexible:

     : map-array ( ... addr u xt -- ... )
     \ executes xt ( ... x -- ... ) for every element of the array starting
     \ at addr and containing u elements
       { xt }
       cells over + swap ?do
         i @ xt execute
       1 cells +loop ;

     create a 3 , 4 , 2 , -1 , 4 ,
     a 5 ' . map-array .s
     0 a 5 ' + map-array .
     s" max-n" environment? drop .s
     a 5 ' min map-array .

   You can use map-array with the XTs of words that consume one element
more than they produce.  In theory you can also use it with other XTs,
but the stack effect then depends on the size of the array, which is
hard to understand.

   Since XTs are cell-sized, you can store them in memory and manipulate
them on the stack like other cells.  You can also compile the XT into a
word with 'compile,':

     : foo1 ( n1 n2 -- n )
        [ ' + compile, ] ;
     see foo1

   This is non-standard, because 'compile,' has no compilation semantics
in the standard, but it works in good Forth systems.  For the broken
ones, use

     : [compile,] compile, ; immediate

     : foo1 ( n1 n2 -- n )
        [ ' + ] [compile,] ;
     see foo1

   ''' is a word with default compilation semantics; it parses the next
word when its interpretation semantics are executed, not during
compilation:

     : foo ( -- xt )
       ' ;
     see foo
     : bar ( ... "word" -- ... )
       ' execute ;
     see bar
     1 2 bar + .

   You often want to parse a word during compilation and compile its XT
so it will be pushed on the stack at run-time.  '[']' does this:

     : xt-+ ( -- xt )
       ['] + ;
     see xt-+
     1 2 xt-+ execute .

   Many programmers tend to see ''' and the word it parses as one unit,
and expect it to behave like '[']' when compiled, and are confused by
the actual behaviour.  If you are, just remember that the Forth system
just takes ''' as one unit and has no idea that it is a parsing word
(attempts to convenience programmers in this issue have usually resulted
in even worse pitfalls, see 'State'-smartness---Why it is evil and How to
Exorcise it (http://www.complang.tuwien.ac.at/papers/ertl98.ps.gz)).

   Note that the state of the interpreter does not come into play when
creating and executing XTs.  I.e., even when you execute ''' in compile
state, it still gives you the interpretation semantics.  And whatever
that state is, 'execute' performs the semantics represented by the XT
(i.e., for XTs produced with ''' the interpretation semantics).

   Reference: *note Tokens for Words::.

3.30 Exceptions
===============

'throw ( n -- )' causes an exception unless n is zero.

     100 throw .s
     0 throw .s

   'catch ( ... xt -- ... n )' behaves similar to 'execute', but it
catches exceptions and pushes the number of the exception on the stack
(or 0, if the xt executed without exception).  If there was an
exception, the stacks have the same depth as when entering 'catch':

     .s
     3 0 ' / catch .s
     3 2 ' / catch .s

     Assignment: Try the same with 'execute' instead of 'catch'.

   'Throw' always jumps to the dynamically next enclosing 'catch', even
if it has to leave several call levels to achieve this:

     : foo 100 throw ;
     : foo1 foo ." after foo" ;
     : bar ['] foo1 catch ;
     bar .

   It is often important to restore a value upon leaving a definition,
even if the definition is left through an exception.  You can ensure
this like this:

     : ...
        save-x
        ['] word-changing-x catch ( ... n )
        restore-x
        ( ... n ) throw ;

   However, this is still not safe against, e.g., the user pressing
'Ctrl-C' when execution is between the 'catch' and 'restore-x'.

   Gforth provides an alternative exception handling syntax that is safe
against such cases: 'try ... restore ... endtry'.  If the code between
'try' and 'endtry' has an exception, the stack depths are restored, the
exception number is pushed on the stack, and the execution continues
right after 'restore'.

   The safer equivalent to the restoration code above is

     : ...
       save-x
       try
         word-changing-x 0
       restore
         restore-x
       endtry
       throw ;

   Reference: *note Exception Handling::.

3.31 Defining Words
===================

':', 'create', and 'variable' are definition words: They define other
words.  'Constant' is another definition word:

     5 constant foo
     foo .

   You can also use the prefixes '2' (double-cell) and 'f' (floating
point) with 'variable' and 'constant'.

   You can also define your own defining words.  E.g.:

     : variable ( "name" -- )
       create 0 , ;

   You can also define defining words that create words that do
something other than just producing their address:

     : constant ( n "name" -- )
       create ,
     does> ( -- n )
       ( addr ) @ ;

     5 constant foo
     foo .

   The definition of 'constant' above ends at the 'does>'; i.e., 'does>'
replaces ';', but it also does something else: It changes the last
defined word such that it pushes the address of the body of the word and
then performs the code after the 'does>' whenever it is called.

   In the example above, 'constant' uses ',' to store 5 into the body of
'foo'.  When 'foo' executes, it pushes the address of the body onto the
stack, then (in the code after the 'does>') fetches the 5 from there.

   The stack comment near the 'does>' reflects the stack effect of the
defined word, not the stack effect of the code after the 'does>' (the
difference is that the code expects the address of the body that the
stack comment does not show).

   You can use these definition words to do factoring in cases that
involve (other) definition words.  E.g., a field offset is always added
to an address.  Instead of defining

     2 cells constant offset-field1

   and using this like

     ( addr ) offset-field1 +

   you can define a definition word

     : simple-field ( n "name" -- )
       create ,
     does> ( n1 -- n1+n )
       ( addr ) @ + ;

   Definition and use of field offsets now look like this:

     2 cells simple-field field1
     create mystruct 4 cells allot
     mystruct .s field1 .s drop

   If you want to do something with the word without performing the code
after the 'does>', you can access the body of a 'create'd word with
'>body ( xt -- addr )':

     : value ( n "name" -- )
       create ,
     does> ( -- n1 )
       @ ;
     : to ( n "name" -- )
       ' >body ! ;

     5 value foo
     foo .
     7 to foo
     foo .

     Assignment: Define 'defer ( "name" -- )', which creates a word that
     stores an XT (at the start the XT of 'abort'), and upon execution
     'execute's the XT. Define 'is ( xt "name" -- )' that stores 'xt'
     into 'name', a word defined with 'defer'.  Indirect recursion is
     one application of 'defer'.

   Reference: *note User-defined Defining Words::.

3.32 Arrays and Records
=======================

Forth has no standard words for defining arrays, but you can build them
yourself based on address arithmetic.  You can also define words for
defining arrays and records (*note Defining Words: Defining Words
Tutorial.).

   One of the first projects a Forth newcomer sets out upon when
learning about defining words is an array defining word (possibly for
n-dimensional arrays).  Go ahead and do it, I did it, too; you will
learn something from it.  However, don't be disappointed when you later
learn that you have little use for these words (inappropriate use would
be even worse).  I have not found a set of useful array words yet; the
needs are just too diverse, and named, global arrays (the result of
naive use of defining words) are often not flexible enough (e.g.,
consider how to pass them as parameters).  Another such project is a set
of words to help dealing with strings.

   On the other hand, there is a useful set of record words, and it has
been defined in 'compat/struct.fs'; these words are predefined in
Gforth.  They are explained in depth elsewhere in this manual (see *note
Structures::).  The 'simple-field' example above is simplified variant
of fields in this package.

3.33 'POSTPONE'
===============

You can compile the compilation semantics (instead of compiling the
interpretation semantics) of a word with 'POSTPONE':

     : MY-+ ( Compilation: -- ; Run-time of compiled code: n1 n2 -- n )
      POSTPONE + ; immediate
     : foo ( n1 n2 -- n )
      MY-+ ;
     1 2 foo .
     see foo

   During the definition of 'foo' the text interpreter performs the
compilation semantics of 'MY-+', which performs the compilation
semantics of '+', i.e., it compiles '+' into 'foo'.

   This example also displays separate stack comments for the
compilation semantics and for the stack effect of the compiled code.
For words with default compilation semantics these stack effects are
usually not displayed; the stack effect of the compilation semantics is
always '( -- )' for these words, the stack effect for the compiled code
is the stack effect of the interpretation semantics.

   Note that the state of the interpreter does not come into play when
performing the compilation semantics in this way.  You can also perform
it interpretively, e.g.:

     : foo2 ( n1 n2 -- n )
      [ MY-+ ] ;
     1 2 foo .
     see foo

   However, there are some broken Forth systems where this does not
always work, and therefore this practice was been declared non-standard
in 1999.

   Here is another example for using 'POSTPONE':

     : MY-- ( Compilation: -- ; Run-time of compiled code: n1 n2 -- n )
      POSTPONE negate POSTPONE + ; immediate compile-only
     : bar ( n1 n2 -- n )
       MY-- ;
     2 1 bar .
     see bar

   You can define 'ENDIF' in this way:

     : ENDIF ( Compilation: orig -- )
       POSTPONE then ; immediate

     Assignment: Write 'MY-2DUP' that has compilation semantics
     equivalent to '2dup', but compiles 'over over'.

3.34 'Literal'
==============

You cannot 'POSTPONE' numbers:

     : [FOO] POSTPONE 500 ; immediate

   Instead, you can use 'LITERAL (compilation: n --; run-time: -- n )':

     : [FOO] ( compilation: --; run-time: -- n )
       500 POSTPONE literal ; immediate

     : flip [FOO] ;
     flip .
     see flip

   'LITERAL' consumes a number at compile-time (when it's compilation
semantics are executed) and pushes it at run-time (when the code it
compiled is executed).  A frequent use of 'LITERAL' is to compile a
number computed at compile time into the current word:

     : bar ( -- n )
       [ 2 2 + ] literal ;
     see bar

     Assignment: Write ']L' which allows writing the example above as ':
     bar ( -- n ) [ 2 2 + ]L ;'

3.35 Advanced macros
====================

Reconsider 'map-array' from *note Execution Tokens: Execution Tokens
Tutorial.  It frequently performs 'execute', a relatively expensive
operation in some Forth implementations.  You can use 'compile,' and
'POSTPONE' to eliminate these 'execute's and produce a word that
contains the word to be performed directly:

     : compile-map-array ( compilation: xt -- ; run-time: ... addr u -- ... )
     \ at run-time, execute xt ( ... x -- ... ) for each element of the
     \ array beginning at addr and containing u elements
       { xt }
       POSTPONE cells POSTPONE over POSTPONE + POSTPONE swap POSTPONE ?do
         POSTPONE i POSTPONE @ xt compile,
       1 cells POSTPONE literal POSTPONE +loop ;

     : sum-array ( addr u -- n )
      0 rot rot [ ' + compile-map-array ] ;
     see sum-array
     a 5 sum-array .

   You can use the full power of Forth for generating the code; here's
an example where the code is generated in a loop:

     : compile-vmul-step ( compilation: n --; run-time: n1 addr1 -- n2 addr2 )
     \ n2=n1+(addr1)*n, addr2=addr1+cell
       POSTPONE tuck POSTPONE @
       POSTPONE literal POSTPONE * POSTPONE +
       POSTPONE swap POSTPONE cell+ ;

     : compile-vmul ( compilation: addr1 u -- ; run-time: addr2 -- n )
     \ n=v1*v2 (inner product), where the v_i are represented as addr_i u
       0 postpone literal postpone swap
       [ ' compile-vmul-step compile-map-array ]
       postpone drop ;
     see compile-vmul

     : a-vmul ( addr -- n )
     \ n=a*v, where v is a vector that's as long as a and starts at addr
      [ a 5 compile-vmul ] ;
     see a-vmul
     a a-vmul .

   This example uses 'compile-map-array' to show off, but you could also
use 'map-array' instead (try it now!).

   You can use this technique for efficient multiplication of large
matrices.  In matrix multiplication, you multiply every row of one
matrix with every column of the other matrix.  You can generate the code
for one row once, and use it for every column.  The only downside of
this technique is that it is cumbersome to recover the memory consumed
by the generated code when you are done (and in more complicated cases
it is not possible portably).

3.36 Compilation Tokens
=======================

This section is Gforth-specific.  You can skip it.

   '' word compile,' compiles the interpretation semantics.  For words
with default compilation semantics this is the same as performing the
compilation semantics.  To represent the compilation semantics of other
words (e.g., words like 'if' that have no interpretation semantics),
Gforth has the concept of a compilation token (CT, consisting of two
cells), and words 'comp'' and '[comp']'.  You can perform the
compilation semantics represented by a CT with 'execute':

     : foo2 ( n1 n2 -- n )
        [ comp' + execute ] ;
     see foo

   You can compile the compilation semantics represented by a CT with
'postpone,':

     : foo3 ( -- )
       [ comp' + postpone, ] ;
     see foo3

   '[ comp' word postpone, ]' is equivalent to 'POSTPONE word'.  'comp''
is particularly useful for words that have no interpretation semantics:

     ' if
     comp' if .s 2drop

   Reference: *note Tokens for Words::.

3.37 Wordlists and Search Order
===============================

The dictionary is not just a memory area that allows you to allocate
memory with 'allot', it also contains the Forth words, arranged in
several wordlists.  When searching for a word in a wordlist,
conceptually you start searching at the youngest and proceed towards
older words (in reality most systems nowadays use hash-tables); i.e., if
you define a word with the same name as an older word, the new word
shadows the older word.

   Which wordlists are searched in which order is determined by the
search order.  You can display the search order with 'order'.  It
displays first the search order, starting with the wordlist searched
first, then it displays the wordlist that will contain newly defined
words.

   You can create a new, empty wordlist with 'wordlist ( -- wid )':

     wordlist constant mywords

   'Set-current ( wid -- )' sets the wordlist that will contain newly
defined words (the _current_ wordlist):

     mywords set-current
     order

   Gforth does not display a name for the wordlist in 'mywords' because
this wordlist was created anonymously with 'wordlist'.

   You can get the current wordlist with 'get-current ( -- wid)'.  If
you want to put something into a specific wordlist without overall
effect on the current wordlist, this typically looks like this:

     get-current mywords set-current ( wid )
     create someword
     ( wid ) set-current

   You can write the search order with 'set-order ( wid1 .. widn n -- )'
and read it with 'get-order ( -- wid1 .. widn n )'.  The first searched
wordlist is topmost.

     get-order mywords swap 1+ set-order
     order

   Yes, the order of wordlists in the output of 'order' is reversed from
stack comments and the output of '.s' and thus unintuitive.

     Assignment: Define '>order ( wid -- )' which adds 'wid' as first
     searched wordlist to the search order.  Define 'previous ( -- )',
     which removes the first searched wordlist from the search order.
     Experiment with boundary conditions (you will see some crashes or
     situations that are hard or impossible to leave).

   The search order is a powerful foundation for providing features
similar to Modula-2 modules and C++ namespaces.  However, trying to
modularize programs in this way has disadvantages for debugging and
reuse/factoring that overcome the advantages in my experience (I don't
do huge projects, though).  These disadvantages are not so clear in
other languages/programming environments, because these languages are
not so strong in debugging and reuse.

   Reference: *note Word Lists::.

4 An Introduction to Standard Forth
***********************************

The difference of this chapter from the Tutorial (*note Tutorial::) is
that it is slower-paced in its examples, but uses them to dive deep into
explaining Forth internals (not covered by the Tutorial).  Apart from
that, this chapter covers far less material.  It is suitable for reading
without using a computer.

   The primary purpose of this manual is to document Gforth.  However,
since Forth is not a widely-known language and there is a lack of
up-to-date teaching material, it seems worthwhile to provide some
introductory material.  For other sources of Forth-related information,
see *note Forth-related information::.

   The examples in this section should work on any Standard Forth; the
output shown was produced using Gforth.  Each example attempts to
reproduce the exact output that Gforth produces.  If you try out the
examples (and you should), what you should type is shown 'like this' and
Gforth's response is shown 'like this'.  The single exception is that,
where the example shows <RET> it means that you should press the
"carriage return" key.  Unfortunately, some output formats for this
manual cannot show the difference between 'this' and 'this' which will
make trying out the examples harder (but not impossible).

   Forth is an unusual language.  It provides an interactive development
environment which includes both an interpreter and compiler.  Forth
programming style encourages you to break a problem down into many small
fragments ("factoring"), and then to develop and test each fragment
interactively.  Forth advocates assert that breaking the
edit-compile-test cycle used by conventional programming languages can
lead to great productivity improvements.

4.1 Introducing the Text Interpreter
====================================

When you invoke the Forth image, you will see a startup banner printed
and nothing else (if you have Gforth installed on your system, try
invoking it now, by typing 'gforth<RET>').  Forth is now running its
command line interpreter, which is called the "Text Interpreter" (also
known as the "Outer Interpreter").  (You will learn a lot about the text
interpreter as you read through this chapter, for more detail *note The
Text Interpreter::).

   Although it's not obvious, Forth is actually waiting for your input.
Type a number and press the <RET> key:

     45<RET>  ok

   Rather than give you a prompt to invite you to input something, the
text interpreter prints a status message after it has processed a line
of input.  The status message in this case ("' ok'" followed by
carriage-return) indicates that the text interpreter was able to process
all of your input successfully.  Now type something illegal:

     qwer341<RET>
     *the terminal*:2: Undefined word
     >>>qwer341<<<
     Backtrace:
     $2A95B42A20 throw
     $2A95B57FB8 no.extensions

   The exact text, other than the "Undefined word" may differ slightly
on your system, but the effect is the same; when the text interpreter
detects an error, it discards any remaining text on a line, resets
certain internal state and prints an error message.  For a detailed
description of error messages see *note Error messages::.

   The text interpreter waits for you to press carriage-return, and then
processes your input line.  Starting at the beginning of the line, it
breaks the line into groups of characters separated by spaces.  For each
group of characters in turn, it makes two attempts to do something:

   * It tries to treat it as a command.  It does this by searching a
     "name dictionary".  If the group of characters matches an entry in
     the name dictionary, the name dictionary provides the text
     interpreter with information that allows the text interpreter to
     perform some actions.  In Forth jargon, we say that the group of
     characters names a "word", that the dictionary search returns an
     "execution token (xt)" corresponding to the "definition" of the
     word, and that the text interpreter executes the xt.  Often, the
     terms "word" and "definition" are used interchangeably.
   * If the text interpreter fails to find a match in the name
     dictionary, it tries to treat the group of characters as a number
     in the current number base (when you start up Forth, the current
     number base is base 10).  If the group of characters legitimately
     represents a number, the text interpreter pushes the number onto a
     stack (we'll learn more about that in the next section).

   If the text interpreter is unable to do either of these things with
any group of characters, it discards the group of characters and the
rest of the line, then prints an error message.  If the text interpreter
reaches the end of the line without error, it prints the status message
"' ok'" followed by carriage-return.

   This is the simplest command we can give to the text interpreter:

     <RET>  ok

   The text interpreter did everything we asked it to do (nothing)
without an error, so it said that everything is "' ok'".  Try a slightly
longer command:

     12 dup fred dup<RET>
     *the terminal*:3: Undefined word
     12 dup >>>fred<<< dup
     Backtrace:
     $2A95B42A20 throw
     $2A95B57FB8 no.extensions

   When you press the carriage-return key, the text interpreter starts
to work its way along the line:

   * When it gets to the space after the '2', it takes the group of
     characters '12' and looks them up in the name dictionary(1).  There
     is no match for this group of characters in the name dictionary, so
     it tries to treat them as a number.  It is able to do this
     successfully, so it puts the number, 12, "on the stack" (whatever
     that means).
   * The text interpreter resumes scanning the line and gets the next
     group of characters, 'dup'.  It looks it up in the name dictionary
     and (you'll have to take my word for this) finds it, and executes
     the word 'dup' (whatever that means).
   * Once again, the text interpreter resumes scanning the line and gets
     the group of characters 'fred'.  It looks them up in the name
     dictionary, but can't find them.  It tries to treat them as a
     number, but they don't represent any legal number.

   At this point, the text interpreter gives up and prints an error
message.  The error message shows exactly how far the text interpreter
got in processing the line.  In particular, it shows that the text
interpreter made no attempt to do anything with the final character
group, 'dup', even though we have good reason to believe that the text
interpreter would have no problem looking that word up and executing it
a second time.

   ---------- Footnotes ----------

   (1) We can't tell if it found them or not, but assume for now that it
did not

4.2 Stacks, postfix notation and parameter passing
==================================================

In procedural programming languages (like C and Pascal), the
building-block of programs is the "function" or "procedure".  These
functions or procedures are called with "explicit parameters".  For
example, in C we might write:

     total = total + new_volume(length,height,depth);

where new_volume is a function-call to another piece of code, and total,
length, height and depth are all variables.  length, height and depth
are parameters to the function-call.

   In Forth, the equivalent of the function or procedure is the
"definition" and parameters are implicitly passed between definitions
using a shared stack that is visible to the programmer.  Although Forth
does support variables, the existence of the stack means that they are
used far less often than in most other programming languages.  When the
text interpreter encounters a number, it will place ("push") it on the
stack.  There are several stacks (the actual number is
implementation-dependent ...)  and the particular stack used for any
operation is implied unambiguously by the operation being performed.
The stack used for all integer operations is called the "data stack"
and, since this is the stack used most commonly, references to "the data
stack" are often abbreviated to "the stack".

   The stacks have a last-in, first-out (LIFO) organisation.  If you
type:

     1 2 3<RET>  ok

   Then this instructs the text interpreter to placed three numbers on
the (data) stack.  An analogy for the behaviour of the stack is to take
a pack of playing cards and deal out the ace (1), 2 and 3 into a pile on
the table.  The 3 was the last card onto the pile ("last-in") and if you
take a card off the pile then, unless you're prepared to fiddle a bit,
the card that you take off will be the 3 ("first-out").  The number that
will be first-out of the stack is called the "top of stack", which is
often abbreviated to "TOS".

   To understand how parameters are passed in Forth, consider the
behaviour of the definition '+' (pronounced "plus").  You will not be
surprised to learn that this definition performs addition.  More
precisely, it adds two numbers together and produces a result.  Where
does it get the two numbers from?  It takes the top two numbers off the
stack.  Where does it place the result?  On the stack.  You can act out
the behaviour of '+' with your playing cards like this:

   * Pick up two cards from the stack on the table
   * Stare at them intently and ask yourself "what is the sum of these
     two numbers"
   * Decide that the answer is 5
   * Shuffle the two cards back into the pack and find a 5
   * Put a 5 on the remaining ace that's on the table.

   If you don't have a pack of cards handy but you do have Forth
running, you can use the definition '.s' to show the current state of
the stack, without affecting the stack.  Type:

     clearstacks 1 2 3<RET> ok
     .s<RET> <3> 1 2 3  ok

   The text interpreter looks up the word 'clearstacks' and executes it;
it tidies up the stacks (data and floating point stack) and removes any
entries that may have been left on them by earlier examples.  The text
interpreter pushes each of the three numbers in turn onto the stack.
Finally, the text interpreter looks up the word '.s' and executes it.
The effect of executing '.s' is to print the "<3>" (the total number of
items on the stack) followed by a list of all the items on the stack;
the item on the far right-hand side is the TOS.

   You can now type:

     + .s<RET> <2> 1 5  ok

which is correct; there are now 2 items on the stack and the result of
the addition is 5.

   If you're playing with cards, try doing a second addition: pick up
the two cards, work out that their sum is 6, shuffle them into the pack,
look for a 6 and place that on the table.  You now have just one item on
the stack.  What happens if you try to do a third addition?  Pick up the
first card, pick up the second card -- ah!  There is no second card.
This is called a "stack underflow" and consitutes an error.  If you try
to do the same thing with Forth it often reports an error (probably a
Stack Underflow or an Invalid Memory Address error).

   The opposite situation to a stack underflow is a "stack overflow",
which simply accepts that there is a finite amount of storage space
reserved for the stack.  To stretch the playing card analogy, if you had
enough packs of cards and you piled the cards up on the table, you would
eventually be unable to add another card; you'd hit the ceiling.  Gforth
allows you to set the maximum size of the stacks.  In general, the only
time that you will get a stack overflow is because a definition has a
bug in it and is generating data on the stack uncontrollably.

   There's one final use for the playing card analogy.  If you model
your stack using a pack of playing cards, the maximum number of items on
your stack will be 52 (I assume you didn't use the Joker).  The maximum
value of any item on the stack is 13 (the King).  In fact, the only
possible numbers are positive integer numbers 1 through 13; you can't
have (for example) 0 or 27 or 3.52 or -2.  If you change the way you
think about some of the cards, you can accommodate different numbers.
For example, you could think of the Jack as representing 0, the Queen as
representing -1 and the King as representing -2.  Your range remains
unchanged (you can still only represent a total of 13 numbers) but the
numbers that you can represent are -2 through 10.

   In that analogy, the limit was the amount of information that a
single stack entry could hold, and Forth has a similar limit.  In Forth,
the size of a stack entry is called a "cell".  The actual size of a cell
is implementation dependent and affects the maximum value that a stack
entry can hold.  A Standard Forth provides a cell size of at least
16-bits, and most desktop systems use a cell size of 32-bits.

   Forth does not do any type checking for you, so you are free to
manipulate and combine stack items in any way you wish.  A convenient
way of treating stack items is as 2's complement signed integers, and
that is what Standard words like '+' do.  Therefore you can type:

     -5 12 + .s<RET> <1> 7  ok

   If you use numbers and definitions like '+' in order to turn Forth
into a great big pocket calculator, you will realise that it's rather
different from a normal calculator.  Rather than typing 2 + 3 = you had
to type 2 3 + (ignore the fact that you had to use '.s' to see the
result).  The terminology used to describe this difference is to say
that your calculator uses "Infix Notation" (parameters and operators are
mixed) whilst Forth uses "Postfix Notation" (parameters and operators
are separate), also called "Reverse Polish Notation".

   Whilst postfix notation might look confusing to begin with, it has
several important advantages:

   * it is unambiguous
   * it is more concise
   * it fits naturally with a stack-based system

   To examine these claims in more detail, consider these sums:

     6 + 5 * 4 =
     4 * 5 + 6 =

   If you're just learning maths or your maths is very rusty, you will
probably come up with the answer 44 for the first and 26 for the second.
If you are a bit of a whizz at maths you will remember the convention
that multiplication takes precendence over addition, and you'd come up
with the answer 26 both times.  To explain the answer 26 to someone who
got the answer 44, you'd probably rewrite the first sum like this:

     6 + (5 * 4) =

   If what you really wanted was to perform the addition before the
multiplication, you would have to use parentheses to force it.

   If you did the first two sums on a pocket calculator you would
probably get the right answers, unless you were very cautious and
entered them using these keystroke sequences:

   6 + 5 = * 4 = 4 * 5 = + 6 =

   Postfix notation is unambiguous because the order that the operators
are applied is always explicit; that also means that parentheses are
never required.  The operators are active (the act of quoting the
operator makes the operation occur) which removes the need for "=".

   The sum 6 + 5 * 4 can be written (in postfix notation) in two
equivalent ways:

     6 5 4 * +      or:
     5 4 * 6 +

   An important thing that you should notice about this notation is that
the order of the numbers does not change; if you want to subtract 2 from
10 you type '10 2 -'.

   The reason that Forth uses postfix notation is very simple to
explain: it makes the implementation extremely simple, and it follows
naturally from using the stack as a mechanism for passing parameters.
Another way of thinking about this is to realise that all Forth
definitions are active; they execute as they are encountered by the text
interpreter.  The result of this is that the syntax of Forth is
trivially simple.

4.3 Your first Forth definition
===============================

Until now, the examples we've seen have been trivial; we've just been
using Forth as a bigger-than-pocket calculator.  Also, each calculation
we've shown has been a "one-off" -- to repeat it we'd need to type it in
again(1) In this section we'll see how to add new words to Forth's
vocabulary.

   The easiest way to create a new word is to use a "colon definition".
We'll define a few and try them out before worrying too much about how
they work.  Try typing in these examples; be careful to copy the spaces
accurately:

     : add-two 2 + . ;
     : greet ." Hello and welcome" ;
     : demo 5 add-two ;

Now try them out:

     greet<RET> Hello and welcome  ok
     greet greet<RET> Hello and welcomeHello and welcome  ok
     4 add-two<RET> 6  ok
     demo<RET> 7  ok
     9 greet demo add-two<RET> Hello and welcome7 11  ok

   The first new thing that we've introduced here is the pair of words
':' and ';'.  These are used to start and terminate a new definition,
respectively.  The first word after the ':' is the name for the new
definition.

   As you can see from the examples, a definition is built up of words
that have already been defined; Forth makes no distinction between
definitions that existed when you started the system up, and those that
you define yourself.

   The examples also introduce the words '.' (dot), '."' (dot-quote) and
'dup' (dewp).  Dot takes the value from the top of the stack and
displays it.  It's like '.s' except that it only displays the top item
of the stack and it is destructive; after it has executed, the number is
no longer on the stack.  There is always one space printed after the
number, and no spaces before it.  Dot-quote defines a string (a sequence
of characters) that will be printed when the word is executed.  The
string can contain any printable characters except '"'.  A '"' has a
special function; it is not a Forth word but it acts as a delimiter (the
way that delimiters work is described in the next section).  Finally,
'dup' duplicates the value at the top of the stack.  Try typing '5 dup
.s' to see what it does.

   We already know that the text interpreter searches through the
dictionary to locate names.  If you've followed the examples earlier,
you will already have a definition called 'add-two'.  Lets try modifying
it by typing in a new definition:

     : add-two dup . ." + 2 = " 2 + . ;<RET> redefined add-two  ok

   Forth recognised that we were defining a word that already exists,
and printed a message to warn us of that fact.  Let's try out the new
definition:

     9 add-two<RET> 9 + 2 = 11  ok

All that we've actually done here, though, is to create a new
definition, with a particular name.  The fact that there was already a
definition with the same name did not make any difference to the way
that the new definition was created (except that Forth printed a warning
message).  The old definition of add-two still exists (try 'demo' again
to see that this is true).  Any new definition will use the new
definition of 'add-two', but old definitions continue to use the version
that already existed at the time that they were 'compiled'.

   Before you go on to the next section, try defining and redefining
some words of your own.

   ---------- Footnotes ----------

   (1) That's not quite true.  If you press the up-arrow key on your
keyboard you should be able to scroll back to any earlier command, edit
it and re-enter it.

4.4 How does that work?
=======================

Now we're going to take another look at the definition of 'add-two' from
the previous section.  From our knowledge of the way that the text
interpreter works, we would have expected this result when we tried to
define 'add-two':

     : add-two 2 + . ;<RET>
     *the terminal*:4: Undefined word
     : >>>add-two<<< 2 + . ;

   The reason that this didn't happen is bound up in the way that ':'
works.  The word ':' does two special things.  The first special thing
that it does is to prevent the text interpreter from ever seeing the
characters 'add-two'.  The text interpreter uses a variable called '>IN'
(pronounced "to-in") to keep track of where it is in the input line.
When it encounters the word ':' it behaves in exactly the same way as it
does for any other word; it looks it up in the name dictionary, finds
its xt and executes it.  When ':' executes, it looks at the input
buffer, finds the word 'add-two' and advances the value of '>IN' to
point past it.  It then does some other stuff associated with creating
the new definition (including creating an entry for 'add-two' in the
name dictionary).  When the execution of ':' completes, control returns
to the text interpreter, which is oblivious to the fact that it has been
tricked into ignoring part of the input line.

   Words like ':' -- words that advance the value of '>IN' and so prevent
the text interpreter from acting on the whole of the input line -- are
called "parsing words".

   The second special thing that ':' does is change the value of a
variable called 'state', which affects the way that the text interpreter
behaves.  When Gforth starts up, 'state' has the value 0, and the text
interpreter is said to be "interpreting".  During a colon definition
(started with ':'), 'state' is set to -1 and the text interpreter is
said to be "compiling".

   In this example, the text interpreter is compiling when it processes
the string "'2 + . ;'".  It still breaks the string down into character
sequences in the same way.  However, instead of pushing the number '2'
onto the stack, it lays down ("compiles") some magic into the definition
of 'add-two' that will make the number '2' get pushed onto the stack
when 'add-two' is "executed".  Similarly, the behaviours of '+' and '.'
are also compiled into the definition.

   Certain kinds of words do not get compiled.  These so-called
"immediate words" get executed (performed now) regardless of whether the
text interpreter is interpreting or compiling.  The word ';' is an
immediate word.  Rather than being compiled into the definition, it
executes.  Its effect is to terminate the current definition, which
includes changing the value of 'state' back to 0.

   When you execute 'add-two', it has a "run-time effect" that is
exactly the same as if you had typed '2 + . <RET>' outside of a
definition.

   In Forth, every word or number can be described in terms of two
properties:

   * Its "interpretation semantics" describe how it will behave when the
     text interpreter encounters it in "interpret" state.  The
     interpretation semantics of a word are represented by an "execution
     token".
   * Its "compilation semantics" describe how it will behave when the
     text interpreter encounters it in "compile" state.  The compilation
     semantics of a word are represented in an implementation-dependent
     way; Gforth uses a "compilation token".

Numbers are always treated in a fixed way:

   * When the number is "interpreted", its behaviour is to push the
     number onto the stack.
   * When the number is "compiled", a piece of code is appended to the
     current definition that pushes the number when it runs.  (In other
     words, the compilation semantics of a number are to postpone its
     interpretation semantics until the run-time of the definition that
     it is being compiled into.)

   Words don't always behave in such a regular way, but most have
default semantics which means that they behave like this:

   * The "interpretation semantics" of the word are to do something
     useful.
   * The "compilation semantics" of the word are to append its
     "interpretation semantics" to the current definition (so that its
     run-time behaviour is to do something useful).

   The actual behaviour of any particular word can be controlled by
using the words 'immediate' and 'compile-only' when the word is defined.
These words set flags in the name dictionary entry of the most recently
defined word, and these flags are retrieved by the text interpreter when
it finds the word in the name dictionary.

   A word that is marked as "immediate" has compilation semantics that
are identical to its interpretation semantics.  In other words, it
behaves like this:

   * The "interpretation semantics" of the word are to do something
     useful.
   * The "compilation semantics" of the word are to do something useful
     (and actually the same thing); i.e., it is executed during
     compilation.

   Marking a word as "compile-only" means that the text interpreter
produces a warning when encountering this word in interpretation state;
ticking the word (with ''' or '[']' also produces a warning.

   It is never necessary to use 'compile-only' (and it is not even part
of Standard Forth, though it is provided by many implementations) but it
is good etiquette to apply it to a word that will not behave correctly
(and might have unexpected side-effects) in interpret state.  For
example, it is only legal to use the conditional word 'IF' within a
definition.  If you forget this and try to use it elsewhere, the fact
that (in Gforth) it is marked as 'compile-only' allows the text
interpreter to generate a helpful warning.

   This example shows the difference between an immediate and a
non-immediate word:

     : show-state state @ . ;
     : show-state-now show-state ; immediate
     : word1 show-state ;
     : word2 show-state-now ;

   The word 'immediate' after the definition of 'show-state-now' makes
that word an immediate word.  These definitions introduce a new word:
'@' (pronounced "fetch").  This word fetches the value of a variable,
and leaves it on the stack.  Therefore, the behaviour of 'show-state' is
to print a number that represents the current value of 'state'.

   When you execute 'word1', it prints the number 0, indicating that the
system is interpreting.  When the text interpreter compiled the
definition of 'word1', it encountered 'show-state' whose compilation
semantics are to append its interpretation semantics to the current
definition.  When you execute 'word1', it performs the interpretation
semantics of 'show-state'.  At the time that 'word1' (and therefore
'show-state') is executed, the system is interpreting.

   When you pressed <RET> after entering the definition of 'word2', you
should have seen the number -1 printed, followed by "' ok'".  When the
text interpreter compiled the definition of 'word2', it encountered
'show-state-now', an immediate word, whose compilation semantics are
therefore to perform its interpretation semantics.  It is executed
straight away (even before the text interpreter has moved on to process
another group of characters; the ';' in this example).  The effect of
executing it is to display the value of 'state' at the time that the
definition of 'word2' is being defined.  Printing -1 demonstrates that
the system is compiling at this time.  If you execute 'word2' it does
nothing at all.

   Before leaving the subject of immediate words, consider the behaviour
of '."' in the definition of 'greet', in the previous section.  This
word is both a parsing word and an immediate word.  Notice that there is
a space between '."' and the start of the text 'Hello and welcome', but
that there is no space between the last letter of 'welcome' and the '"'
character.  The reason for this is that '."' is a Forth word; it must
have a space after it so that the text interpreter can identify it.  The
'"' is not a Forth word; it is a "delimiter".  The examples earlier show
that, when the string is displayed, there is neither a space before the
'H' nor after the 'e'.  Since '."' is an immediate word, it executes at
the time that 'greet' is defined.  When it executes, its behaviour is to
search forward in the input line looking for the delimiter.  When it
finds the delimiter, it updates '>IN' to point past the delimiter.  It
also compiles some magic code into the definition of 'greet'; the xt of
a run-time routine that prints a text string.  It compiles the string
'Hello and welcome' into memory so that it is available to be printed
later.  When the text interpreter gains control, the next word it finds
in the input stream is ';' and so it terminates the definition of
'greet'.

4.5 Forth is written in Forth
=============================

When you start up a Forth compiler, a large number of definitions
already exist.  In Forth, you develop a new application using bottom-up
programming techniques to create new definitions that are defined in
terms of existing definitions.  As you create each definition you can
test and debug it interactively.

   If you have tried out the examples in this section, you will probably
have typed them in by hand; when you leave Gforth, your definitions will
be lost.  You can avoid this by using a text editor to enter Forth
source code into a file, and then loading code from the file using
'include' (*note Forth source files::).  A Forth source file is
processed by the text interpreter, just as though you had typed it in by
hand(1).

   Gforth also supports the traditional Forth alternative to using text
files for program entry (*note Blocks::).

   In common with many, if not most, Forth compilers, most of Gforth is
actually written in Forth.  All of the '.fs' files in the installation
directory(2) are Forth source files, which you can study to see examples
of Forth programming.

   Gforth maintains a history file that records every line that you type
to the text interpreter.  This file is preserved between sessions, and
is used to provide a command-line recall facility.  If you enter long
definitions by hand, you can use a text editor to paste them out of the
history file into a Forth source file for reuse at a later time (for
more information *note Command-line editing::).

   ---------- Footnotes ----------

   (1) Actually, there are some subtle differences -- see *note The Text
Interpreter::.

   (2) For example, '/usr/local/share/gforth...'

4.6 Review - elements of a Forth system
=======================================

To summarise this chapter:

   * Forth programs use "factoring" to break a problem down into small
     fragments called "words" or "definitions".
   * Forth program development is an interactive process.
   * The main command loop that accepts input, and controls both
     interpretation and compilation, is called the "text interpreter"
     (also known as the "outer interpreter").
   * Forth has a very simple syntax, consisting of words and numbers
     separated by spaces or carriage-return characters.  Any additional
     syntax is imposed by "parsing words".
   * Forth uses a stack to pass parameters between words.  As a result,
     it uses postfix notation.
   * To use a word that has previously been defined, the text
     interpreter searches for the word in the "name dictionary".
   * Words have "interpretation semantics" and "compilation semantics".
   * The text interpreter uses the value of 'state' to select between
     the use of the "interpretation semantics" and the "compilation
     semantics" of a word that it encounters.
   * The relationship between the "interpretation semantics" and
     "compilation semantics" for a word depends upon the way in which
     the word was defined (for example, whether it is an "immediate"
     word).
   * Forth definitions can be implemented in Forth (called "high-level
     definitions") or in some other way (usually a lower-level language
     and as a result often called "low-level definitions", "code
     definitions" or "primitives").
   * Many Forth systems are implemented mainly in Forth.

4.7 Where To Go Next
====================

Amazing as it may seem, if you have read (and understood) this far, you
know almost all the fundamentals about the inner workings of a Forth
system.  You certainly know enough to be able to read and understand the
rest of this manual and the Standard Forth document, to learn more about
the facilities that Forth in general and Gforth in particular provide.
Even scarier, you know almost enough to implement your own Forth system.
However, that's not a good idea just yet...  better to try writing some
programs in Gforth.

   Forth has such a rich vocabulary that it can be hard to know where to
start in learning it.  This section suggests a few sets of words that
are enough to write small but useful programs.  Use the word index in
this document to learn more about each word, then try it out and try to
write small definitions using it.  Start by experimenting with these
words:

   * Arithmetic: '+ - * / /MOD */ ABS INVERT'
   * Comparison: 'MIN MAX ='
   * Logic: 'AND OR XOR NOT'
   * Stack manipulation: 'DUP DROP SWAP OVER'
   * Loops and decisions: 'IF ELSE ENDIF ?DO I LOOP'
   * Input/Output: '. ." EMIT CR KEY'
   * Defining words: ': ; CREATE'
   * Memory allocation words: 'ALLOT ,'
   * Tools: 'SEE WORDS .S MARKER'

   When you have mastered those, go on to:

   * More defining words: 'VARIABLE CONSTANT VALUE TO CREATE DOES>'
   * Memory access: '@ !'

   When you have mastered these, there's nothing for it but to read
through the whole of this manual and find out what you've missed.

4.8 Exercises
=============

TODO: provide a set of programming excercises linked into the stuff done
already and into other sections of the manual.  Provide solutions to all
the exercises in a .fs file in the distribution.

5 Forth Words
*************

5.1 Notation
============

The Forth words are described in this section in the glossary notation
that has become a de-facto standard for Forth texts:

word     Stack effect   wordset   pronunciation
   Description

WORD
     The name of the word.

STACK EFFECT
     The stack effect is written in the notation 'before -- after',
     where before and after describe the top of stack entries before and
     after the execution of the word.  The rest of the stack is not
     touched by the word.  The top of stack is rightmost, i.e., a stack
     sequence is written as it is typed in.  Note that Gforth uses a
     separate floating point stack, but a unified stack notation.  Also,
     return stack effects are not shown in stack effect, but in
     Description.  The name of a stack item describes the type and/or
     the function of the item.  See below for a discussion of the types.

     All words have two stack effects: A compile-time stack effect and a
     run-time stack effect.  The compile-time stack-effect of most words
     is -- .  If the compile-time stack-effect of a word deviates from
     this standard behaviour, or the word does other unusual things at
     compile time, both stack effects are shown; otherwise only the
     run-time stack effect is shown.

     Also note that in code templates or examples there can be comments
     in parentheses that display the stack picture at this point; there
     is no '--' in these places, because there is no before-after
     situation.

PRONUNCIATION
     How the word is pronounced.

WORDSET
     The Forth standard is divided into several word sets.  A standard
     system need not support all of them.  Therefore, in theory, the
     fewer word sets your program uses the more portable it will be.
     However, we suspect that most Standard Forth systems on personal
     machines will feature all word sets.  Words that are not defined in
     Standard Forth have 'gforth' or 'gforth-internal' as word set.
     'gforth' describes words that will work in future releases of
     Gforth; 'gforth-internal' words are more volatile.  Environmental
     query strings are also displayed like words; you can recognize them
     by the 'environment' in the word set field.

DESCRIPTION
     A description of the behaviour of the word.

   The type of a stack item is specified by the character(s) the name
starts with:

'f'
     Boolean flags, i.e.  'false' or 'true'.
'c'
     Char
'w'
     Cell, can contain an integer or an address
'n'
     signed integer
'u'
     unsigned integer
'd'
     double sized signed integer
'ud'
     double sized unsigned integer
'r'
     Float (on the FP stack)
'a-'
     Cell-aligned address
'c-'
     Char-aligned address (note that a Char may have two bytes in
     Windows NT)
'f-'
     Float-aligned address
'df-'
     Address aligned for IEEE double precision float
'sf-'
     Address aligned for IEEE single precision float
'xt'
     Execution token, same size as Cell
'wid'
     Word list ID, same size as Cell
'ior, wior'
     I/O result code, cell-sized.  In Gforth, you can 'throw' iors.
'f83name'
     Pointer to a name structure
'"'
     string in the input stream (not on the stack).  The terminating
     character is a blank by default.  If it is not a blank, it is shown
     in '<>' quotes.

5.2 Case insensitivity
======================

Gforth is case-insensitive; you can enter definitions and invoke
Standard words using upper, lower or mixed case (however, *note
Implementation-defined options: core-idef.).

   Standard Forth only requires implementations to recognise Standard
words when they are typed entirely in upper case.  Therefore, a Standard
program must use upper case for all Standard words.  You can use
whatever case you like for words that you define, but in a Standard
program you have to use the words in the same case that you defined
them.

   Gforth supports case sensitivity through 'cs-wordlist's
(case-sensitive wordlists, *note Word Lists::).

   Two people have asked how to convert Gforth to be case-sensitive;
while we think this is a bad idea, you can change all wordlists into
tables like this:

     ' table-find forth-wordlist wordlist-map  !

   Note that you now have to type the predefined words in the same case
that we defined them, which are varying.  You may want to convert them
to your favourite case before doing this operation (I won't explain how,
because if you are even contemplating doing this, you'd better have
enough knowledge of Forth systems to know this already).

5.3 Comments
============

Forth supports two styles of comment; the traditional in-line comment,
'(' and its modern cousin, the comment to end of line; '\'.

'('       ( compilation 'ccc<close-paren>' -- ; run-time --         core,file       "paren"
   Comment, usually till the next ')': parse and discard all subsequent
characters in the parse area until ")" is encountered.  During
interactive input, an end-of-line also acts as a comment terminator.
For file input, it does not; if the end-of-file is encountered whilst
parsing for the ")" delimiter, Gforth will generate a warning.

'\'       compilation 'ccc<newline>' -- ; run-time --         core-ext,block-ext       "backslash"
   Comment till the end of the line if 'BLK' contains 0 (i.e., while not
loading a block), parse and discard the remainder of the parse area.
Otherwise, parse and discard all subsequent characters in the parse area
corresponding to the current line.

'\G'       compilation 'ccc<newline>' -- ; run-time --         gforth       "backslash-gee"
   Equivalent to '\' but used as a tag to annotate definition comments
into documentation.

5.4 Boolean Flags
=================

A Boolean flag is cell-sized.  A cell with all bits clear represents the
flag 'false' and a flag with all bits set represents the flag 'true'.
Words that check a flag (for example, 'IF') will treat a cell that has
any bit set as 'true'.

'True'       unknown         unknown       "True"

'False'       unknown         unknown       "False"

'on'       a-addr --         gforth       "on"
   Set the (value of the) variable at a-addr to 'true'.

'off'       a-addr --         gforth       "off"
   Set the (value of the) variable at a-addr to 'false'.

5.5 Arithmetic
==============

Forth arithmetic is not checked, i.e., you will not hear about integer
overflow on addition or multiplication, you may hear about division by
zero if you are lucky.  The operator is written after the operands, but
the operands are still in the original order.  I.e., the infix '2-1'
corresponds to '2 1 -'.  Forth offers a variety of division operators.
If you perform division with potentially negative operands, you do not
want to use '/' or '/mod' with its implementation-defined behaviour,
but, e.g., '/f', '/modf' or 'fm/mod' (*note Integer division::).

5.5.1 Single precision
----------------------

By default, numbers in Forth are single-precision integers that are one
cell in size.  They can be signed or unsigned, depending upon how you
treat them.  For the rules used by the text interpreter for recognising
single-precision integers see *note Number Conversion::.

   These words are all defined for signed operands, but some of them
also work for unsigned numbers: '+', '1+', '-', '1-', '*'.

'+'       n1 n2 -- n        core       "plus"

'1+'       n1 -- n2        core       "one-plus"

'under+'       n1 n2 n3 -- n n2        gforth       "under-plus"
   add n3 to n1 (giving n)

'-'       n1 n2 -- n        core       "minus"

'1-'       n1 -- n2        core       "one-minus"

'*'       n1 n2 -- n        core       "star"

'negate'       n1 -- n2        core       "negate"

'abs'       n -- u        core       "abs"

'min'       n1 n2 -- n        core       "min"

'max'       n1 n2 -- n        core       "max"

5.5.2 Double precision
----------------------

For the rules used by the text interpreter for recognising
double-precision integers, see *note Number Conversion::.

   A double precision number is represented by a cell pair, with the
most significant cell at the TOS. It is trivial to convert an unsigned
single to a double: simply push a '0' onto the TOS. Since numbers are
represented by Gforth using 2's complement arithmetic, converting a
signed single to a (signed) double requires sign-extension across the
most significant cell.  This can be achieved using 's>d'.  The moral of
the story is that you cannot convert a number without knowing whether it
represents an unsigned or a signed number.

   These words are all defined for signed operands, but some of them
also work for unsigned numbers: 'd+', 'd-'.

's>d'       n -- d         core       "s-to-d"

'd>s'       d -- n         double       "d-to-s"

'd+'       ud1 ud2 -- ud        double       "d-plus"

'd-'       d1 d2 -- d        double       "d-minus"

'dnegate'       d1 -- d2        double       "d-negate"

'dabs'       d -- ud         double       "d-abs"

'dmin'       d1 d2 -- d         double       "d-min"

'dmax'       d1 d2 -- d         double       "d-max"

5.5.3 Mixed precision
---------------------

'm+'       d1 n -- d2        double       "m-plus"

'm*'       n1 n2 -- d        core       "m-star"

'um*'       u1 u2 -- ud        core       "u-m-star"

5.5.4 Integer division
----------------------

Below you find a considerable number of words for dealing with
divisions.  A major difference between them is in dealing with signed
division: Do the words support signed division (those with the 'U'
prefix do not)?

   If they do, do they round towards negative infinity (floored
division, suffix 'F'), or towards 0 (symmetric division, suffix 'S').
The standard leaves the issue implementation-defined for most standard
words ('/ mod /mod */ */mod m*/'), and different systems have made
different choices.  Gforth implements these words as floored (since
Gforth 0.7).  There is only a difference between floored and symmetric
division if the dividend and the divisor have different signs, and the
dividend is not a multiple of the divisor.  The following table
illustrates the results:

                           floored          symmetric
     dividend divisor remainder quotient remainder quotient
         10      7           3   1              3   1
        -10      7           4  -2             -3  -1
         10     -7          -4  -2              3  -1
        -10     -7          -3   1             -3   1

   The common case where floored vs. symmetric makes a difference is
when dividends n1 with varying sign are divided by the same positive
divisor n2; in that case you usually want floored division, because then
the remainder is always positive and does not change sign depending on
the dividend; also, with floored division, the quotient always increases
by 1 when n1 increases by n2, while with symmetric division there is no
increase in the quotient for -n2<n1<n2 (the quotient is 0 in this
range).

   In any case, if you divide numbers where floored vs. symmetric makes
a difference, you should think about which variant is the right one for
you, and then use either the appropriately suffixed Gforth words, or the
standard words 'fm/mod' or 'sm/rem'.

   Single-by-single-cell division:

'/'       n1 n2 -- n         core       "slash"
   n=n1/n2

'/s'       n1 n2 -- n        gforth       "slash-s"

'/f'       n1 n2 -- n        gforth       "slash-f"

'u/'       u1 u2 -- u        gforth       "u-slash"

'mod'       n1 n2 -- n         core       "mod"
   n is the modulus of n1/n2

'mods'       n1 n2 -- n        gforth       "mod-s"

'modf'       n1 n2 -- n        gforth       "modf"

'umod'       u1 u2 -- u        gforth       "umod"

'/mod'       n1 n2 -- n3 n4         core       "slash-mod"
   n1=n2*n4+n3; n3 is the modulus, n4 the quotient.

'/mods'       n1 n2 -- n3 n4        gforth       "slash-mod-s"
   n3 is the remainder, n4 the quotient

'/modf'       n1 n2 -- n3 n4        gforth       "slash-mod-f"
   n3 is the modulus, n4 the quotient

'u/mod'       u1 u2 -- u3 u4        gforth       "u-slash-mod"
   u3 is the modulus, u4 the quotient

   Double-by-single-cell division with single-cell results; these words
are roughly as fast as the words above on some architectures (e.g.,
AMD64), but much slower on others (e.g., an order of magnitude on
various Aarch64 CPUs).

'fm/mod'       d1 n1 -- n2 n3        core       "f-m-slash-mod"
   Floored division: d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1.

'sm/rem'       d1 n1 -- n2 n3        core       "s-m-slash-rem"
   Symmetric division: d1 = n3*n1+n2, sign(n2)=sign(d1) or 0.

'um/mod'       ud u1 -- u2 u3        core       "u-m-slash-mod"
   ud=u3*u1+u2, 0<=u2<u1

'du/mod'       d u -- n u1        gforth       "du-slash-mod"
   d=n*u+u1, 0<=u1<u; PolyForth style mixed division

'*/'       ( n1 n2 n3 -- n4         core       "star-slash"
   n4=(n1*n2)/n3, with the intermediate result being double

'*/s'       n1 n2 n3 -- n4        gforth       "star-slash-s"
   n4=(n1*n2)/n3, with the intermediate result being double

'*/f'       n1 n2 n3 -- n4        gforth       "star-slash-f"
   n4=(n1*n2)/n3, with the intermediate result being double

'u*/'       u1 u2 u3 -- u4        gforth       "u-star-slash"
   u4=(u1*u2)/u3, with the intermediate result being double.

'*/mod'       n1 n2 n3 -- n4 n5         core       "star-slash-mod"
   n1*n2=n3*n5+n4, with the intermediate result (n1*n2) being double; n4
is the modulus, n5 the quotient.

'*/mods'       n1 n2 n3 -- n4 n5        gforth       "star-slash-mod-s"
   n1*n2=n3*n5+n4, with the intermediate result (n1*n2) being double; n4
is the remainder, n5 the quotient

'*/modf'       n1 n2 n3 -- n4 n5        gforth       "star-slash-mod-f"
   n1*n2=n3*n5+n4, with the intermediate result (n1*n2) being double; n4
is the modulus, n5 the quotient

'u*/mod'       u1 u2 u3 -- u4 u5        gforth       "u-star-slash-mod"
   u1*u2=u3*u5+u4, with the intermediate result (u1*u2) being double.

   Division with double-cell results; these words are much slower than
the words above.

'ud/mod'       ud1 u2 -- urem udquot         gforth       "ud/mod"
   divide unsigned double ud1 by u2, resulting in a unsigned double
quotient udquot and a single remainder urem.

'm*/'       d1 n2 u3 -- dquot         double       "m-star-slash"
   dquot=(d1*n2)/u3, with the intermediate result being
triple-precision.  In ANS Forth u3 can only be a positive signed number.

   You can use the following environmental query to learn whether '/ mod
/mod */ */mod m*/' use floored or symmetric division.

'FLOORED'       -- f         environment       "FLOORED"
   True if '/' etc.  perform floored division

   One other aspect of the integer division words is that most of them
can overflow, and division by zero is mathematically undefined.  What
happens if you hit one of these conditions depends on the engine, the
hardware, and the operating system: The engine 'gforth' tries hard to
throw the appropriate error -10 (Division by zero) or -11 (Result out of
range), but on some platforms throws -55 (Floating-point unidentified
fault).  The engine 'gforth-fast' may produce an inappropriate throw
code (and error message), or may produce no error, just produce a bogus
value.  I.e., you should not bet on such conditions being thrown, but
for quicker debugging 'gforth' catches more and produces more accurate
errors than 'gforth-fast'.

5.5.5 Two-stage integer division
--------------------------------

On most hardware, multiplication is significantly faster than division.
So if you have to divide many numbers by the same divisor, it is usually
faster to determine the reciprocal of the divisor once and multiply the
numbers with the reciprocal.  For integers, this is tricky, so Gforth
packages this work into the words described in this section.

   Let's start with an example: You want to divide all elements of an
array of cells by the same number n.  A straightforward way to implement
this is:

     : array/ ( addr u n -- )
       -rot cells bounds u+do
         i @ over / i !
       1 cells +loop
       drop ;

   A more efficient version looks like this:

     : array/ ( addr u n -- )
       {: | reci[ staged/-size ] :}
       reci[ /f-stage1m
       cells bounds u+do
         i @ reci[ /f-stage2m i !
       1 cells +loop ;

   This example first creates a local buffer 'reci[' with size
'staged/-size' for storing the reciprocal data.  Then '/f-stage1m'
computes the reciprocal of n and stores it in 'reci['.  Finally, inside
the loop '/f-stage2m' uses the data in 'reci[' to compute the quotient.

   There are some limitations: Only positive divisors are supported for
'/f-stage1m'; for 'u/-stage1m' you can use a divisor of 2 or higher.
You get an error if you try to use an unsupported divisor.  You must
initalize the reciprocal buffer for the floored second-stage words with
'/f-stage1m' and for the unsigned second-stage words with 'u/-stage1m'.
You must not modify the reciprocal buffer between the first stage and
the second stage; basically, don't treat it as a memory buffer, but as
something that is only mutable by the first stage; the point of this
rule is that future versions of Gforth will not consider aliasing of
this buffer.

   The words are:

'staged/-size'       -- u         gforth       "staged-slash-size"
   Size of buffer for 'u/-stage1m' or '/f-stage1m'.

'/f-stage1m'       n addr-reci --         gforth       "slash-f-stage1m"
   Compute the reciprocal of n and store it in the buffer addr-reci of
size 'staged/-size'.  Throws an error if n<1.

'/f-stage2m'       n1 a-reci -- nquotient        gforth       "slash-f-stage2m"
   Nquotient is the result of dividing n1 by the divisor represented by
a-reci, which was computed by '/f-stage1m'.

'modf-stage2m'       n1 a-reci -- umodulus        gforth       "mod-f-stage2m"
   Umodulus is the remainder of dividing n1 by the divisor represented
by a-reci, which was computed by '/f-stage1m'.

'/modf-stage2m'       n1 a-reci -- umodulus nquotient        gforth       "slash-mod-f-stage2m"
   Nquotient is the quotient and umodulus is the remainder of dividing
n1 by the divisor represented by a-reci, which was computed by
'/f-stage1m'.

'u/-stage1m'       u addr-reci --         gforth       "u-slash-stage1m"
   Compute the reciprocal of u and store it in the buffer addr-reci of
size 'staged/-size'.  Throws an error if u<2.

'u/-stage2m'       u1 a-reci -- uquotient        gforth       "u-slash-stage2m"
   Uquotient is the result of dividing u1 by the divisor represented by
a-reci, which was computed by 'u/-stage1m'.

'umod-stage2m'       u1 a-reci -- umodulus        gforth       "u-mod-stage2m"
   Umodulus is the remainder of dividing u1 by the divisor represented
by a-reci, which was computed by 'u/-stage1m'.

'u/mod-stage2m'       u1 a-reci -- umodulus uquotient        gforth       "u-slash-mod-stage2m"
   Uquotient is the quotient and umodulus is the remainder of dividing
u1 by the divisor represented by a-reci, which was computed by
'u/-stage1m'.

   Gforth currently does not support staged symmetrical division.

   You can recover the divisor from (the address of) a reciprocal with
'staged/-divisor @':

'staged/-divisor'       addr1 -- addr2         gforth       "staged-slash-divisor"
   Addr1 is the address of a reciprocal, addr2 is the address containing
the divisor from which the reciprocal was computed.

   This can be useful when looking at the decompiler output of Gforth: a
division by a constant is often compiled to a literal containing the
address of a reciprocal followed by a second-stage word.

   The performance impact of using these words strongly depends on the
architecture (does it have hardware division) and the specific
implementation (how fast is hardware division?), but just to give you an
idea about the relative performance of these words, here are the cycles
per iteration of a microbenchmark (which performs the mentioned word
once per iteration) on two AMD64 implementations; the norm column shows
the normal division word (e.g., 'u/'), while the stag column shows the
corresponding stage2 word (e.g., 'u/-stage2m'):

      Skylake              Zen2
     norm stag           norm stag
     41.3 15.8 u/	    35.2 21.4 u/
     39.8 19.7 umod	    36.9 25.8 umod
     44.0 25.3 u/mod	    43.0 33.9 u/mod
     48.7 16.9 /f	    36.2 22.5 /f
     47.9 20.5 modf	    37.9 27.1 modf
     53.0 24.6 /modf	    45.8 35.4 /modf
         227.2 u/stage1      101.9 u/stage1
         159.8 /fstage1       97.7 /fstage1

5.5.6 Bitwise operations
------------------------

'and'       w1 w2 -- w        core       "and"

'or'       w1 w2 -- w        core       "or"

'xor'       w1 w2 -- w        core       "x-or"

'invert'       w1 -- w2        core       "invert"

'lshift'       u1 n -- u2        core       "l-shift"

'rshift'       u1 n -- u2        core       "r-shift"
   Logical shift right by n bits.

'2*'       n1 -- n2        core       "two-star"
   Shift left by 1; also works on unsigned numbers

'd2*'       d1 -- d2        double       "d-two-star"
   Shift left by 1; also works on unsigned numbers

'2/'       n1 -- n2        core       "two-slash"
   Arithmetic shift right by 1.  For signed numbers this is a floored
division by 2 (note that '/' not necessarily floors).

'd2/'       d1 -- d2        double       "d-two-slash"
   Arithmetic shift right by 1.  For signed numbers this is a floored
division by 2.

5.5.7 Numeric comparison
------------------------

Note that the words that compare for equality ('= <> 0= 0<> d= d<> d0=
d0<>') work for for both signed and unsigned numbers.

'<'       n1 n2 -- f        core       "less-than"

'<='       n1 n2 -- f        gforth       "less-or-equal"

'<>'       n1 n2 -- f        core-ext       "not-equals"

'='       n1 n2 -- f        core       "equals"

'>'       n1 n2 -- f        core       "greater-than"

'>='       n1 n2 -- f        gforth       "greater-or-equal"

'0<'       n -- f        core       "zero-less-than"

'0<='       n -- f        gforth       "zero-less-or-equal"

'0<>'       n -- f        core-ext       "zero-not-equals"

'0='       n -- f        core       "zero-equals"

'0>'       n -- f        core-ext       "zero-greater-than"

'0>='       n -- f        gforth       "zero-greater-or-equal"

'u<'       u1 u2 -- f        core       "u-less-than"

'u<='       u1 u2 -- f        gforth       "u-less-or-equal"

'u>'       u1 u2 -- f        core-ext       "u-greater-than"

'u>='       u1 u2 -- f        gforth       "u-greater-or-equal"

'within'       u1 u2 u3 -- f        core-ext       "within"
   u2<u3 and u1 in [u2,u3) or: u2>=u3 and u1 not in [u3,u2).  This works
for unsigned and signed numbers (but not a mixture).  Another way to
think about this word is to consider the numbers as a circle (wrapping
around from 'max-u' to 0 for unsigned, and from 'max-n' to min-n for
signed numbers); now consider the range from u2 towards increasing
numbers up to and excluding u3 (giving an empty range if u2=u3); if u1
is in this range, 'within' returns true.

'd<'       d1 d2 -- f        double       "d-less-than"

'd<='       d1 d2 -- f        gforth       "d-less-or-equal"

'd<>'       d1 d2 -- f        gforth       "d-not-equals"

'd='       d1 d2 -- f        double       "d-equals"

'd>'       d1 d2 -- f        gforth       "d-greater-than"

'd>='       d1 d2 -- f        gforth       "d-greater-or-equal"

'd0<'       d -- f        double       "d-zero-less-than"

'd0<='       d -- f        gforth       "d-zero-less-or-equal"

'd0<>'       d -- f        gforth       "d-zero-not-equals"

'd0='       d -- f        double       "d-zero-equals"

'd0>'       d -- f        gforth       "d-zero-greater-than"

'd0>='       d -- f        gforth       "d-zero-greater-or-equal"

'du<'       ud1 ud2 -- f        double-ext       "d-u-less-than"

'du<='       ud1 ud2 -- f        gforth       "d-u-less-or-equal"

'du>'       ud1 ud2 -- f        gforth       "d-u-greater-than"

'du>='       ud1 ud2 -- f        gforth       "d-u-greater-or-equal"

5.5.8 Floating Point
--------------------

For the rules used by the text interpreter for recognising
floating-point numbers see *note Number Conversion::.

   Gforth has a separate floating point stack, but the documentation
uses the unified notation.(1)

   Floating point numbers have a number of unpleasant surprises for the
unwary (e.g., floating point addition is not associative) and even a few
for the wary.  You should not use them unless you know what you are
doing or you don't care that the results you get are totally bogus.  If
you want to learn about the problems of floating point numbers (and how
to avoid them), you might start with 'David Goldberg, What Every
Computer Scientist Should Know About Floating-Point Arithmetic
(http://docs.sun.com/source/806-3568/ncg_goldberg.html), ACM Computing
Surveys 23(1):5-48, March 1991'.

   Conversion between integers and floating-point:

's>f'       n -- r        float       "s-to-f"

'd>f'       d -- r        float       "d-to-f"

'f>s'       r -- n        float       "f-to-s"

'f>d'       r -- d        float       "f-to-d"

   Arithmetics:

'f+'       r1 r2 -- r3        float       "f-plus"

'f-'       r1 r2 -- r3        float       "f-minus"

'f*'       r1 r2 -- r3        float       "f-star"

'f/'       r1 r2 -- r3        float       "f-slash"

'fnegate'       r1 -- r2        float       "f-negate"

'fabs'       r1 -- r2        float-ext       "f-abs"

'fmax'       r1 r2 -- r3        float       "f-max"

'fmin'       r1 r2 -- r3        float       "f-min"

'floor'       r1 -- r2        float       "floor"
   Round towards the next smaller integral value, i.e., round toward
negative infinity.

'fround'       r1 -- r2        float       "f-round"
   Round to the nearest integral value.

'f**'       r1 r2 -- r3        float-ext       "f-star-star"
   r3 is r1 raised to the r2th power.

'fsqrt'       r1 -- r2        float-ext       "f-square-root"

'fexp'       r1 -- r2        float-ext       "f-e-x-p"

'fexpm1'       r1 -- r2        float-ext       "f-e-x-p-m-one"
   r2=e**r1-1

'fln'       r1 -- r2        float-ext       "f-l-n"

'flnp1'       r1 -- r2        float-ext       "f-l-n-p-one"
   r2=ln(r1+1)

'flog'       r1 -- r2        float-ext       "f-log"
   The decimal logarithm.

'falog'       r1 -- r2        float-ext       "f-a-log"
   r2=10**r1

'f2*'       r1 -- r2         gforth       "f2*"
   Multiply r1 by 2.0e0

'f2/'       r1 -- r2         gforth       "f2/"
   Multiply r1 by 0.5e0

'1/f'       r1 -- r2         gforth       "1/f"
   Divide 1.0e0 by r1.

   Angles in floating point operations are given in radians (a full
circle has 2 pi radians).

'fsin'       r1 -- r2        float-ext       "f-sine"

'fcos'       r1 -- r2        float-ext       "f-cos"

'fsincos'       r1 -- r2 r3        float-ext       "f-sine-cos"
   r2=sin(r1), r3=cos(r1)

'ftan'       r1 -- r2        float-ext       "f-tan"

'fasin'       r1 -- r2        float-ext       "f-a-sine"

'facos'       r1 -- r2        float-ext       "f-a-cos"

'fatan'       r1 -- r2        float-ext       "f-a-tan"

'fatan2'       r1 r2 -- r3        float-ext       "f-a-tan-two"
   r1/r2=tan(r3).  ANS Forth does not require, but probably intends this
to be the inverse of 'fsincos'.  In gforth it is.

'fsinh'       r1 -- r2        float-ext       "f-cinch"

'fcosh'       r1 -- r2        float-ext       "f-cosh"

'ftanh'       r1 -- r2        float-ext       "f-tan-h"

'fasinh'       r1 -- r2        float-ext       "f-a-cinch"

'facosh'       r1 -- r2        float-ext       "f-a-cosh"

'fatanh'       r1 -- r2        float-ext       "f-a-tan-h"

'pi'       -- r         gforth       "pi"
   'Fconstant' -- r is the value pi; the ratio of a circle's area to its
diameter.

   One particular problem with floating-point arithmetic is that
comparison for equality often fails when you would expect it to succeed.
For this reason approximate equality is often preferred (but you still
have to know what you are doing).  Also note that IEEE NaNs may compare
differently from what you might expect.  The comparison words are:

'f~rel'       r1 r2 r3 -- flag         gforth       "f~rel"
   Approximate equality with relative error: |r1-r2|<r3*|r1+r2|.

'f~abs'       r1 r2 r3 -- flag         gforth       "f~abs"
   Approximate equality with absolute error: |r1-r2|<r3.

'f~'       r1 r2 r3 -- flag         float-ext       "f-proximate"
   ANS Forth medley for comparing r1 and r2 for equality: r3>0: 'f~abs';
r3=0: bitwise comparison; r3<0: 'fnegate f~rel'.

'f='       r1 r2 -- f        gforth       "f-equals"

'f<>'       r1 r2 -- f        gforth       "f-not-equals"

'f<'       r1 r2 -- f        float       "f-less-than"

'f<='       r1 r2 -- f        gforth       "f-less-or-equal"

'f>'       r1 r2 -- f        gforth       "f-greater-than"

'f>='       r1 r2 -- f        gforth       "f-greater-or-equal"

'f0<'       r -- f        float       "f-zero-less-than"

'f0<='       r -- f        gforth       "f-zero-less-or-equal"

'f0<>'       r -- f        gforth       "f-zero-not-equals"

'f0='       r -- f        float       "f-zero-equals"

'f0>'       r -- f        gforth       "f-zero-greater-than"

'f0>='       r -- f        gforth       "f-zero-greater-or-equal"

   ---------- Footnotes ----------

   (1) It's easy to generate the separate notation from that by just
separating the floating-point numbers out: e.g.  '( n r1 u r2 -- r3 )'
becomes '( n u -- ) ( F: r1 r2 -- r3 )'.

5.6 Stack Manipulation
======================

Gforth maintains a number of separate stacks:

   * A data stack (also known as the "parameter stack") -- for
     characters, cells, addresses, and double cells.

   * A floating point stack -- for holding floating point (FP) numbers.

   * A return stack -- for holding the return addresses of colon
     definitions and other (non-FP) data.

   * A locals stack -- for holding local variables.

5.6.1 Data stack
----------------

'drop'       w --        core       "drop"

'nip'       w1 w2 -- w2        core-ext       "nip"

'dup'       w -- w w        core       "dupe"

'over'       w1 w2 -- w1 w2 w1        core       "over"

'tuck'       w1 w2 -- w2 w1 w2        core-ext       "tuck"

'swap'       w1 w2 -- w2 w1        core       "swap"

'pick'       S:... u -- S:... w        core-ext       "pick"
   Actually the stack effect is ' x0 ... xu u -- x0 ... xu x0 '.

'rot'       w1 w2 w3 -- w2 w3 w1        core       "rote"

'-rot'       w1 w2 w3 -- w3 w1 w2        gforth       "not-rote"

'?dup'       w -- S:... w        core       "question-dupe"
   Actually the stack effect is: '( w -- 0 | w w )'.  It performs a
'dup' if w is nonzero.

'roll'       x0 x1 .. xn n -- x1 .. xn x0         core-ext       "roll"

'2drop'       w1 w2 --        core       "two-drop"

'2nip'       w1 w2 w3 w4 -- w3 w4        gforth       "two-nip"

'2dup'       w1 w2 -- w1 w2 w1 w2        core       "two-dupe"

'2over'       w1 w2 w3 w4 -- w1 w2 w3 w4 w1 w2        core       "two-over"

'2tuck'       w1 w2 w3 w4 -- w3 w4 w1 w2 w3 w4        gforth       "two-tuck"

'2swap'       w1 w2 w3 w4 -- w3 w4 w1 w2        core       "two-swap"

'2rot'       w1 w2 w3 w4 w5 w6 -- w3 w4 w5 w6 w1 w2        double-ext       "two-rote"

5.6.2 Floating point stack
--------------------------

'floating-stack'       -- n         environment       "floating-stack"
   N is non-zero, showing that Gforth maintains a separate
floating-point stack of depth N.

'fdrop'       r --        float       "f-drop"

'fnip'       r1 r2 -- r2        gforth       "f-nip"

'fdup'       r -- r r        float       "f-dupe"

'fover'       r1 r2 -- r1 r2 r1        float       "f-over"

'ftuck'       r1 r2 -- r2 r1 r2        gforth       "f-tuck"

'fswap'       r1 r2 -- r2 r1        float       "f-swap"

'fpick'       f:... u -- f:... r        gforth       "fpick"
   Actually the stack effect is ' r0 ... ru u -- r0 ... ru r0 '.

'frot'       r1 r2 r3 -- r2 r3 r1        float       "f-rote"

5.6.3 Return stack
------------------

A Forth system is allowed to keep local variables on the return stack.
This is reasonable, as local variables usually eliminate the need to use
the return stack explicitly.  So, if you want to produce a standard
compliant program and you are using local variables in a word, forget
about return stack manipulations in that word (refer to the standard
document for the exact rules).

'>r'       w -- R:w        core       "to-r"

'r>'       R:w -- w        core       "r-from"

'r@'       -- w ; R: w -- w         core       "r-fetch"

'rdrop'       R:w --        gforth       "rdrop"

'2>r'       w1 w2 -- R:w1 R:w2        core-ext       "two-to-r"

'2r>'       R:w1 R:w2 -- w1 w2        core-ext       "two-r-from"

'2r@'       R:w1 R:w2 -- R:w1 R:w2 w1 w2        core-ext       "two-r-fetch"

'2rdrop'       R:w1 R:w2 --        gforth       "two-r-drop"

5.6.4 Locals stack
------------------

Gforth uses an extra locals stack.  It is described, along with the
reasons for its existence, in *note Locals implementation::.

5.6.5 Stack pointer manipulation
--------------------------------

'sp0'       -- a-addr         gforth       "sp0"
   'User' variable -- initial value of the data stack pointer.

'sp@'       S:... -- a-addr        gforth       "sp-fetch"

'sp!'       a-addr -- S:...        gforth       "sp-store"

'fp0'       -- a-addr         gforth       "fp0"
   'User' variable -- initial value of the floating-point stack pointer.

'fp@'       f:... -- f-addr        gforth       "fp-fetch"

'fp!'       f-addr -- f:...        gforth       "fp-store"

'rp0'       -- a-addr         gforth       "rp0"
   'User' variable -- initial value of the return stack pointer.

'rp@'       -- a-addr        gforth       "rp-fetch"

'rp!'       a-addr --        gforth       "rp-store"

'lp0'       -- a-addr         gforth       "lp0"
   'User' variable -- initial value of the locals stack pointer.

'lp@'       -- addr         gforth       "lp-fetch"

'lp!'       c-addr --        gforth       "lp-store"

5.7 Memory
==========

In addition to the standard Forth memory allocation words, there is also
a garbage collector
(http://www.complang.tuwien.ac.at/forth/garbage-collection.zip).

5.7.1 Memory model
------------------

Standard Forth considers a Forth system as consisting of several address
spaces, of which only "data space" is managed and accessible with the
memory words.  Memory not necessarily in data space includes the stacks,
the code (called code space) and the headers (called name space).  In
Gforth everything is in data space, but the code for the primitives is
usually read-only.

   Data space is divided into a number of areas: The (data space portion
of the) dictionary(1), the heap, and a number of system-allocated
buffers.

   Gforth provides one big address space, and address arithmetic can be
performed between any addresses.  However, in the dictionary headers or
code are interleaved with data, so almost the only contiguous data space
regions there are those described by Standard Forth as contiguous; but
you can be sure that the dictionary is allocated towards increasing
addresses even between contiguous regions.  The memory order of
allocations in the heap is platform-dependent (and possibly different
from one run to the next).

   ---------- Footnotes ----------

   (1) Sometimes, the term "dictionary" is used to refer to the search
data structure embodied in word lists and headers, because it is used
for looking up names, just as you would in a conventional dictionary.

5.7.2 Dictionary allocation
---------------------------

Dictionary allocation is a stack-oriented allocation scheme, i.e., if
you want to deallocate X, you also deallocate everything allocated after
X.

   The allocations using the words below are contiguous and grow the
region towards increasing addresses.  Other words that allocate
dictionary memory of any kind (i.e., defining words including ':noname')
end the contiguous region and start a new one.

   In Standard Forth only 'create'd words are guaranteed to produce an
address that is the start of the following contiguous region.  In
particular, the cell allocated by 'variable' is not guaranteed to be
contiguous with following 'allot'ed memory.

   You can deallocate memory by using 'allot' with a negative argument
(with some restrictions, see 'allot').  For larger deallocations use
'marker'.

'here'       -- addr         core       "here"
   Return the address of the next free location in data space.

'unused'       -- u         core-ext       "unused"
   Return the amount of free space remaining (in address units) in the
region addressed by 'here'.

'allot'       n --         core       "allot"
   Reserve n address units of data space without initialization.  n is a
signed number, passing a negative n releases memory.  In ANS Forth you
can only deallocate memory from the current contiguous region in this
way.  In Gforth you can deallocate anything in this way but named words.
The system does not check this restriction.

'c,'       c --         core       "c-comma"
   Reserve data space for one char and store c in the space.

'f,'       f --         gforth       "f,"
   Reserve data space for one floating-point number and store f in the
space.

','       w --         core       "comma"
   Reserve data space for one cell and store w in the space.

'2,'       w1 w2 --         gforth       "2,"
   Reserve data space for two cells and store the double w1 w2 there, w2
first (lower address).

   Memory accesses have to be aligned (*note Address arithmetic::).  So
of course you should allocate memory in an aligned way, too.  I.e.,
before allocating allocating a cell, 'here' must be cell-aligned, etc.
The words below align 'here' if it is not already.  Basically it is only
already aligned for a type, if the last allocation was a multiple of the
size of this type and if 'here' was aligned for this type before.

   After freshly 'create'ing a word, 'here' is 'align'ed in Standard
Forth ('maxalign'ed in Gforth).

'align'       --         core       "align"
   If the data-space pointer is not aligned, reserve enough space to
align it.

'falign'       --         float       "f-align"
   If the data-space pointer is not float-aligned, reserve enough space
to align it.

'sfalign'       --         float-ext       "s-f-align"
   If the data-space pointer is not single-float-aligned, reserve enough
space to align it.

'dfalign'       --         float-ext       "d-f-align"
   If the data-space pointer is not double-float-aligned, reserve enough
space to align it.

'maxalign'       --         gforth       "maxalign"
   Align data-space pointer for all alignment requirements.

'cfalign'       --         gforth       "cfalign"
   Align data-space pointer for code field requirements (i.e., such that
the corresponding body is maxaligned).

5.7.3 Heap allocation
---------------------

Heap allocation supports deallocation of allocated memory in any order.
Dictionary allocation is not affected by it (i.e., it does not end a
contiguous region).  In Gforth, these words are implemented using the
standard C library calls malloc(), free() and realloc().

   The memory region produced by one invocation of 'allocate' or
'resize' is internally contiguous.  There is no contiguity between such
a region and any other region (including others allocated from the
heap).

'allocate'       u -- a_addr wior         memory       "allocate"
   Allocate u address units of contiguous data space.  The initial
contents of the data space is undefined.  If the allocation is
successful, a-addr is the start address of the allocated region and wior
is 0.  If the allocation fails, a-addr is undefined and wior is a
non-zero I/O result code.

'free'       a_addr -- wior         memory       "free"
   Return the region of data space starting at a-addr to the system.
The region must originally have been obtained using 'allocate' or
'resize'.  If the operational is successful, wior is 0.  If the
operation fails, wior is a non-zero I/O result code.

'resize'       a_addr1 u -- a_addr2 wior         memory       "resize"
   Change the size of the allocated area at a-addr1 to u address units,
possibly moving the contents to a different area.  a-addr2 is the
address of the resulting area.  If the operation is successful, wior is
0.  If the operation fails, wior is a non-zero I/O result code.  If
a-addr1 is 0, Gforth's (but not the Standard) 'resize' 'allocate's u
address units.

5.7.4 Memory Access
-------------------

'@'       a-addr -- w        core       "fetch"
   w is the cell stored at a_addr.

'!'       w a-addr --        core       "store"
   Store w into the cell at a-addr.

'+!'       n a-addr --        core       "plus-store"
   Add n to the cell at a-addr.

'c@'       c-addr -- c        core       "c-fetch"
   c is the char stored at c_addr.

'c!'       c c-addr --        core       "c-store"
   Store c into the char at c-addr.

'2@'       a-addr -- w1 w2        core       "two-fetch"
   w2 is the content of the cell stored at a-addr, w1 is the content of
the next cell.

'2!'       w1 w2 a-addr --        core       "two-store"
   Store w2 into the cell at c-addr and w1 into the next cell.

'f@'       f-addr -- r        float       "f-fetch"
   r is the float at address f-addr.

'f!'       r f-addr --        float       "f-store"
   Store r into the float at address f-addr.

'sf@'       sf-addr -- r        float-ext       "s-f-fetch"
   Fetch the single-precision IEEE floating-point value r from the
address sf-addr.

'sf!'       r sf-addr --        float-ext       "s-f-store"
   Store r as single-precision IEEE floating-point value to the address
sf-addr.

'df@'       df-addr -- r        float-ext       "d-f-fetch"
   Fetch the double-precision IEEE floating-point value r from the
address df-addr.

'df!'       r df-addr --        float-ext       "d-f-store"
   Store r as double-precision IEEE floating-point value to the address
df-addr.

'sw@'       c-addr -- n        gforth       "s-w-fetch"
   n is the sign-extended 16-bit value stored at c_addr.

'uw@'       c-addr -- u        gforth       "u-w-fetch"
   u is the zero-extended 16-bit value stored at c_addr.

'w!'       w c-addr --        gforth       "w-store"
   Store the bottom 16 bits of w at c_addr.

'sl@'       c-addr -- n        gforth       "s-l-fetch"
   n is the sign-extended 32-bit value stored at c_addr.

'ul@'       c-addr -- u        gforth       "u-l-fetch"
   u is the zero-extended 32-bit value stored at c_addr.

'l!'       w c-addr --        gforth       "l-store"
   Store the bottom 32 bits of w at c_addr.

5.7.5 Address arithmetic
------------------------

Address arithmetic is the foundation on which you can build data
structures like arrays, records (*note Structures::) and objects (*note
Object-oriented Forth::).

   Standard Forth does not specify the sizes of the data types.
Instead, it offers a number of words for computing sizes and doing
address arithmetic.  Address arithmetic is performed in terms of address
units (aus); on most systems the address unit is one byte.  Note that a
character may have more than one au, so 'chars' is no noop (on platforms
where it is a noop, it compiles to nothing).

   The basic address arithmetic words are '+' and '-'.  E.g., if you
have the address of a cell, perform '1 cells +', and you will have the
address of the next cell.

   Standard Forth also defines words for aligning addresses for specific
types.  Many computers require that accesses to specific data types must
only occur at specific addresses; e.g., that cells may only be accessed
at addresses divisible by 4.  Even if a machine allows unaligned
accesses, it can usually perform aligned accesses faster.

   For the performance-conscious: alignment operations are usually only
necessary during the definition of a data structure, not during the
(more frequent) accesses to it.

   Standard Forth defines no words for character-aligning addresses; in
Forth-2012 all addresses are character-aligned.

   Standard Forth guarantees that addresses returned by 'CREATE'd words
are cell-aligned; in addition, Gforth guarantees that these addresses
are aligned for all purposes.

   Note that the Standard Forth word 'char' has nothing to do with
address arithmetic.

'chars'       n1 -- n2         core       "chars"
   n2 is the number of address units of n1 chars.""

'char+'       c-addr1 -- c-addr2        core       "char-plus"
   '1 chars +'.

'cells'       n1 -- n2        core       "cells"
   n2 is the number of address units of n1 cells.

'cell+'       a-addr1 -- a-addr2        core       "cell-plus"
   '1 cells +'

'cell'       -- u         gforth       "cell"
   'Constant' -- '1 cells'

'aligned'       c-addr -- a-addr        core       "aligned"
   a-addr is the first aligned address greater than or equal to c-addr.

'floats'       n1 -- n2        float       "floats"
   n2 is the number of address units of n1 floats.

'float+'       f-addr1 -- f-addr2        float       "float-plus"
   '1 floats +'.

'float'       -- u         gforth       "float"
   'Constant' -- the number of address units corresponding to a
floating-point number.

'faligned'       c-addr -- f-addr        float       "f-aligned"
   f-addr is the first float-aligned address greater than or equal to
c-addr.

'sfloats'       n1 -- n2        float-ext       "s-floats"
   n2 is the number of address units of n1 single-precision IEEE
floating-point numbers.

'sfloat+'       sf-addr1 -- sf-addr2         float-ext       "s-float-plus"
   '1 sfloats +'.

'sfaligned'       c-addr -- sf-addr        float-ext       "s-f-aligned"
   sf-addr is the first single-float-aligned address greater than or
equal to c-addr.

'dfloats'       n1 -- n2        float-ext       "d-floats"
   n2 is the number of address units of n1 double-precision IEEE
floating-point numbers.

'dfloat+'       df-addr1 -- df-addr2         float-ext       "d-float-plus"
   '1 dfloats +'.

'dfaligned'       c-addr -- df-addr        float-ext       "d-f-aligned"
   df-addr is the first double-float-aligned address greater than or
equal to c-addr.

'maxaligned'       addr1 -- addr2         gforth       "maxaligned"
   addr2 is the first address after addr1 that satisfies all alignment
restrictions.  maxaligned"

'cfaligned'       addr1 -- addr2         gforth       "cfaligned"
   addr2 is the first address after addr1 that is aligned for a code
field (i.e., such that the corresponding body is maxaligned).

'ADDRESS-UNIT-BITS'       -- n         environment       "ADDRESS-UNIT-BITS"
   Size of one address unit, in bits.

'/w'       -- u         gforth       "slash-w"
   address units for a 16-bit value

'/l'       -- u         gforth       "slash-l"
   address units for a 32-bit value

5.7.6 Memory Blocks
-------------------

Memory blocks often represent character strings; For ways of storing
character strings in memory see *note String Formats::.  For other
string-processing words see *note Displaying characters and strings::.

   A few of these words work on address unit blocks.  In that case, you
usually have to insert 'CHARS' before the word when working on character
strings.  Most words work on character blocks, and expect a char-aligned
address.

   When copying characters between overlapping memory regions, use
'chars move' or choose carefully between 'cmove' and 'cmove>'.

'move'       c-from c-to ucount --        core       "move"
   Copy the contents of ucount aus at c-from to c-to.  'move' works
correctly even if the two areas overlap.

'erase'       addr u --         core-ext       "erase"
   Clear all bits in u aus starting at addr.

'cmove'       c-from c-to u --        string       "c-move"
   Copy the contents of ucount characters from data space at c-from to
c-to.  The copy proceeds 'char'-by-'char' from low address to high
address; i.e., for overlapping areas it is safe if c-to<=c-from.

'cmove>'       c-from c-to u --        string       "c-move-up"
   Copy the contents of ucount characters from data space at c-from to
c-to.  The copy proceeds 'char'-by-'char' from high address to low
address; i.e., for overlapping areas it is safe if c-to>=c-from.

'fill'       c-addr u c --        core       "fill"
   Store c in u chars starting at c-addr.

'blank'       c-addr u --         string       "blank"
   Store the space character into u chars starting at c-addr.

'compare'       c-addr1 u1 c-addr2 u2 -- n        string       "compare"
   Compare two strings lexicographically.  If they are equal, n is 0; if
the first string is smaller, n is -1; if the first string is larger, n
is 1.  Currently this is based on the machine's character comparison.
In the future, this may change to consider the current locale and its
collation order.

'str='       c-addr1 u1 c-addr2 u2 -- f         gforth       "str="

'str<'       c-addr1 u1 c-addr2 u2 -- f         gforth       "str<"

'string-prefix?'       c-addr1 u1 c-addr2 u2 -- f         gforth       "string-prefix?"
   Is C-ADDR2 U2 a prefix of C-ADDR1 U1?

'search'       c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag         string       "search"
   Search the string specified by c-addr1, u1 for the string specified
by c-addr2, u2.  If flag is true: match was found at c-addr3 with u3
characters remaining.  If flag is false: no match was found; c-addr3, u3
are equal to c-addr1, u1.

'-trailing'       c_addr u1 -- c_addr u2         string       "dash-trailing"
   Adjust the string specified by c-addr, u1 to remove all trailing
spaces.  u2 is the length of the modified string.

'/string'       c-addr1 u1 n -- c-addr2 u2        string       "slash-string"
   Adjust the string specified by c-addr1, u1 to remove n characters
from the start of the string.

'bounds'       addr u -- addr+u addr         gforth       "bounds"
   Given a memory block represented by starting address addr and length
u in aus, produce the end address addr+u and the start address in the
right order for 'u+do' or '?do'.

'pad'       -- c-addr         core-ext       "pad"
   C-ADDR is the address of a transient region that can be used as
temporary data storage.  At least 84 characters of space is available.

5.8 Control Structures
======================

Control structures in Forth cannot be used interpretively, only in a
colon definition(1).  We do not like this limitation, but have not seen
a satisfying way around it yet, although many schemes have been
proposed.

   ---------- Footnotes ----------

   (1) To be precise, they have no interpretation semantics (*note
Interpretation and Compilation Semantics::).

5.8.1 Selection
---------------

     flag
     IF
       code
     ENDIF

   If flag is non-zero (as far as 'IF' etc.  are concerned, a cell with
any bit set represents truth) code is executed.

     flag
     IF
       code1
     ELSE
       code2
     ENDIF

   If FLAG is true, code1 is executed, otherwise code2 is executed.

   You can use 'THEN' instead of 'ENDIF'.  Indeed, 'THEN' is standard,
and 'ENDIF' is not, although it is quite popular.  We recommend using
'ENDIF', because it is less confusing for people who also know other
languages (and is not prone to reinforcing negative prejudices against
Forth in these people).  Adding 'ENDIF' to a system that only supplies
'THEN' is simple:
     : ENDIF   POSTPONE then ; immediate

   [According to 'Webster's New Encyclopedic Dictionary', "then (adv.)"
has the following meanings:
     ...  2b: following next after in order ...  3d: as a necessary
     consequence (if you were there, then you saw them).
   Forth's 'THEN' has the meaning 2b, whereas 'THEN' in Pascal and many
other programming languages has the meaning 3d.]

   Gforth also provides the words '?DUP-IF' and '?DUP-0=-IF', so you can
avoid using '?dup'.  Using these alternatives is also more efficient
than using '?dup'.  Definitions in Standard Forth for 'ENDIF', '?DUP-IF'
and '?DUP-0=-IF' are provided in 'compat/control.fs'.

     x
     CASE
       x1 OF code1 ENDOF
       x2 OF code2 ENDOF
       ...
       ( x ) default-code ( x )
     ENDCASE ( )

   Executes the first codei, where the xi is equal to x.  If no xi
matches, the optional default-code is executed.  The optional default
case can be added by simply writing the code after the last 'ENDOF'.  It
may use x, which is on top of the stack, but must not consume it.  The
value x is consumed by this construction (either by an 'OF' that
matches, or by the 'ENDCASE', if no OF matches).  Example:

     : num-name ( n -- c-addr u )
      case
        0 of s" zero " endof
        1 of s" one "  endof
        2 of s" two "  endof
        \ default case:
        s" other number"
        rot \ get n on top so ENDCASE can drop it
      endcase ;

   You can also use (the non-standard) '?of' to use 'case' as a general
selection structure for more than two alternatives.  '?Of' takes a flag.
Example:

     : sgn ( n1 -- n2 )
         \ sign function
         case
     	dup 0< ?of drop -1 endof
     	dup 0> ?of drop 1 endof
     	dup \ n1=0 -> n2=0; dup an item, to be consumed by ENDCASE
         endcase ;

   Programming style note: To keep the code understandable, you should
ensure that you change the stack in the same way (wrt.  number and types
of stack items consumed and pushed) on all paths through a selection
structure.

5.8.2 Simple Loops
------------------

     BEGIN
       code1
       flag
     WHILE
       code2
     REPEAT

   code1 is executed and flag is computed.  If it is true, code2 is
executed and the loop is restarted; If flag is false, execution
continues after the 'REPEAT'.

     BEGIN
       code
       flag
     UNTIL

   code is executed.  The loop is restarted if 'flag' is false.

   Programming style note: To keep the code understandable, a complete
iteration of the loop should not change the number and types of the
items on the stacks.

     BEGIN
       code
     AGAIN

   This is an endless loop.

5.8.3 Counted Loops
-------------------

The basic counted loop is:
     limit start
     ?DO
       body
     LOOP

   This performs one iteration for every integer, starting from start
and up to, but excluding limit.  The counter, or index, can be accessed
with 'i'.  For example, the loop:
     10 0 ?DO
       i .
     LOOP
prints '0 1 2 3 4 5 6 7 8 9'

   The index of the innermost loop can be accessed with 'i', the index
of the next loop with 'j', and the index of the third loop with 'k'.

'i'       R:n -- R:n n        core       "i"

'j'       R:w R:w1 R:w2 -- w R:w R:w1 R:w2        core       "j"

'k'       R:w R:w1 R:w2 R:w3 R:w4 -- w R:w R:w1 R:w2 R:w3 R:w4        gforth       "k"

   The loop control data are kept on the return stack, so there are some
restrictions on mixing return stack accesses and counted loop words.  In
particuler, if you put values on the return stack outside the loop, you
cannot read them inside the loop(1).  If you put values on the return
stack within a loop, you have to remove them before the end of the loop
and before accessing the index of the loop.

   There are several variations on the counted loop:

   * 'LEAVE' leaves the innermost counted loop immediately; execution
     continues after the associated 'LOOP' or 'NEXT'.  For example:

          10 0 ?DO  i DUP . 3 = IF LEAVE THEN LOOP
     prints '0 1 2 3'

   * 'UNLOOP' prepares for an abnormal loop exit, e.g., via 'EXIT'.
     'UNLOOP' removes the loop control parameters from the return stack
     so 'EXIT' can get to its return address.  For example:

          : demo 10 0 ?DO i DUP . 3 = IF UNLOOP EXIT THEN LOOP ." Done" ;
     prints '0 1 2 3'

   * If start is greater than limit, a '?DO' loop is entered (and 'LOOP'
     iterates until they become equal by wrap-around arithmetic).  This
     behaviour is usually not what you want.  Therefore, Gforth offers
     '+DO' and 'U+DO' (as replacements for '?DO'), which do not enter
     the loop if start is greater than limit; '+DO' is for signed loop
     parameters, 'U+DO' for unsigned loop parameters.

   * '?DO' can be replaced by 'DO'.  'DO' always enters the loop,
     independent of the loop parameters.  Do not use 'DO', even if you
     know that the loop is entered in any case.  Such knowledge tends to
     become invalid during maintenance of a program, and then the 'DO'
     will make trouble.

   * 'LOOP' can be replaced with 'n +LOOP'; this updates the index by n
     instead of by 1.  The loop is terminated when the border between
     limit-1 and limit is crossed.  E.g.:

          4 0 +DO  i .  2 +LOOP
     prints '0 2'

          4 1 +DO  i .  2 +LOOP
     prints '1 3'

   * The behaviour of 'n +LOOP' is peculiar when n is negative:

          -1 0 ?DO  i .  -1 +LOOP
     prints '0 -1'

          0 0 ?DO  i .  -1 +LOOP
     prints nothing.

     Therefore we recommend avoiding 'n +LOOP' with negative n.  One
     alternative is 'u -LOOP', which reduces the index by u each
     iteration.  The loop is terminated when the border between limit+1
     and limit is crossed.  Gforth also provides '-DO' and 'U-DO' for
     down-counting loops.  E.g.:

          -2 0 -DO  i .  1 -LOOP
     prints '0 -1'

          -1 0 -DO  i .  1 -LOOP
     prints '0'

          0 0 -DO  i .  1 -LOOP
     prints nothing.

   Unfortunately, '+DO', 'U+DO', '-DO', 'U-DO' and '-LOOP' are not
defined in Standard Forth.  However, an implementation for these words
that uses only standard words is provided in 'compat/loops.fs'.

   Another counted loop is:
     n
     FOR
       body
     NEXT
   This is the preferred loop of native code compiler writers who are
too lazy to optimize '?DO' loops properly.  This loop structure is not
defined in Standard Forth.  In Gforth, this loop iterates n+1 times; 'i'
produces values starting with n and ending with 0.  Other Forth systems
may behave differently, even if they support 'FOR' loops.  To avoid
problems, don't use 'FOR' loops.

   ---------- Footnotes ----------

   (1) well, not in a way that is portable.

5.8.4 'Begin' loops with multiple exits
---------------------------------------

For counted loops, you can use 'leave' in several places.  For 'begin'
loops, you have the following options:

   Use 'exit' (possibly several times) in the loop to leave not just the
loop, but the whole colon definition.  E.g.,:

     : foo
       begin
         condition1 while
           condition2 if
             exit-code2 exit then
           condition3 if
             exit-code3 exit then
         ...
       repeat
       exit-code1 ;

   The disadvantage of this approach is that, if you want to have some
common code afterwards, you either have to wrap 'foo' in another word
that contains the common code, or you have to call the common code
several times, from each exit-code.

   Another approach is to use several 'while's in a 'begin' loop.  You
have to append a 'then' behind the loop for every additional 'while'.
E.g.,;

     begin
       condition1 while
         condition2 while
           condition3 while
     again then then then

   Here I used 'again' at the end of the loop so that I would have a
'then' for each 'while'; 'repeat' would result in one less 'then', but
otherwise the same behaviour.  For an explanation of why this works,
*Note Arbitrary control structures::.

   We can have common code afterwards, but, as presented above, we
cannot have different exit-codes for the different exits.  You can have
these different exit-codes, as follows:

     begin
       condition1 while
         condition2 while
           condition3 while
     again then exit-code3
     else exit-code2 then
     else exit-code1 then

   This is relatively hard to comprehend, because the exit-codes are
relatively far from the exit conditions (it does not help that we are
not used to such control structures, either).

5.8.5 General control structures with 'case'
--------------------------------------------

Gforth provides an extended 'case' that solves the problems of the
multi-exit loops discussed above, and offers additional options.  You
can find a portable implementation of this extended 'case' in
'compat/caseext.fs'.

   There are three additional words in the extension.  The first is
'?of' which allows general tests (rather than just testing for equality)
in a 'case'; e.g.,

     : sgn ( n -- -1|0|1 )
       ( n ) case
         dup 0 < ?of drop -1 endof
         dup 0 > ?of drop 1  endof
         \ otherwise leave the 0 on the stack
       0 endcase ;

   Note that 'endcase' drops a value, which works fine much of the time
with 'of', but usually not with '?of', so we leave a 0 on the stack for
'endcase' to drop.  The n that is passed into 'sgn' is also 0 if neither
'?of' triggers, and that is then passed out.

   The second additional word is 'next-case', which allows turning
'case' into a loop.  Our triple-exit loop becomes:

     case
       condition1 ?of exit-code1 endof
       condition2 ?of exit-code2 endof
       condition3 ?of exit-code3 endof
       ...
     next-case
     common code afterwards

   As you can see, this solves both problems of the variants discussed
above (*note BEGIN loops with multiple exits::).  Note that 'next-case'
does not drop a value, unlike 'endcase'.(1)

   The last additional word is 'contof', which is used instead of
'endof' and starts the next iteration instead of leaving the loop.  This
can be used in ways similar to Dijkstra's guarded command do, e.g.:

     : gcd ( n1 n2 -- n )
         case
             2dup > ?of tuck - contof
             2dup < ?of over - contof
         endcase ;

   Here the two '?of's have different ways of continuing the loop; when
neither '?of' triggers, the two numbers are equal and are the gcd.
'Endcase' drops one of them, leaving the other as n.

   You can also combine these words.  Here's an example that uses each
of the 'case' words once, except 'endcase':

     : collatz ( u -- )
         \ print the 3n+1 sequence starting at u until we reach 1
         case
             dup .
             1 of endof
             dup 1 and ?of 3 * 1+ contof
             2/
         next-case ;

   This example keeps the current value of the sequence on the stack.
If it is 1, the 'of' triggers, drops the value, and leaves the 'case'
structure.  For odd numbers, the '?of' triggers, computes 3n+1, and
starts the next iteration with 'contof'.  Otherwise, if the number is
even, it is divided by 2, and the loop is restarted with 'next-case'.

   ---------- Footnotes ----------

   (1) 'Next-case' has a '-', unlike the other 'case' words, because VFX
Forth contains a 'nextcase' that drops a value.

5.8.6 Arbitrary control structures
----------------------------------

Standard Forth permits and supports using control structures in a
non-nested way.  Information about incomplete control structures is
stored on the control-flow stack.  This stack may be implemented on the
Forth data stack, and this is what we have done in Gforth.

   An orig entry represents an unresolved forward branch, a dest entry
represents a backward branch target.  A few words are the basis for
building any control structure possible (except control structures that
need storage, like calls, coroutines, and backtracking).

'IF'       compilation -- orig ; run-time f --         core       "IF"
   At run-time, if f=0, execution continues after the 'THEN' (or 'ELSE')
that consumes the orig, otherwise right after the 'IF' (*note
Selection::).

'AHEAD'       compilation -- orig ; run-time --         tools-ext       "AHEAD"
   At run-time, execution continues after the 'THEN' that consumes the
orig.

'THEN'       compilation orig -- ; run-time --         core       "THEN"
   The 'IF', 'AHEAD', 'ELSE' or 'WHILE' that pushed orig jumps right
after the 'THEN' (*note Selection::).

'BEGIN'       compilation -- dest ; run-time --         core       "BEGIN"
   The 'UNTIL', 'AGAIN' or 'REPEAT' that consumes the dest jumps right
behind the 'BEGIN' (*note Simple Loops::).

'UNTIL'       compilation dest -- ; run-time f --         core       "UNTIL"
   At run-time, if f=0, execution continues after the 'BEGIN' that
produced dest, otherwise right after the 'UNTIL' (*note Simple Loops::).

'AGAIN'       compilation dest -- ; run-time --         core-ext       "AGAIN"
   At run-time, execution continues after the 'BEGIN' that produced the
dest (*note Simple Loops::).

'CS-PICK'       orig0/dest0 orig1/dest1 ... origu/destu u -- ... orig0/dest0         tools-ext       "c-s-pick"

'CS-ROLL'       destu/origu .. dest0/orig0 u -- .. dest0/orig0 destu/origu         tools-ext       "c-s-roll"

'CS-DROP'       dest --         gforth       "CS-DROP"

   The Standard words 'CS-PICK' and 'CS-ROLL' allow you to manipulate
the control-flow stack in a portable way.  Without them, you would need
to know how many stack items are occupied by a control-flow entry (many
systems use one cell.  In Gforth they currently take three, but this may
change in the future).

   'CS-PICK' can only pick a dest and 'CS-DROP' can only drop a dest,
because an orig must be resolved exactly once.

   Some standard control structure words are built from these words:

'ELSE'       compilation orig1 -- orig2 ; run-time --         core       "ELSE"
   At run-time, execution continues after the 'THEN' that consumes the
orig; the 'IF', 'AHEAD', 'ELSE' or 'WHILE' that pushed orig1 jumps right
after the 'ELSE'.  (*note Selection::).

'WHILE'       compilation dest -- orig dest ; run-time f --         core       "WHILE"
   At run-time, if f=0, execution continues after the 'REPEAT' (or
'THEN' or 'ELSE') that consumes the orig, otherwise right after the
'WHILE' (*note Simple Loops::).

'REPEAT'       compilation orig dest -- ; run-time --         core       "REPEAT"
   At run-time, execution continues after the 'BEGIN' that produced the
dest; the 'WHILE', 'IF', 'AHEAD' or 'ELSE' that pushed orig jumps right
after the 'REPEAT'.  (*note Simple Loops::).

Gforth adds some more control-structure words:

'ENDIF'       compilation orig -- ; run-time --         gforth       "ENDIF"
   Same as 'THEN'.

'?dup-IF'       compilation -- orig ; run-time n -- n|         gforth       "question-dupe-if"
   This is the preferred alternative to the idiom "'?DUP IF'", since it
can be better handled by tools like stack checkers.  Besides, it's
faster.

'?DUP-0=-IF'       compilation -- orig ; run-time n -- n|         gforth       "question-dupe-zero-equals-if"

Counted loop words constitute a separate group of words:

'?DO'       compilation -- do-sys ; run-time w1 w2 -- | loop-sys         core-ext       "question-do"
   *Note Counted Loops::.

'+DO'       compilation -- do-sys ; run-time n1 n2 -- | loop-sys         gforth       "plus-do"
   *Note Counted Loops::.

'U+DO'       compilation -- do-sys ; run-time u1 u2 -- | loop-sys         gforth       "u-plus-do"
   *Note Counted Loops::.

'-DO'       compilation -- do-sys ; run-time n1 n2 -- | loop-sys         gforth       "minus-do"
   *Note Counted Loops::.

'U-DO'       compilation -- do-sys ; run-time u1 u2 -- | loop-sys         gforth       "u-minus-do"
   *Note Counted Loops::.

'DO'       compilation -- do-sys ; run-time w1 w2 -- loop-sys         core       "DO"
   *Note Counted Loops::.

'FOR'       compilation -- do-sys ; run-time u -- loop-sys         gforth       "FOR"
   *Note Counted Loops::.

'LOOP'       compilation do-sys -- ; run-time loop-sys1 -- | loop-sys2         core       "LOOP"
   *Note Counted Loops::.

'+LOOP'       compilation do-sys -- ; run-time loop-sys1 n -- | loop-sys2         core       "plus-loop"
   *Note Counted Loops::.

'-LOOP'       compilation do-sys -- ; run-time loop-sys1 u -- | loop-sys2         gforth       "minus-loop"
   *Note Counted Loops::.

'NEXT'       compilation do-sys -- ; run-time loop-sys1 -- | loop-sys2         gforth       "NEXT"
   *Note Counted Loops::.

'LEAVE'       compilation -- ; run-time loop-sys --         core       "LEAVE"
   *Note Counted Loops::.

'?LEAVE'       compilation -- ; run-time f | f loop-sys --         gforth       "question-leave"
   *Note Counted Loops::.

'unloop'       R:w1 R:w2 --        core       "unloop"

'DONE'       compilation orig -- ; run-time --         gforth       "DONE"
   resolves all LEAVEs up to the compilaton orig (from a BEGIN)

   The standard does not allow using 'CS-PICK' and 'CS-ROLL' on do-sys.
Gforth allows it, but it's your job to ensure that for every '?DO' etc.
there is exactly one 'UNLOOP' on any path through the definition ('LOOP'
etc.  compile an 'UNLOOP' on the fall-through path).  Also, you have to
ensure that all 'LEAVE's are resolved (by using one of the loop-ending
words or 'DONE').

Another group of control structure words are:

'case'       compilation  -- case-sys ; run-time  --         core-ext       "case"
   Start a 'case' structure.

'endcase'       compilation case-sys -- ; run-time x --         core-ext       "end-case"
   Finish the 'case' structure; drop x, and continue behind the
'endcase'.  Dropping x is useful in the original 'case' construct (with
only 'of's), but you may have to supply an x in other cases (especially
when using '?of').

'next-case'       compilation case-sys -- ; run-time --         gforth       "next-case"
   Restart the 'case' loop by jumping to the matching 'case'.  Note that
'next-case' does not drop a cell, unlike 'endcase'.

'of'       compilation  -- of-sys ; run-time x1 x2 -- |x1         core-ext       "of"
   If x1=x2, continue (dropping both); otherwise, leave x1 on the stack
and jump behind 'endof' or 'contof'.

'?of'       compilation  -- of-sys ; run-time  f --         gforth       "question-of"
   If f is true, continue; otherwise, jump behind 'endof' or 'contof'.

'endof'       compilation case-sys1 of-sys -- case-sys2 ; run-time  --         core-ext       "end-of"
   Exit the enclosing 'case' structure by jumping behind
'endcase'/'next-case'.

'contof'       compilation case-sys1 of-sys -- case-sys2 ; run-time  --         gforth       "cont-of"
   Restart the 'case' loop by jumping to the enclosing 'case'.

   Internally, of-sys is an 'orig'; and case-sys is a cell and some
stack-depth information, 0 or more 'orig's, and a 'dest'.

5.8.6.1 Programming Style
.........................

In order to ensure readability we recommend that you do not create
arbitrary control structures directly, but define new control structure
words for the control structure you want and use these words in your
program.  For example, instead of writing:

     BEGIN
       ...
     IF [ 1 CS-ROLL ]
       ...
     AGAIN THEN

we recommend defining control structure words, e.g.,

     : WHILE ( DEST -- ORIG DEST )
      POSTPONE IF
      1 CS-ROLL ; immediate

     : REPEAT ( orig dest -- )
      POSTPONE AGAIN
      POSTPONE THEN ; immediate

and then using these to create the control structure:

     BEGIN
       ...
     WHILE
       ...
     REPEAT

   That's much easier to read, isn't it?  Of course, 'REPEAT' and
'WHILE' are predefined, so in this example it would not be necessary to
define them.

5.8.7 Calls and returns
-----------------------

A definition can be called simply be writing the name of the definition
to be called.  Normally a definition is invisible during its own
definition.  If you want to write a directly recursive definition, you
can use 'recursive' to make the current definition visible, or 'recurse'
to call the current definition directly.

'recursive'       compilation -- ; run-time --         gforth       "recursive"
   Make the current definition visible, enabling it to call itself
recursively.

'recurse'              unknown       "recurse"
   Alias to the current definition.

     Programming style note: I prefer using 'recursive' to 'recurse',
     because calling the definition by name is more descriptive (if the
     name is well-chosen) than the somewhat cryptic 'recurse'.  E.g., in
     a quicksort implementation, it is much better to read (and think)
     "now sort the partitions" than to read "now do a recursive call".

   For mutual recursion, use 'Defer'red words, like this:

     Defer foo

     : bar ( ... -- ... )
      ... foo ... ;

     :noname ( ... -- ... )
      ... bar ... ;
     IS foo

   Deferred words are discussed in more detail in *note Deferred
Words::.

   The current definition returns control to the calling definition when
the end of the definition is reached or 'EXIT' is encountered.

'EXIT'       compilation -- ; run-time nest-sys --         core       "EXIT"
   Return to the calling definition; usually used as a way of forcing an
early return from a definition.  Before 'EXIT'ing you must clean up the
return stack and 'UNLOOP' any outstanding '?DO'...'LOOP's.  Use ';s' for
a tickable word that behaves like 'exit' in the absence of locals.

';s'       R:w --        gforth       "semis"
   The primitive compiled by 'EXIT'.

5.8.8 Exception Handling
------------------------

If a word detects an error condition that it cannot handle, it can
'throw' an exception.  In the simplest case, this will terminate your
program, and report an appropriate error.

'throw'       y1 .. ym nerror -- y1 .. ym / z1 .. zn error         exception       "throw"
   If nerror is 0, drop it and continue.  Otherwise, transfer control to
the next dynamically enclosing exception handler, reset the stacks
accordingly, and push nerror.

   'Throw' consumes a cell-sized error number on the stack.  There are
some predefined error numbers in Standard Forth (see 'errors.fs').  In
Gforth (and most other systems) you can use the iors produced by various
words as error numbers (e.g., a typical use of 'allocate' is 'allocate
throw').  Gforth also provides the word 'exception' to define your own
error numbers (with decent error reporting); a Standard Forth version of
this word (but without the error messages) is available in
'compat/except.fs'.  And finally, you can use your own error numbers
(anything outside the range -4095..0), but won't get nice error
messages, only numbers.  For example, try:

     -10 throw                    \ Standard defined
     -267 throw                   \ system defined
     s" my error" exception throw \ user defined
     7 throw                      \ arbitrary number

'exception'       addr u -- n         gforth       "exception"
   N is a previously unused 'throw' value in the range (-4095...-256).
Consecutive calls to 'exception' return consecutive decreasing numbers.
Gforth uses the string ADDR U as an error message.

   A common idiom to 'THROW' a specific error if a flag is true is this:

     ( flag ) 0<> errno and throw

   Your program can provide exception handlers to catch exceptions.  An
exception handler can be used to correct the problem, or to clean up
some data structures and just throw the exception to the next exception
handler.  Note that 'throw' jumps to the dynamically innermost exception
handler.  The system's exception handler is outermost, and just prints
an error and restarts command-line interpretation (or, in batch mode
(i.e., while processing the shell command line), leaves Gforth).

   The Standard Forth way to catch exceptions is 'catch':

'catch'       ... xt -- ... n         exception       "catch"

'nothrow'       --         gforth       "nothrow"
   Use this (or the standard sequence '['] false catch 2drop') after a
'catch' or 'endtry' that does not rethrow; this ensures that the next
'throw' will record a backtrace.

   The most common use of exception handlers is to clean up the state
when an error happens.  E.g.,

     base @ >r hex \ actually the HEX should be inside foo to protect
                   \ against exceptions between HEX and CATCH
     ['] foo catch ( nerror|0 )
     r> base !
     ( nerror|0 ) throw \ pass it on

   A use of 'catch' for handling the error 'myerror' might look like
this:

     ['] foo catch
     CASE
       myerror OF ... ( do something about it ) nothrow ENDOF
       dup throw \ default: pass other errors on, do nothing on non-errors
     ENDCASE

   Having to wrap the code into a separate word is often cumbersome,
therefore Gforth provides an alternative syntax:

     TRY
       code1
       IFERROR
         code2
       THEN
       code3
     ENDTRY

   This performs code1.  If code1 completes normally, execution
continues with code3.  If there is an exception in code1 or before
'endtry', the stacks are reset to the depth during 'try', the throw
value is pushed on the data stack, and execution continues at code2, and
finally falls through to code3.

'try'       compilation  -- orig ; run-time  -- R:sys1         gforth       "try"
   Start an exception-catching region.

'endtry'       compilation  -- ; run-time  R:sys1 --         gforth       "endtry"
   End an exception-catching region.

'iferror'       compilation  orig1 -- orig2 ; run-time  --         gforth       "iferror"
   Starts the exception handling code (executed if there is an exception
between 'try' and 'endtry').  This part has to be finished with 'then'.

   If you don't need code2, you can write 'restore' instead of 'iferror
then':

     TRY
       code1
     RESTORE
       code3
     ENDTRY

   The cleanup example from above in this syntax:

     base @ { oldbase }
     TRY
       hex foo \ now the hex is placed correctly
       0       \ value for throw
     RESTORE
       oldbase base !
     ENDTRY
     throw

   An additional advantage of this variant is that an exception between
'restore' and 'endtry' (e.g., from the user pressing 'Ctrl-C') restarts
the execution of the code after 'restore', so the base will be restored
under all circumstances.

   However, you have to ensure that this code does not cause an
exception itself, otherwise the 'iferror'/'restore' code will loop.
Moreover, you should also make sure that the stack contents needed by
the 'iferror'/'restore' code exist everywhere between 'try' and
'endtry'; in our example this is achived by putting the data in a local
before the 'try' (you cannot use the return stack because the exception
frame (sys1) is in the way there).

   This kind of usage corresponds to Lisp's 'unwind-protect'.

   If you do not want this exception-restarting behaviour, you achieve
this as follows:

     TRY
       code1
     ENDTRY-IFERROR
       code2
     THEN

   If there is an exception in code1, then code2 is executed, otherwise
execution continues behind the 'then' (or in a possible 'else' branch).
This corresponds to the construct

     TRY
       code1
     RECOVER
       code2
     ENDTRY

   in Gforth before version 0.7.  So you can directly replace
'recover'-using code; however, we recommend that you check if it would
not be better to use one of the other 'try' variants while you are at
it.

   To ease the transition, Gforth provides two compatibility files:
'endtry-iferror.fs' provides the 'try ... endtry-iferror ... then'
syntax (but not 'iferror' or 'restore') for old systems;
'recover-endtry.fs' provides the 'try ... recover ... endtry' syntax on
new systems, so you can use that file as a stopgap to run old programs.
Both files work on any system (they just do nothing if the system
already has the syntax it implements), so you can unconditionally
'require' one of these files, even if you use a mix old and new systems.

'restore'       compilation  orig1 -- ; run-time  --         gforth       "restore"
   Starts restoring code, that is executed if there is an exception, and
if there is no exception.

'endtry-iferror'       compilation  orig1 -- orig2 ; run-time  R:sys1 --         gforth       "endtry-iferror"
   End an exception-catching region while starting exception-handling
code outside that region (executed if there is an exception between
'try' and 'endtry-iferror').  This part has to be finished with 'then'
(or 'else'...'then').

   Here's the error handling example:

     TRY
       foo
     ENDTRY-IFERROR
       CASE
         myerror OF ... ( do something about it ) nothrow ENDOF
         throw \ pass other errors on
       ENDCASE
     THEN

   Programming style note: As usual, you should ensure that the stack
depth is statically known at the end: either after the 'throw' for
passing on errors, or after the 'ENDTRY' (or, if you use 'catch', after
the end of the selection construct for handling the error).

   There are two alternatives to 'throw': 'Abort"' is conditional and
you can provide an error message.  'Abort' just produces an "Aborted"
error.

   The problem with these words is that exception handlers cannot
differentiate between different 'abort"'s; they just look like '-2
throw' to them (the error message cannot be accessed by standard
programs).  Similar 'abort' looks like '-1 throw' to exception handlers.

'ABORT"'       compilation 'ccc"' -- ; run-time f --         core,exception-ext       "abort-quote"
   If any bit of f is non-zero, perform the function of '-2 throw',
displaying the string ccc if there is no exception frame on the
exception stack.

'abort'       ?? -- ??         core,exception-ext       "abort"
   '-1 throw'.

   For problems that are not that awful that you need to abort
execution, you can just display a warning.  The variable 'warnings'
allows to tune how many warnings you see.

'WARNING"'       compilation 'ccc"' -- ; run-time f --         gforth       "WARNING""
   if f is non-zero, display the string ccc as warning message.

'warnings'       -- addr         gforth       "warnings"
   set warnings level to
'0'
     turns warnings off
'-1'
     turns normal warnings on
'-2'
     turns beginner warnngs on
'-3'
     pedantic warnings on
'-4'
     turns warnings into errors (including beginner warnings)

5.9 Defining Words
==================

Defining words are used to extend Forth by creating new entries in the
dictionary.

5.9.1 'CREATE'
--------------

Defining words are used to create new entries in the dictionary.  The
simplest defining word is 'CREATE'.  'CREATE' is used like this:

     CREATE new-word1

   'CREATE' is a parsing word, i.e., it takes an argument from the input
stream ('new-word1' in our example).  It generates a dictionary entry
for 'new-word1'.  When 'new-word1' is executed, all that it does is
leave an address on the stack.  The address represents the value of the
data space pointer ('HERE') at the time that 'new-word1' was defined.
Therefore, 'CREATE' is a way of associating a name with the address of a
region of memory.

'Create'       "name" --         core       "Create"

   Note that Standard Forth guarantees only for 'create' that its body
is in dictionary data space (i.e., where 'here', 'allot' etc.  work,
*note Dictionary allocation::).  Also, in Standard Forth only 'create'd
words can be modified with 'does>' (*note User-defined Defining
Words::).  And in Standard Forth '>body' can only be applied to
'create'd words.

   By extending this example to reserve some memory in data space, we
end up with something like a variable.  Here are two different ways to
do it:

     CREATE new-word2 1 cells allot  \ reserve 1 cell - initial value undefined
     CREATE new-word3 4 ,            \ reserve 1 cell and initialise it (to 4)

   The variable can be examined and modified using '@' ("fetch") and '!'
("store") like this:

     new-word2 @ .      \ get address, fetch from it and display
     1234 new-word2 !   \ new value, get address, store to it

   A similar mechanism can be used to create arrays.  For example, an
80-character text input buffer:

     CREATE text-buf 80 chars allot

     text-buf 0 chars + c@ \ the 1st character (offset 0)
     text-buf 3 chars + c@ \ the 4th character (offset 3)

   You can build arbitrarily complex data structures by allocating
appropriate areas of memory.  For further discussions of this, and to
learn about some Gforth tools that make it easier, *Note Structures::.

5.9.2 Variables
---------------

The previous section showed how a sequence of commands could be used to
generate a variable.  As a final refinement, the whole code sequence can
be wrapped up in a defining word (pre-empting the subject of the next
section), making it easier to create new variables:

     : myvariableX ( "name" -- a-addr ) CREATE 1 cells allot ;
     : myvariable0 ( "name" -- a-addr ) CREATE 0 , ;

     myvariableX foo \ variable foo starts off with an unknown value
     myvariable0 joe \ whilst joe is initialised to 0

     45 3 * foo !   \ set foo to 135
     1234 joe !     \ set joe to 1234
     3 joe +!       \ increment joe by 3.. to 1237

   Not surprisingly, there is no need to define 'myvariable', since
Forth already has a definition 'Variable'.  Standard Forth does not
guarantee that a 'Variable' is initialised when it is created (i.e., it
may behave like 'myvariableX').  In contrast, Gforth's 'Variable'
initialises the variable to 0 (i.e., it behaves exactly like
'myvariable0').  Forth also provides '2Variable' and 'fvariable' for
double and floating-point variables, respectively -- they are initialised
to 0.  and 0e in Gforth.  If you use a 'Variable' to store a boolean,
you can use 'on' and 'off' to toggle its state.

'Variable'       "name" --         core       "Variable"

'2Variable'       "name" --         double       "two-variable"

'fvariable'       "name" --         float       "f-variable"

   The defining word 'User' behaves in the same way as 'Variable'.  The
difference is that it reserves space in user (data) space rather than
normal data space.  In a Forth system that has a multi-tasker, each task
has its own set of user variables.

'User'       "name" --         gforth       "User"

5.9.3 Constants
---------------

'Constant' allows you to declare a fixed value and refer to it by name.
For example:

     12 Constant INCHES-PER-FOOT
     3E+08 fconstant SPEED-O-LIGHT

   A 'Variable' can be both read and written, so its run-time behaviour
is to supply an address through which its current value can be
manipulated.  In contrast, the value of a 'Constant' cannot be changed
once it has been declared(1) so it's not necessary to supply the address
-- it is more efficient to return the value of the constant directly.
That's exactly what happens; the run-time effect of a constant is to put
its value on the top of the stack (You can find one way of implementing
'Constant' in *note User-defined Defining Words::).

   Forth also provides '2Constant' and 'fconstant' for defining double
and floating-point constants, respectively.

'Constant'       w "name" --         core       "Constant"
   Define a constant name with value w.

   name execution: -- w

'2Constant'       w1 w2 "name" --         double       "two-constant"

'fconstant'       r "name" --         float       "f-constant"

   Constants in Forth behave differently from their equivalents in other
programming languages.  In other languages, a constant (such as an EQU
in assembler or a #define in C) only exists at compile-time; in the
executable program the constant has been translated into an absolute
number and, unless you are using a symbolic debugger, it's impossible to
know what abstract thing that number represents.  In Forth a constant
has an entry in the header space and remains there after the code that
uses it has been defined.  In fact, it must remain in the dictionary
since it has run-time duties to perform.  For example:

     12 Constant INCHES-PER-FOOT
     : FEET-TO-INCHES ( n1 -- n2 ) INCHES-PER-FOOT * ;

   When 'FEET-TO-INCHES' is executed, it will in turn execute the xt
associated with the constant 'INCHES-PER-FOOT'.  If you use 'see' to
decompile the definition of 'FEET-TO-INCHES', you can see that it makes
a call to 'INCHES-PER-FOOT'.  Some Forth compilers attempt to optimise
constants by in-lining them where they are used.  You can force Gforth
to in-line a constant like this:

     : FEET-TO-INCHES ( n1 -- n2 ) [ INCHES-PER-FOOT ] LITERAL * ;

   If you use 'see' to decompile this version of 'FEET-TO-INCHES', you
can see that 'INCHES-PER-FOOT' is no longer present.  To understand how
this works, read *note Interpret/Compile states::, and *note Literals::.

   In-lining constants in this way might improve execution time
fractionally, and can ensure that a constant is now only referenced at
compile-time.  However, the definition of the constant still remains in
the dictionary.  Some Forth compilers provide a mechanism for
controlling a second dictionary for holding transient words such that
this second dictionary can be deleted later in order to recover memory
space.  However, there is no standard way of doing this.

   ---------- Footnotes ----------

   (1) Well, often it can be -- but not in a Standard, portable way.
It's safer to use a 'Value' (read on).

5.9.4 Values
------------

A 'Value' behaves like a 'Constant', but it can be changed.  'TO' is a
parsing word that changes a 'Values'.  In Gforth (not in Standard Forth)
you can access (and change) a 'value' also with '>body'.

   Here are some examples:

     12 Value APPLES     \ Define APPLES with an initial value of 12
     34 TO APPLES        \ Change the value of APPLES. TO is a parsing word
     1 ' APPLES >body +! \ Increment APPLES.  Non-standard usage.
     APPLES              \ puts 35 on the top of the stack.

'Value'       w "name" --         core-ext       "Value"

'TO'       value "name" --         core-ext       "TO"
   changes the value of NAME to VALUE

'+TO'       value "name" --         gforth       "+TO"
   increments the value of NAME by VALUE

'addr'       "name" -- addr         gforth       "addr"
   provides the address ADDR of the value stored in NAME

5.9.5 Colon Definitions
-----------------------

     : name ( ... -- ... )
         word1 word2 word3 ;

Creates a word called 'name' that, upon execution, executes 'word1 word2
word3'.  'name' is a "(colon) definition".

   The explanation above is somewhat superficial.  For simple examples
of colon definitions see *note Your first definition::.  For an in-depth
discussion of some of the issues involved, *Note Interpretation and
Compilation Semantics::.

':'       "name" -- colon-sys         core       "colon"

';'       compilation colon-sys -- ; run-time nest-sys         core       "semicolon"

5.9.6 Anonymous Definitions
---------------------------

Sometimes you want to define an "anonymous word"; a word without a name.
You can do this with:

':noname'       -- xt colon-sys         core-ext       "colon-no-name"

   This leaves the execution token for the word on the stack after the
closing ';'.  Here's an example in which a deferred word is initialised
with an 'xt' from an anonymous colon definition:

     Defer deferred
     :noname ( ... -- ... )
       ... ;
     IS deferred

Gforth provides an alternative way of doing this, using two separate
words:

'noname'       --         gforth       "noname"
   The next defined word will be anonymous.  The defining word will
leave the input stream alone.  The xt of the defined word will be given
by 'latestxt'.

'latestxt'       -- xt         gforth       "latestxt"
   xt is the execution token of the last word defined.

The previous example can be rewritten using 'noname' and 'latestxt':

     Defer deferred
     noname : ( ... -- ... )
       ... ;
     latestxt IS deferred

'noname' works with any defining word, not just ':'.

   'latestxt' also works when the last word was not defined as 'noname'.
It does not work for combined words, though.  It also has the useful
property that is is valid as soon as the header for a definition has
been built.  Thus:

     latestxt . : foo [ latestxt . ] ; ' foo .

prints 3 numbers; the last two are the same.

5.9.7 Quotations
----------------

A quotation is an anonymous colon definition inside another colon
definition.  Quotations are useful when dealing with words that consume
an execution token, like 'catch' or 'outfile-execute'.  E.g.  consider
the following example of using 'outfile-execute' (*note Redirection::):

     : some-warning ( n -- )
         cr ." warning# " . ;

     : print-some-warning ( n -- )
         ['] some-warning stderr outfile-execute ;

   Here we defined 'some-warning' as a helper word whose xt we could
pass to outfile-execute.  Instead, we can use a quotation to define such
a word anonymously inside 'print-some-warning':

     : print-some-warning ( n -- )
       [: cr ." warning# " . ;] stderr outfile-execute ;

   The quotation is bouded by '[:' and ';]'.  It produces an execution
token at run-time.

'[:'       compile-time: -- quotation-sys flag colon-sys         gforth       "bracket-colon"
   Starts a quotation

';]'       compile-time: quotation-sys -- ; run-time: -- xt         gforth       "semi-bracket"
   ends a quotation

5.9.8 Supplying the name of a defined word
------------------------------------------

By default, a defining word takes the name for the defined word from the
input stream.  Sometimes you want to supply the name from a string.  You
can do this with:

'nextname'       c-addr u --         gforth       "nextname"
   The next defined word will have the name C-ADDR U; the defining word
will leave the input stream alone.

   For example:

     s" foo" nextname create

is equivalent to:

     create foo

'nextname' works with any defining word.

5.9.9 User-defined Defining Words
---------------------------------

You can create a new defining word by wrapping defining-time code around
an existing defining word and putting the sequence in a colon
definition.

   For example, suppose that you have a word 'stats' that gathers
statistics about colon definitions given the xt of the definition, and
you want every colon definition in your application to make a call to
'stats'.  You can define and use a new version of ':' like this:

     : stats ( xt -- ) DUP ." (Gathering statistics for " . ." )"
       ... ;  \ other code

     : my: : latestxt postpone literal ['] stats compile, ;

     my: foo + - ;

   When 'foo' is defined using 'my:' these steps occur:

   * 'my:' is executed.
   * The ':' within the definition (the one between 'my:' and
     'latestxt') is executed, and does just what it always does; it
     parses the input stream for a name, builds a dictionary header for
     the name 'foo' and switches 'state' from interpret to compile.
   * The word 'latestxt' is executed.  It puts the xt for the word that
     is being defined -- 'foo' -- onto the stack.
   * The code that was produced by 'postpone literal' is executed; this
     causes the value on the stack to be compiled as a literal in the
     code area of 'foo'.
   * The code '['] stats' compiles a literal into the definition of
     'my:'.  When 'compile,' is executed, that literal -- the execution
     token for 'stats' -- is layed down in the code area of 'foo' ,
     following the literal(1).
   * At this point, the execution of 'my:' is complete, and control
     returns to the text interpreter.  The text interpreter is in
     compile state, so subsequent text '+ -' is compiled into the
     definition of 'foo' and the ';' terminates the definition as
     always.

   You can use 'see' to decompile a word that was defined using 'my:'
and see how it is different from a normal ':' definition.  For example:

     : bar + - ;  \ like foo but using : rather than my:
     see bar
     : bar
       + - ;
     see foo
     : foo
       107645672 stats + - ;

     \ use ' foo . to show that 107645672 is the xt for foo

   You can use techniques like this to make new defining words in terms
of any existing defining word.

   If you want the words defined with your defining words to behave
differently from words defined with standard defining words, you can
write your defining word like this:

     : def-word ( "name" -- )
         CREATE code1
     DOES> ( ... -- ... )
         code2 ;

     def-word name

   This fragment defines a "defining word" 'def-word' and then executes
it.  When 'def-word' executes, it 'CREATE's a new word, 'name', and
executes the code code1.  The code code2 is not executed at this time.
The word 'name' is sometimes called a "child" of 'def-word'.

   When you execute 'name', the address of the body of 'name' is put on
the data stack and code2 is executed (the address of the body of 'name'
is the address 'HERE' returns immediately after the 'CREATE', i.e., the
address a 'create'd word returns by default).

   You can use 'def-word' to define a set of child words that behave
similarly; they all have a common run-time behaviour determined by
code2.  Typically, the code1 sequence builds a data area in the body of
the child word.  The structure of the data is common to all children of
'def-word', but the data values are specific -- and private -- to each
child word.  When a child word is executed, the address of its private
data area is passed as a parameter on TOS to be used and manipulated(2)
by code2.

   The two fragments of code that make up the defining words act (are
executed) at two completely separate times:

   * At define time, the defining word executes code1 to generate a
     child word
   * At child execution time, when a child word is invoked, code2 is
     executed, using parameters (data) that are private and specific to
     the child word.

   Another way of understanding the behaviour of 'def-word' and 'name'
is to say that, if you make the following definitions:
     : def-word1 ( "name" -- )
         CREATE code1 ;

     : action1 ( ... -- ... )
         code2 ;

     def-word1 name1

Then using 'name1 action1' is equivalent to using 'name'.

   The classic example is that you can define 'CONSTANT' in this way:

     : CONSTANT ( w "name" -- )
         CREATE ,
     DOES> ( -- w )
         @ ;

   When you create a constant with '5 CONSTANT five', a set of
define-time actions take place; first a new word 'five' is created, then
the value 5 is laid down in the body of 'five' with ','.  When 'five' is
executed, the address of the body is put on the stack, and '@' retrieves
the value 5.  The word 'five' has no code of its own; it simply contains
a data field and a pointer to the code that follows 'DOES>' in its
defining word.  That makes words created in this way very compact.

   The final example in this section is intended to remind you that
space reserved in 'CREATE'd words is data space and therefore can be
both read and written by a Standard program(3):

     : foo ( "name" -- )
         CREATE -1 ,
     DOES> ( -- )
         @ . ;

     foo first-word
     foo second-word

     123 ' first-word >BODY !

   If 'first-word' had been a 'CREATE'd word, we could simply have
executed it to get the address of its data field.  However, since it was
defined to have 'DOES>' actions, its execution semantics are to perform
those 'DOES>' actions.  To get the address of its data field it's
necessary to use ''' to get its xt, then '>BODY' to translate the xt
into the address of the data field.  When you execute 'first-word', it
will display '123'.  When you execute 'second-word' it will display
'-1'.

   In the examples above the stack comment after the 'DOES>' specifies
the stack effect of the defined words, not the stack effect of the
following code (the following code expects the address of the body on
the top of stack, which is not reflected in the stack comment).  This is
the convention that I use and recommend (it clashes a bit with using
locals declarations for stack effect specification, though).

   ---------- Footnotes ----------

   (1) Strictly speaking, the mechanism that 'compile,' uses to convert
an xt into something in the code area is implementation-dependent.  A
threaded implementation might spit out the execution token directly
whilst another implementation might spit out a native code sequence.

   (2) It is legitimate both to read and write to this data area.

   (3) Exercise: use this example as a starting point for your own
implementation of 'Value' and 'TO' -- if you get stuck, investigate the
behaviour of ''' and '[']'.

5.9.9.1 Applications of 'CREATE..DOES>'
.......................................

You may wonder how to use this feature.  Here are some usage patterns:

   When you see a sequence of code occurring several times, and you can
identify a meaning, you will factor it out as a colon definition.  When
you see similar colon definitions, you can factor them using
'CREATE..DOES>'.  E.g., an assembler usually defines several words that
look very similar:
     : ori, ( reg-target reg-source n -- )
         0 asm-reg-reg-imm ;
     : andi, ( reg-target reg-source n -- )
         1 asm-reg-reg-imm ;

This could be factored with:
     : reg-reg-imm ( op-code -- )
         CREATE ,
     DOES> ( reg-target reg-source n -- )
         @ asm-reg-reg-imm ;

     0 reg-reg-imm ori,
     1 reg-reg-imm andi,

   Another view of 'CREATE..DOES>' is to consider it as a crude way to
supply a part of the parameters for a word (known as "currying" in the
functional language community).  E.g., '+' needs two parameters.
Creating versions of '+' with one parameter fixed can be done like this:

     : curry+ ( n1 "name" -- )
         CREATE ,
     DOES> ( n2 -- n1+n2 )
         @ + ;

      3 curry+ 3+
     -2 curry+ 2-

5.9.9.2 The gory details of 'CREATE..DOES>'
...........................................

'DOES>'       compilation colon-sys1 -- colon-sys2         unknown       "DOES>"

   This means that you need not use 'CREATE' and 'DOES>' in the same
definition; you can put the 'DOES>'-part in a separate definition.  This
allows us to, e.g., select among different 'DOES>'-parts:
     : does1
     DOES> ( ... -- ... )
         ... ;

     : does2
     DOES> ( ... -- ... )
         ... ;

     : def-word ( ... -- ... )
         create ...
         IF
            does1
         ELSE
            does2
         ENDIF ;

   In this example, the selection of whether to use 'does1' or 'does2'
is made at definition-time; at the time that the child word is
'CREATE'd.

   In a standard program you can apply a 'DOES>'-part only if the last
word was defined with 'CREATE'.  In Gforth, the 'DOES>'-part will
override the behaviour of the last word defined in any case.  In a
standard program, you can use 'DOES>' only in a colon definition.  In
Gforth, you can also use it in interpretation state, in a kind of
one-shot mode; for example:
     CREATE name ( ... -- ... )
       initialization
     DOES>
       code ;

is equivalent to the standard:
     :noname
     DOES>
         code ;
     CREATE name EXECUTE ( ... -- ... )
         initialization

'>body'       xt -- a_addr         core       "to-body"
   Get the address of the body of the word represented by xt (the
address of the word's data field).

5.9.9.3 Advanced does> usage example
....................................

The MIPS disassembler ('arch/mips/disasm.fs') contains many words for
disassembling instructions, that follow a very repetetive scheme:

     :noname DISASM-OPERANDS s" INST-NAME" type ;
     ENTRY-NUM cells TABLE + !

   Of course, this inspires the idea to factor out the commonalities to
allow a definition like

     DISASM-OPERANDS ENTRY-NUM TABLE define-inst INST-NAME

   The parameters DISASM-OPERANDS and TABLE are usually correlated.
Moreover, before I wrote the disassembler, there already existed code
that defines instructions like this:

     ENTRY-NUM INST-FORMAT INST-NAME

   This code comes from the assembler and resides in
'arch/mips/insts.fs'.

   So I had to define the INST-FORMAT words that performed the scheme
above when executed.  At first I chose to use run-time code-generation:

     : INST-FORMAT ( entry-num "name" -- ; compiled code: addr w -- )
       :noname Postpone DISASM-OPERANDS
       name Postpone sliteral Postpone type Postpone ;
       swap cells TABLE + ! ;

   Note that this supplies the other two parameters of the scheme above.

   An alternative would have been to write this using 'create'/'does>':

     : INST-FORMAT ( entry-num "name" -- )
       here name string, ( entry-num c-addr ) \ parse and save "name"
       noname create , ( entry-num )
       latestxt swap cells TABLE + !
     does> ( addr w -- )
       \ disassemble instruction w at addr
       @ >r
       DISASM-OPERANDS
       r> count type ;

   Somehow the first solution is simpler, mainly because it's simpler to
shift a string from definition-time to use-time with 'sliteral' than
with 'string,' and friends.

   I wrote a lot of words following this scheme and soon thought about
factoring out the commonalities among them.  Note that this uses a
two-level defining word, i.e., a word that defines ordinary defining
words.

   This time a solution involving 'postpone' and friends seemed more
difficult (try it as an exercise), so I decided to use a
'create'/'does>' word; since I was already at it, I also used
'create'/'does>' for the lower level (try using 'postpone' etc.  as an
exercise), resulting in the following definition:

     : define-format ( disasm-xt table-xt -- )
         \ define an instruction format that uses disasm-xt for
         \ disassembling and enters the defined instructions into table
         \ table-xt
         create 2,
     does> ( u "inst" -- )
         \ defines an anonymous word for disassembling instruction inst,
         \ and enters it as u-th entry into table-xt
         2@ swap here name string, ( u table-xt disasm-xt c-addr ) \ remember string
         noname create 2,      \ define anonymous word
         execute latestxt swap ! \ enter xt of defined word into table-xt
     does> ( addr w -- )
         \ disassemble instruction w at addr
         2@ >r ( addr w disasm-xt R: c-addr )
         execute ( R: c-addr ) \ disassemble operands
         r> count type ; \ print name

   Note that the tables here (in contrast to above) do the 'cells +' by
themselves (that's why you have to pass an xt).  This word is used in
the following way:

     ' DISASM-OPERANDS ' TABLE define-format INST-FORMAT

   As shown above, the defined instruction format is then used like
this:

     ENTRY-NUM INST-FORMAT INST-NAME

   In terms of currying, this kind of two-level defining word provides
the parameters in three stages: first DISASM-OPERANDS and TABLE, then
ENTRY-NUM and INST-NAME, finally 'addr w', i.e., the instruction to be
disassembled.

   Of course this did not quite fit all the instruction format names
used in 'insts.fs', so I had to define a few wrappers that conditioned
the parameters into the right form.

   If you have trouble following this section, don't worry.  First, this
is involved and takes time (and probably some playing around) to
understand; second, this is the first two-level 'create'/'does>' word I
have written in seventeen years of Forth; and if I did not have
'insts.fs' to start with, I may well have elected to use just a
one-level defining word (with some repeating of parameters when using
the defining word).  So it is not necessary to understand this, but it
may improve your understanding of Forth.

5.9.9.4 'Const-does>'
.....................

A frequent use of 'create'...'does>' is for transferring some values
from definition-time to run-time.  Gforth supports this use with

'const-does>'       run-time: w*uw r*ur uw ur "name" --         gforth       "const-does>"
   Defines NAME and returns.

   NAME execution: pushes W*UW R*UR, then performs the code following
the 'const-does>'.

   A typical use of this word is:

     : curry+ ( n1 "name" -- )
     1 0 CONST-DOES> ( n2 -- n1+n2 )
         + ;

     3 curry+ 3+

   Here the '1 0' means that 1 cell and 0 floats are transferred from
definition to run-time.

   The advantages of using 'const-does>' are:

   * You don't have to deal with storing and retrieving the values,
     i.e., your program becomes more writable and readable.

   * When using 'does>', you have to introduce a '@' that cannot be
     optimized away (because you could change the data using
     '>body'...'!'); 'const-does>' avoids this problem.

   A Standard Forth implementation of 'const-does>' is available in
'compat/const-does.fs'.

5.9.10 Deferred Words
---------------------

The defining word 'Defer' allows you to define a word by name without
defining its behaviour; the definition of its behaviour is deferred.
Here are two situation where this can be useful:

   * Where you want to allow the behaviour of a word to be altered
     later, and for all precompiled references to the word to change
     when its behaviour is changed.
   * For mutual recursion; *Note Calls and returns::.

   In the following example, 'foo' always invokes the version of 'greet'
that prints "'Good morning'" whilst 'bar' always invokes the version
that prints "'Hello'".  There is no way of getting 'foo' to use the
later version without re-ordering the source code and recompiling it.

     : greet ." Good morning" ;
     : foo ... greet ... ;
     : greet ." Hello" ;
     : bar ... greet ... ;

   This problem can be solved by defining 'greet' as a 'Defer'red word.
The behaviour of a 'Defer'red word can be defined and redefined at any
time by using 'IS' to associate the xt of a previously-defined word with
it.  The previous example becomes:

     Defer greet ( -- )
     : foo ... greet ... ;
     : bar ... greet ... ;
     : greet1 ( -- ) ." Good morning" ;
     : greet2 ( -- ) ." Hello" ;
     ' greet2 IS greet  \ make greet behave like greet2

   Programming style note: You should write a stack comment for every
deferred word, and put only XTs into deferred words that conform to this
stack effect.  Otherwise it's too difficult to use the deferred word.

   A deferred word can be used to improve the statistics-gathering
example from *note User-defined Defining Words::; rather than edit the
application's source code to change every ':' to a 'my:', do this:

     : real: : ;     \ retain access to the original
     defer :         \ redefine as a deferred word
     ' my: IS :      \ use special version of :
     \
     \ load application here
     \
     ' real: IS :    \ go back to the original

   One thing to note is that 'IS' has special compilation semantics,
such that it parses the name at compile time (like 'TO'):

     : set-greet ( xt -- )
       IS greet ;

     ' greet1 set-greet

   In situations where 'IS' does not fit, use 'defer!' instead.

   A deferred word can only inherit execution semantics from the xt
(because that is all that an xt can represent -- for more discussion of
this *note Tokens for Words::); by default it will have default
interpretation and compilation semantics deriving from this execution
semantics.  However, you can change the interpretation and compilation
semantics of the deferred word in the usual ways:

     : bar .... ; immediate
     Defer fred immediate
     Defer jim

     ' bar IS jim  \ jim has default semantics
     ' bar IS fred \ fred is immediate

'Defer'       "name" --         gforth       "Defer"
   Define a deferred word name; its execution semantics can be set with
'defer!' or 'is' (and they have to, before first executing name.

'defer!'       xt xt-deferred --         gforth       "defer-store"
   Changes the 'defer'red word XT-DEFERRED to execute XT.

'IS'       value "name" --         core-ext       "IS"
   changes the 'defer'red word NAME to execute VALUE

'defer@'       xt-deferred -- xt         gforth       "defer-fetch"
   xt represents the word currently associated with the deferred word
xt-deferred.

'action-of'       interpretation "name" -- xt; compilation "name" -- ; run-time -- xt         core-ext       "action-of"
   Xt is the XT that is currently assigned to name.

'defers'       compilation "name" -- ; run-time ... -- ...         gforth       "defers"
   Compiles the present contents of the deferred word name into the
current definition.  I.e., this produces static binding as if name was
not deferred.

   Definitions of these words (except 'defers') in Standard Forth are
provided in 'compat/defer.fs'.

5.9.11 Forward
--------------

The defining word 'Forward' in 'forward.fs' allows you to create forward
references, which are resolved automatically, and do not incur
additional costs like the indirection of 'Defer'.  However, these
forward definitions only work for colon definitions.

   doc-forward doc-.unresolved

5.9.12 Aliases
--------------

The defining word 'Alias' allows you to define a word by name that has
the same behaviour as some other word.  Here are two situation where
this can be useful:

   * When you want access to a word's definition from a different word
     list (for an example of this, see the definition of the 'Root' word
     list in the Gforth source).
   * When you want to create a synonym; a definition that can be known
     by either of two names (for example, 'THEN' and 'ENDIF' are
     aliases).

   Like deferred words, an alias has default compilation and
interpretation semantics at the beginning (not the modifications of the
other word), but you can change them in the usual ways ('immediate',
'compile-only').  For example:

     : foo ... ; immediate

     ' foo Alias bar \ bar is not an immediate word
     ' foo Alias fooby immediate \ fooby is an immediate word

   Words that are aliases have the same xt, different headers in the
dictionary, and consequently different name tokens (*note Tokens for
Words::) and possibly different immediate flags.  An alias can only have
default or immediate compilation semantics; you can define aliases for
combined words with 'interpret/compile:' -- see *note Combined words::.

'Alias'       xt "name" --         gforth       "Alias"

5.10 Interpretation and Compilation Semantics
=============================================

The "interpretation semantics" of a (named) word are what the text
interpreter does when it encounters the word in interpret state.  It
also appears in some other contexts, e.g., the execution token returned
by '' word' identifies the interpretation semantics of word (in other
words, '' word execute' is equivalent to interpret-state text
interpretation of 'word').

   The "compilation semantics" of a (named) word are what the text
interpreter does when it encounters the word in compile state.  It also
appears in other contexts, e.g, 'POSTPONE word' compiles(1) the
compilation semantics of word.

   The standard also talks about "execution semantics".  They are used
only for defining the interpretation and compilation semantics of many
words.  By default, the interpretation semantics of a word are to
'execute' its execution semantics, and the compilation semantics of a
word are to 'compile,' its execution semantics.(2)

   Unnamed words (*note Anonymous Definitions::) cannot be encountered
by the text interpreter, ticked, or 'postpone'd, so they have no
interpretation or compilation semantics.  Their behaviour is represented
by their XT (*note Tokens for Words::), and we call it execution
semantics, too.

   You can change the semantics of the most-recently defined word:

'immediate'       --         core       "immediate"
   Make the compilation semantics of a word be to 'execute' the
execution semantics.

'compile-only'       --         gforth       "compile-only"
   Mark the last definition as compile-only; as a result, the text
interpreter and ''' will warn when they encounter such a word.

'restrict'       --         gforth       "restrict"
   A synonym for 'compile-only'

   By convention, words with non-default compilation semantics (e.g.,
immediate words) often have names surrounded with brackets (e.g., '[']',
*note Execution token::).

   Note that ticking (''') a compile-only word gives a warning ("<word>
is compile-only").

   ---------- Footnotes ----------

   (1) In standard terminology, "appends to the current definition".

   (2) In standard terminology: The default interpretation semantics are
its execution semantics; the default compilation semantics are to append
its execution semantics to the execution semantics of the current
definition.

5.10.1 Combined Words
---------------------

Gforth allows you to define "combined words" -- words that have an
arbitrary combination of interpretation and compilation semantics.

'interpret/compile:'       interp-xt comp-xt "name" --         gforth       "interpret/compile:"

   This feature was introduced for implementing 'TO' and 'S"'.  I
recommend that you do not define such words, as cute as they may be:
they make it hard to get at both parts of the word in some contexts.
E.g., assume you want to get an execution token for the compilation
part.  Instead, define two words, one that embodies the interpretation
part, and one that embodies the compilation part.  Once you have done
that, you can define a combined word with 'interpret/compile:' for the
convenience of your users.

   You might try to use this feature to provide an optimizing
implementation of the default compilation semantics of a word.  For
example, by defining:
     :noname
        foo bar ;
     :noname
        POSTPONE foo POSTPONE bar ;
     interpret/compile: opti-foobar

as an optimizing version of:

     : foobar
         foo bar ;

   Unfortunately, this does not work correctly with '[compile]', because
'[compile]' assumes that the compilation semantics of all
'interpret/compile:' words are non-default.  I.e., '[compile]
opti-foobar' would compile compilation semantics, whereas '[compile]
foobar' would compile interpretation semantics.

   Some people try to use "state-smart" words to emulate the feature
provided by 'interpret/compile:' (words are state-smart if they check
'STATE' during execution).  E.g., they would try to code 'foobar' like
this:

     : foobar
       STATE @
       IF ( compilation state )
         POSTPONE foo POSTPONE bar
       ELSE
         foo bar
       ENDIF ; immediate

   Although this works if 'foobar' is only processed by the text
interpreter, it does not work in other contexts (like ''' or
'POSTPONE').  E.g., '' foobar' will produce an execution token for a
state-smart word, not for the interpretation semantics of the original
'foobar'; when you execute this execution token (directly with 'EXECUTE'
or indirectly through 'COMPILE,') in compile state, the result will not
be what you expected (i.e., it will not perform 'foo bar').  State-smart
words are a bad idea.  Simply don't write them(1)!

   It is also possible to write defining words that define words with
arbitrary combinations of interpretation and compilation semantics.  In
general, they look like this:

     : def-word
         create-interpret/compile
         code1
     interpretation>
         code2
     <interpretation
     compilation>
         code3
     <compilation ;

   For a word defined with 'def-word', the interpretation semantics are
to push the address of the body of word and perform code2, and the
compilation semantics are to push the address of the body of word and
perform code3.  E.g., 'constant' can also be defined like this (except
that the defined constants don't behave correctly when '[compile]'d):

     : constant ( n "name" -- )
         create-interpret/compile
         ,
     interpretation> ( -- n )
         @
     <interpretation
     compilation> ( compilation. -- ; run-time. -- n )
         @ postpone literal
     <compilation ;

   doc-create-interpret/compile doc-interpretation> doc-<interpretation
doc-compilation> doc-<compilation

   Words defined with 'interpret/compile:' and
'create-interpret/compile' have an extended header structure that
differs from other words; however, unless you try to access them with
plain address arithmetic, you should not notice this.  Words for
accessing the header structure usually know how to deal with this; e.g.,
''' word '>body' also gives you the body of a word created with
'create-interpret/compile'.

   ---------- Footnotes ----------

   (1) For a more detailed discussion of this topic, see M. Anton Ertl,
''State'-smartness---Why it is Evil and How to Exorcise it
(http://www.complang.tuwien.ac.at/papers/ertl98.ps.gz)', EuroForth '98.

5.11 Tokens for Words
=====================

This section describes the creation and use of tokens that represent
words.

5.11.1 Execution token
----------------------

An "execution token" (XT) represents some behaviour of a word.  You can
use 'execute' to invoke this behaviour.

   You can use ''' to get an execution token that represents the
interpretation semantics of a named word:

     5 ' .   ( n xt )
     execute ( )      \ execute the xt (i.e., ".")

'''       "name" -- xt         core       "tick"
   xt represents name's interpretation semantics.  Perform '-14 throw'
if the word has no interpretation semantics.

   ''' parses at run-time; there is also a word '[']' that parses when
it is compiled, and compiles the resulting XT:

     : foo ['] . execute ;
     5 foo
     : bar ' execute ; \ by contrast,
     5 bar .           \ ' parses "." when bar executes

'[']'       compilation. "name" -- ; run-time. -- xt         core       "bracket-tick"
   xt represents name's interpretation semantics.  Perform '-14 throw'
if the word has no interpretation semantics.

   If you want the execution token of word, write '['] word' in compiled
code and '' word' in interpreted code.  Gforth's ''' and '[']' warns
when you use them on compile-only words, because such usage may be
non-portable between different Forth systems.

   You can avoid that warning as well as the portability problems by
defining an immediate variant of the word, e.g.:

     : if postpone if ; immediate
     : test [ ' if execute ] ." test" then ;

   The resulting execution token performs the compilation semantics of
'if' when 'execute'd.

   Another way to get an XT is ':noname' or 'latestxt' (*note Anonymous
Definitions::).  For anonymous words this gives an xt for the only
behaviour the word has (the execution semantics).  For named words,
'latestxt' produces an XT for the same behaviour it would produce if the
word was defined anonymously.

     :noname ." hello" ;
     execute

   An XT occupies one cell and can be manipulated like any other cell.

   In Standard Forth the XT is just an abstract data type (i.e., defined
by the operations that produce or consume it).  For old hands: In
Gforth, the XT is implemented as a code field address (CFA).

'execute'       xt --        core       "execute"
   Perform the semantics represented by the execution token, xt.

'perform'       a-addr --        gforth       "perform"
   '@ execute'.

5.11.2 Compilation token
------------------------

Gforth represents the compilation semantics of a named word by a
"compilation token" consisting of two cells: w xt.  The top cell xt is
an execution token.  The compilation semantics represented by the
compilation token can be performed with 'execute', which consumes the
whole compilation token, with an additional stack effect determined by
the represented compilation semantics.

   At present, the w part of a compilation token is an execution token,
and the xt part represents either 'execute' or 'compile,'(1).  However,
don't rely on that knowledge, unless necessary; future versions of
Gforth may introduce unusual compilation tokens (e.g., a compilation
token that represents the compilation semantics of a literal).

   You can perform the compilation semantics represented by the
compilation token with 'execute'.  You can compile the compilation
semantics with 'postpone,'.  I.e., 'COMP' word postpone,' is equivalent
to 'postpone word'.

'[COMP']'       compilation "name" -- ; run-time -- w xt         gforth       "bracket-comp-tick"
   Compilation token w xt represents name's compilation semantics.

'COMP''       "name" -- w xt         gforth       "comp-tick"
   Compilation token w xt represents name's compilation semantics.

'postpone,'       w xt --         gforth       "postpone-comma"
   Compile the compilation semantics represented by the compilation
token w xt.

   ---------- Footnotes ----------

   (1) Depending upon the compilation semantics of the word.  If the
word has default compilation semantics, the xt will represent
'compile,'.  Otherwise (e.g., for immediate words), the xt will
represent 'execute'.

5.11.3 Name token
-----------------

Gforth represents named words by the "name token", (nt).  Name token is
an abstract data type that occurs as argument or result of the words
below.

   The closest thing to the nt in older Forth systems is the name field
address (NFA), but there are significant differences: in older Forth
systems each word had a unique NFA, LFA, CFA and PFA (in this order, or
LFA, NFA, CFA, PFA) and there were words for getting from one to the
next.  In contrast, in Gforth 0...n nts correspond to one xt; there is a
link field in the structure identified by the name token, but searching
usually uses a hash table external to these structures; the name in
Gforth has a cell-wide count-and-flags field, and the nt is not
implemented as the address of that count field.

'find-name'       c-addr u -- nt | 0         gforth       "find-name"
   Find the name c-addr u in the current search order.  Return its nt,
if found, otherwise 0.

'find-name-in'       c-addr u wid -- nt | 0         unknown       "find-name-in"
   search the word list identified by wid for the definition named by
the string at c-addr u.  Return its nt, if found, otherwise 0.

'latest'       -- nt         gforth       "latest"
   NT is the name token of the last word defined; it is 0 if the last
word has no name.

'>name'       xt -- nt|0         gforth       "to-name"
   The primary name token nt of the word represented by xt.  Returns 0
if xt is not an xt (using a heuristic check that has a small chance of
misidentifying a non-xt as xt), or if the primary nt is of an unnamed
word.  As of Gforth 1.0, every xt has a primary nt, but other named
words may have the same interpretation sematics xt.

'name>interpret'       nt -- xt|0         unknown       "name>interpret"
   xt represents the interpretation semantics nt; returns 0 if nt has no
interpretation semantics

'name>compile'       nt -- w xt         unknown       "name>compile"
   w xt is the compilation token for the word nt.

'name>int'       nt -- xt         gforth       "name-to-int"
   xt represents the interpretation semantics of the word nt.

'name?int'       nt -- xt         gforth-obsolete       "name-question-int"
   Like 'name>int', but warns when encountering a word marked
compile-only

'name>comp'       nt -- w xt         gforth       "name-to-comp"
   w xt is the compilation token for the word nt.

'name>string'       nt -- addr u         gforth       "name-to-string"
   addr count is the name of the word represented by nt.

'id.'       nt --         gforth       "i-d-dot"
   Print the name of the word represented by NT.

'.name'       nt --         gforth-obsolete       "dot-name"
   Gforth <=0.5.0 name for 'id.'.

'.id'       nt --         F83       "dot-i-d"
   F83 name for 'id.'.

5.12 Compiling words
====================

In contrast to most other languages, Forth has no strict boundary
between compilation and run-time.  E.g., you can run arbitrary code
between defining words (or for computing data used by defining words
like 'constant').  Moreover, 'Immediate' (*note Interpretation and
Compilation Semantics:: and '['...']'  (see below) allow running
arbitrary code while compiling a colon definition (exception: you must
not allot dictionary space).

5.12.1 Literals
---------------

The simplest and most frequent example is to compute a literal during
compilation.  E.g., the following definition prints an array of strings,
one string per line:

     : .strings ( addr u -- ) \ gforth
         2* cells bounds U+DO
     	cr i 2@ type
         2 cells +LOOP ;

   With a simple-minded compiler like Gforth's, this computes '2 cells'
on every loop iteration.  You can compute this value once and for all at
compile time and compile it into the definition like this:

     : .strings ( addr u -- ) \ gforth
         2* cells bounds U+DO
     	cr i 2@ type
         [ 2 cells ] literal +LOOP ;

   '[' switches the text interpreter to interpret state (you will get an
'ok' prompt if you type this example interactively and insert a newline
between '[' and ']'), so it performs the interpretation semantics of '2
cells'; this computes a number.  ']' switches the text interpreter back
into compile state.  It then performs 'Literal''s compilation semantics,
which are to compile this number into the current word.  You can
decompile the word with 'see .strings' to see the effect on the compiled
code.

   You can also optimize the '2* cells' into '[ 2 cells ] literal *' in
this way.

'['       --         core       "left-bracket"
   Enter interpretation state.  Immediate word.

']'       --         core       "right-bracket"
   Enter compilation state.

'Literal'       compilation n -- ; run-time -- n         core       "Literal"
   Compilation semantics: compile the run-time semantics.
Run-time Semantics: push n.
Interpretation semantics: undefined.

']L'       compilation: n -- ; run-time: -- n         gforth       "]L"
   equivalent to '] literal'

   There are also words for compiling other data types than single cells
as literals:

'2Literal'       compilation w1 w2 -- ; run-time  -- w1 w2         double       "two-literal"
   Compile appropriate code such that, at run-time, w1 w2 are placed on
the stack.  Interpretation semantics are undefined.

'FLiteral'       compilation r -- ; run-time -- r         float       "f-literal"
   Compile appropriate code such that, at run-time, r is placed on the
(floating-point) stack.  Interpretation semantics are undefined.

'SLiteral'       Compilation c-addr1 u ; run-time -- c-addr2 u         string       "SLiteral"
   Compilation: compile the string specified by c-addr1, u into the
current definition.  Run-time: return c-addr2 u describing the address
and length of the string.

   You might be tempted to pass data from outside a colon definition to
the inside on the data stack.  This does not work, because ':' puhes a
colon-sys, making stuff below unaccessible.  E.g., this does not work:

     5 : foo literal ; \ error: "unstructured"

   Instead, you have to pass the value in some other way, e.g., through
a variable:

     variable temp
     5 temp !
     : foo [ temp @ ] literal ;

5.12.2 Macros
-------------

'Literal' and friends compile data values into the current definition.
You can also write words that compile other words into the current
definition.  E.g.,

     : compile-+ ( -- ) \ compiled code: ( n1 n2 -- n )
       POSTPONE + ;

     : foo ( n1 n2 -- n )
       [ compile-+ ] ;
     1 2 foo .

   This is equivalent to ': foo + ;' ('see foo' to check this).  What
happens in this example?  'Postpone' compiles the compilation semantics
of '+' into 'compile-+'; later the text interpreter executes 'compile-+'
and thus the compilation semantics of +, which compile (the execution
semantics of) '+' into 'foo'.(1)

'postpone'       "name" --         core       "postpone"
   Compiles the compilation semantics of name.

   Compiling words like 'compile-+' are usually immediate (or similar)
so you do not have to switch to interpret state to execute them;
modifying the last example accordingly produces:

     : [compile-+] ( compilation: --; interpretation: -- )
       \ compiled code: ( n1 n2 -- n )
       POSTPONE + ; immediate

     : foo ( n1 n2 -- n )
       [compile-+] ;
     1 2 foo .

   You will occassionally find the need to POSTPONE several words;
putting POSTPONE before each such word is cumbersome, so Gforth provides
a more convenient syntax: ']] ... [['.  This allows us to write
'[compile-+]' as:

     : [compile-+] ( compilation: --; interpretation: -- )
       ]] + [[ ; immediate

']]'       --         gforth       "right-bracket-bracket"
   switch into postpone state

'[['       --         gforth       "left-bracket-bracket"
   switch from postpone state to compile state

   The unusual direction of the brackets indicates their function: ']]'
switches from compilation to postponing (i.e., compilation of
compilation), just like ']' switches from immediate execution
(interpretation) to compilation.  Conversely, '[[' switches from
postponing to compilation, ananlogous to '[' which switches from
compilation to immediate execution.

   The real advantage of ']] '...' [[' becomes apparent when there are
many words to POSTPONE. E.g., the word 'compile-map-array' (*note
Advanced macros Tutorial::) can be written much shorter as follows:

     : compile-map-array ( compilation: xt -- ; run-time: ... addr u -- ... )
     \ at run-time, execute xt ( ... x -- ... ) for each element of the
     \ array beginning at addr and containing u elements
       { xt }
       ]] cells over + swap ?do
         i @ [[ xt compile,
       1 cells ]]L +loop [[ ;

   This example also uses ']]L' as a shortcut for ']] literal'.  There
are also other shortcuts

   doc-]]L doc-]]2L doc-]]FL doc-]]SL

   Note that parsing words don't parse at postpone time; if you want to
provide the parsed string right away, you have to switch back to
compilation:

     ]] ... [[ s" some string" ]]2L ... [[
     ]] ... [[ ['] + ]]L ... [[

   Definitions of ']]' and friends in Standard Forth are provided in
'compat/macros.fs'.

   Immediate compiling words are similar to macros in other languages
(in particular, Lisp).  The important differences to macros in, e.g., C
are:

   * You use the same language for defining and processing macros, not a
     separate preprocessing language and processor.

   * Consequently, the full power of Forth is available in macro
     definitions.  E.g., you can perform arbitrarily complex
     computations, or generate different code conditionally or in a loop
     (e.g., *note Advanced macros Tutorial::).  This power is very
     useful when writing a parser generators or other code-generating
     software.

   * Macros defined using 'postpone' etc.  deal with the language at a
     higher level than strings; name binding happens at macro definition
     time, so you can avoid the pitfalls of name collisions that can
     happen in C macros.  Of course, Forth is a liberal language and
     also allows to shoot yourself in the foot with text-interpreted
     macros like

          : [compile-+] s" +" evaluate ; immediate

     Apart from binding the name at macro use time, using 'evaluate'
     also makes your definition 'state'-smart (*note state-smartness::).

   You may want the macro to compile a number into a word.  The word to
do it is 'literal', but you have to 'postpone' it, so its compilation
semantics take effect when the macro is executed, not when it is
compiled:

     : [compile-5] ( -- ) \ compiled code: ( -- n )
       5 POSTPONE literal ; immediate

     : foo [compile-5] ;
     foo .

   You may want to pass parameters to a macro, that the macro should
compile into the current definition.  If the parameter is a number, then
you can use 'postpone literal' (similar for other values).

   If you want to pass a word that is to be compiled, the usual way is
to pass an execution token and 'compile,' it:

     : twice1 ( xt -- ) \ compiled code: ... -- ...
       dup compile, compile, ;

     : 2+ ( n1 -- n2 )
       [ ' 1+ twice1 ] ;

'compile,'       xt --         unknown       "compile,"
   Append the semantics represented by xt to the current definition.
When the resulting code fragment is run, it behaves the same as if xt is
'execute'd.

   An alternative available in Gforth, that allows you to pass the
compilation semantics as parameters is to use the compilation token
(*note Compilation token::).  The same example in this technique:

     : twice ( ... ct -- ... ) \ compiled code: ... -- ...
       2dup 2>r execute 2r> execute ;

     : 2+ ( n1 -- n2 )
       [ comp' 1+ twice ] ;

   In the example above '2>r' and '2r>' ensure that 'twice' works even
if the executed compilation semantics has an effect on the data stack.

   You can also define complete definitions with these words; this
provides an alternative to using 'does>' (*note User-defined Defining
Words::).  E.g., instead of

     : curry+ ( n1 "name" -- )
         CREATE ,
     DOES> ( n2 -- n1+n2 )
         @ + ;

   you could define

     : curry+ ( n1 "name" -- )
       \ name execution: ( n2 -- n1+n2 )
       >r : r> POSTPONE literal POSTPONE + POSTPONE ; ;

     -3 curry+ 3-
     see 3-

   The sequence '>r : r>' is necessary, because ':' puts a colon-sys on
the data stack that makes everything below it unaccessible.

   This way of writing defining words is sometimes more, sometimes less
convenient than using 'does>' (*note Advanced does> usage example::).
One advantage of this method is that it can be optimized better, because
the compiler knows that the value compiled with 'literal' is fixed,
whereas the data associated with a 'create'd word can be changed.

   ---------- Footnotes ----------

   (1) A recent RFI answer requires that compiling words should only be
executed in compile state, so this example is not guaranteed to work on
all standard systems, but on any decent system it will work.

5.13 The Text Interpreter
=========================

The text interpreter(1) is an endless loop that processes input from the
current input device.  It is also called the outer interpreter, in
contrast to the inner interpreter (*note Engine::) which executes the
compiled Forth code on interpretive implementations.

   The text interpreter operates in one of two states: "interpret state"
and "compile state".  The current state is defined by the aptly-named
variable 'state'.

   This section starts by describing how the text interpreter behaves
when it is in interpret state, processing input from the user input
device -- the keyboard.  This is the mode that a Forth system is in after
it starts up.

   The text interpreter works from an area of memory called the "input
buffer"(2), which stores your keyboard input when you press the <RET>
key.  Starting at the beginning of the input buffer, it skips leading
spaces (called "delimiters") then parses a string (a sequence of
non-space characters) until it reaches either a space character or the
end of the buffer.  Having parsed a string, it makes two attempts to
process it:

   * It looks for the string in a "dictionary" of definitions.  If the
     string is found, the string names a "definition" (also known as a
     "word") and the dictionary search returns information that allows
     the text interpreter to perform the word's "interpretation
     semantics".  In most cases, this simply means that the word will be
     executed.
   * If the string is not found in the dictionary, the text interpreter
     attempts to treat it as a number, using the rules described in
     *note Number Conversion::.  If the string represents a legal number
     in the current radix, the number is pushed onto a parameter stack
     (the data stack for integers, the floating-point stack for
     floating-point numbers).

   If both attempts fail, the text interpreter discards the remainder of
the input buffer, issues an error message and waits for more input.  If
one of the attempts succeeds, the text interpreter repeats the parsing
process until the whole of the input buffer has been processed, at which
point it prints the status message "' ok'" and waits for more input.

   The text interpreter keeps track of its position in the input buffer
by updating a variable called '>IN' (pronounced "to-in").  The value of
'>IN' starts out as 0, indicating an offset of 0 from the start of the
input buffer.  The region from offset '>IN @' to the end of the input
buffer is called the "parse area"(3).  This example shows how '>IN'
changes as the text interpreter parses the input buffer:

     : remaining source >in @ /string
       cr ." ->" type ." <-" ; immediate

     1 2 3 remaining + remaining .

     : foo 1 2 3 remaining swap remaining ;

The result is:

     ->+ remaining .<-
     ->.<-5  ok

     ->SWAP remaining ;-<
     ->;<-  ok

   The value of '>IN' can also be modified by a word in the input buffer
that is executed by the text interpreter.  This means that a word can
"trick" the text interpreter into either skipping a section of the input
buffer(4) or into parsing a section twice.  For example:

     : lat ." <<foo>>" ;
     : flat ." <<bar>>" >IN DUP @ 3 - SWAP ! ;

When 'flat' is executed, this output is produced(5):

     <<bar>><<foo>>

   This technique can be used to work around some of the
interoperability problems of parsing words.  Of course, it's better to
avoid parsing words where possible.

Two important notes about the behaviour of the text interpreter:

   * It processes each input string to completion before parsing
     additional characters from the input buffer.
   * It treats the input buffer as a read-only region (and so must your
     code).

When the text interpreter is in compile state, its behaviour changes in
these ways:

   * If a parsed string is found in the dictionary, the text interpreter
     will perform the word's "compilation semantics".  In most cases,
     this simply means that the execution semantics of the word will be
     appended to the current definition.
   * When a number is encountered, it is compiled into the current
     definition (as a literal) rather than being pushed onto a parameter
     stack.
   * If an error occurs, 'state' is modified to put the text interpreter
     back into interpret state.
   * Each time a line is entered from the keyboard, Gforth prints "'
     compiled'" rather than " 'ok'".

   When the text interpreter is using an input device other than the
keyboard, its behaviour changes in these ways:

   * When the parse area is empty, the text interpreter attempts to
     refill the input buffer from the input source.  When the input
     source is exhausted, the input source is set back to the previous
     input source.
   * It doesn't print out "' ok'" or "' compiled'" messages each time
     the parse area is emptied.
   * If an error occurs, the input source is set back to the user input
     device.

   You can read about this in more detail in *note Input Sources::.

'>in'       -- addr         core       "to-in"
   'uvar' variable -- a-addr is the address of a cell containing the char
offset from the start of the input buffer to the start of the parse
area.

'source'       -- addr u         core       "source"
   Return address addr and length u of the current input buffer

'tib'       -- addr         core-ext-obsolescent       "t-i-b"

'#tib'       -- addr         core-ext-obsolescent       "number-t-i-b"
   'uvar' variable -- a-addr is the address of a cell containing the
number of characters in the terminal input buffer.  OBSOLESCENT:
'source' superceeds the function of this word.

   ---------- Footnotes ----------

   (1) This is an expanded version of the material in *note Introducing
the Text Interpreter::.

   (2) When the text interpreter is processing input from the keyboard,
this area of memory is called the "terminal input buffer" (TIB) and is
addressed by the (obsolescent) words 'TIB' and '#TIB'.

   (3) In other words, the text interpreter processes the contents of
the input buffer by parsing strings from the parse area until the parse
area is empty.

   (4) This is how parsing words work.

   (5) Exercise for the reader: what would happen if the '3' were
replaced with '4'?

5.13.1 Input Sources
--------------------

By default, the text interpreter processes input from the user input
device (the keyboard) when Forth starts up.  The text interpreter can
process input from any of these sources:

   * The user input device -- the keyboard.
   * A file, using the words described in *note Forth source files::.
   * A block, using the words described in *note Blocks::.
   * A text string, using 'evaluate'.

   A program can identify the current input device from the values of
'source-id' and 'blk'.

'source-id'       -- 0 | -1 | fileid         core-ext,file       "source-i-d"
   Return 0 (the input source is the user input device), -1 (the input
source is a string being processed by 'evaluate') or a fileid (the input
source is the file specified by fileid).

'blk'       -- addr         block       "b-l-k"
   'uvar' variable -- This cell contains the current block number (or 0
if the current input source is not a block).

'save-input'       -- x1 .. xn n         core-ext       "save-input"
   The n entries xn - x1 describe the current state of the input source
specification, in some platform-dependent way that can be used by
'restore-input'.

'restore-input'       x1 .. xn n -- flag         core-ext       "restore-input"
   Attempt to restore the input source specification to the state
described by the n entries xn - x1.  flag is true if the restore fails.
In Gforth with the new input code, it fails only with a flag that can be
used to throw again; it is also possible to save and restore between
different active input streams.  Note that closing the input streams
must happen in the reverse order as they have been opened, but in
between everything is allowed.

'evaluate'       ... addr u -- ...         core,block       "evaluate"
   Save the current input source specification.  Store '-1' in
'source-id' and '0' in 'blk'.  Set '>IN' to '0' and make the string
c-addr u the input source and input buffer.  Interpret.  When the parse
area is empty, restore the input source specification.

'query'       --         core-ext-obsolescent       "query"
   Make the user input device the input source.  Receive input into the
Terminal Input Buffer.  Set '>IN' to zero.  OBSOLESCENT: superceeded by
'accept'.

5.13.2 Number Conversion
------------------------

This section describes the rules that the text interpreter uses when it
tries to convert a string into a number.

   Let <digit> represent any character that is a legal digit in the
current number base(1).

   Let <decimal digit> represent any character in the range 0-9.

   Let {a b} represent the optional presence of any of the characters in
the braces (a or b or neither).

   Let * represent any number of instances of the previous character
(including none).

   Let any other character represent itself.

Now, the conversion rules are:

   * A string of the form <digit><digit>* is treated as a
     single-precision (cell-sized) positive integer.  Examples are 0 123
     6784532 32343212343456 42
   * A string of the form -<digit><digit>* is treated as a
     single-precision (cell-sized) negative integer, and is represented
     using 2's-complement arithmetic.  Examples are -45 -5681 -0
   * A string of the form <digit><digit>*.<digit>* is treated as a
     double-precision (double-cell-sized) positive integer.  Examples
     are 3465.  3.465 34.65 (all three of these represent the same
     number).
   * A string of the form -<digit><digit>*.<digit>* is treated as a
     double-precision (double-cell-sized) negative integer, and is
     represented using 2's-complement arithmetic.  Examples are -3465.
     -3.465 -34.65 (all three of these represent the same number).
   * A string of the form {+ -}<decimal digit>{.}<decimal digit>*{e E}{+
     -}<decimal digit><decimal digit>* is treated as a floating-point
     number.  Examples are 1e 1e0 1.e 1.e0 +1e+0 (which all represent
     the same number) +12.E-4

   By default, the number base used for integer number conversion is
given by the contents of the variable 'base'.  Note that a lot of
confusion can result from unexpected values of 'base'.  If you change
'base' anywhere, make sure to save the old value and restore it
afterwards; better yet, use 'base-execute', which does this for you.  In
general I recommend keeping 'base' decimal, and using the prefixes
described below for the popular non-decimal bases.

'dpl'       -- a-addr         gforth       "dpl"
   'User' variable -- a-addr is the address of a cell that stores the
position of the decimal point in the most recent numeric conversion.
Initialised to -1.  After the conversion of a number containing no
decimal point, 'dpl' is -1.  After the conversion of '2.' it holds 0.
After the conversion of 234123.9 it contains 1, and so forth.

'base-execute'       i*x xt u -- j*x         gforth       "base-execute"
   execute xt with the content of 'BASE' being u, and restoring the
original 'BASE' afterwards.

'base'       -- a-addr         core       "base"
   'User' variable -- a-addr is the address of a cell that stores the
number base used by default for number conversion during input and
output.  Don't store to 'base', use 'base-execute' instead.

'hex'       --         core-ext       "hex"
   Set 'base' to &16 (hexadecimal).  Don't use 'hex', use 'base-execute'
instead.

'decimal'       --         core       "decimal"
   Set 'base' to &10 (decimal).  Don't use 'decimal', use 'base-execute'
instead.

   Gforth allows you to override the value of 'base' by using a
prefix(2) before the first digit of an (integer) number.  The following
prefixes are supported:

   * '&' -- decimal
   * '#' -- decimal
   * '%' -- binary
   * '$' -- hexadecimal
   * '0x' -- hexadecimal, if base<33.
   * ''' -- numeric value (e.g., ASCII code) of next character; an
     optional ''' may be present after the character.

   Here are some examples, with the equivalent decimal number shown
after in braces:

   -$41 (-65), %1001101 (205), %1001.0001 (145 - a double-precision
number), 'A (65), -'a' (-97), &905 (905), $abc (2478), $ABC (2478).

Number conversion has a number of traps for the unwary:

   * You cannot determine the current number base using the code
     sequence 'base @ .' -- the number base is always 10 in the current
     number base.  Instead, use something like 'base @ dec.'
   * If the number base is set to a value greater than 14 (for example,
     hexadecimal), the number 123E4 is ambiguous; the conversion rules
     allow it to be intepreted as either a single-precision integer or a
     floating-point number (Gforth treats it as an integer).  The
     ambiguity can be resolved by explicitly stating the sign of the
     mantissa and/or exponent: 123E+4 or +123E4 -- if the number base is
     decimal, no ambiguity arises; either representation will be treated
     as a floating-point number.
   * There is a word 'bin' but it does not set the number base!  It is
     used to specify file types.
   * Standard Forth requires the '.' of a double-precision number to be
     the final character in the string.  Gforth allows the '.' to be
     anywhere after the first digit.
   * The number conversion process does not check for overflow.
   * In a Standard Forth program 'base' is required to be decimal when
     converting floating-point numbers.  In Gforth, number conversion to
     floating-point numbers always uses base &10, irrespective of the
     value of 'base'.

   You can read numbers into your programs with the words described in
*note Line input and conversion::.

   ---------- Footnotes ----------

   (1) For example, 0-9 when the number base is decimal or 0-9, A-F when
the number base is hexadecimal.

   (2) Some Forth implementations provide a similar scheme by
implementing '$' etc.  as parsing words that process the subsequent
number in the input stream and push it onto the stack.  For example, see
'Number Conversion and Literals', by Wil Baden; Forth Dimensions 20(3)
pages 26--27.  In such implementations, unlike in Gforth, a space is
required between the prefix and the number.

5.13.3 Interpret/Compile states
-------------------------------

A standard program is not permitted to change 'state' explicitly.
However, it can change 'state' implicitly, using the words '[' and ']'.
When '[' is executed it switches 'state' to interpret state, and
therefore the text interpreter starts interpreting.  When ']' is
executed it switches 'state' to compile state and therefore the text
interpreter starts compiling.  The most common usage for these words is
for switching into interpret state and back from within a colon
definition; this technique can be used to compile a literal (for an
example, *note Literals::) or for conditional compilation (for an
example, *note Interpreter Directives::).

5.13.4 Interpreter Directives
-----------------------------

These words are usually used in interpret state; typically to control
which parts of a source file are processed by the text interpreter.
There are only a few Standard Forth Standard words, but Gforth
supplements these with a rich set of immediate control structure words
to compensate for the fact that the non-immediate versions can only be
used in compile state (*note Control Structures::).  Typical usages:

     FALSE Constant HAVE-ASSEMBLER
     .
     .
     HAVE-ASSEMBLER [IF]
     : ASSEMBLER-FEATURE
       ...
     ;
     [ENDIF]
     .
     .
     : SEE
       ... \ general-purpose SEE code
       [ HAVE-ASSEMBLER [IF] ]
       ... \ assembler-specific SEE code
       [ [ENDIF] ]
     ;

'[IF]'       flag --         tools-ext       "bracket-if"
   If flag is 'TRUE' do nothing (and therefore execute subsequent words
as normal).  If flag is 'FALSE', parse and discard words from the parse
area (refilling it if necessary using 'REFILL') including nested
instances of '[IF]'..  '[ELSE]'..  '[THEN]' and '[IF]'..  '[THEN]' until
the balancing '[ELSE]' or '[THEN]' has been parsed and discarded.
Immediate word.

'[ELSE]'       --         tools-ext       "bracket-else"
   Parse and discard words from the parse area (refilling it if
necessary using 'REFILL') including nested instances of '[IF]'..
'[ELSE]'..  '[THEN]' and '[IF]'..  '[THEN]' until the balancing '[THEN]'
has been parsed and discarded.  '[ELSE]' only gets executed if the
balancing '[IF]' was 'TRUE'; if it was 'FALSE', '[IF]' would have parsed
and discarded the '[ELSE]', leaving the subsequent words to be executed
as normal.  Immediate word.

'[THEN]'       --         tools-ext       "bracket-then"
   Do nothing; used as a marker for other words to parse and discard up
to.  Immediate word.

'[ENDIF]'       --         gforth       "bracket-end-if"
   Do nothing; synonym for '[THEN]'

'[IFDEF]'       "<spaces>name" --         gforth       "bracket-if-def"
   If name is found in the current search-order, behave like '[IF]' with
a 'TRUE' flag, otherwise behave like '[IF]' with a 'FALSE' flag.
Immediate word.

'[IFUNDEF]'       "<spaces>name" --         gforth       "bracket-if-un-def"
   If name is not found in the current search-order, behave like '[IF]'
with a 'TRUE' flag, otherwise behave like '[IF]' with a 'FALSE' flag.
Immediate word.

'[?DO]'       n-limit n-index --         gforth       "bracket-question-do"

'[DO]'       n-limit n-index --         gforth       "bracket-do"

'[FOR]'       n --         gforth       "bracket-for"

'[LOOP]'       --         gforth       "bracket-loop"

'[+LOOP]'       n --         gforth       "bracket-question-plus-loop"

'[NEXT]'       n --         gforth       "bracket-next"

'[BEGIN]'       --         gforth       "bracket-begin"

'[UNTIL]'       flag --         gforth       "bracket-until"

'[AGAIN]'       --         gforth       "bracket-again"

'[WHILE]'       flag --         gforth       "bracket-while"

'[REPEAT]'       --         gforth       "bracket-repeat"

5.13.5 Recognizers
------------------

The standard Forth text interpreter recognizes the following types of
tokens: words in the dictionary, integer numbers, and floating point
numbers.  Defining new types of tokens isn't yet standardized.  Gforth
provides recognizers to make the text interpreter extensible as well.

   Recognizers take a string and return some data and a "table" for
interpreting that data.  Gforth implements that table as xt (which means
any xt is a valid result of a recognizer), but other Forth systems can
implement it as actual table, with three xts inside.  The first xt is
the interpretation/run-time xt, it performs the interpretation semantics
on the data (usually, this means it just leaves the data on the stack).
The second xt performs the compilation semantics, it gets the data and
the run-time semantics xt.  The third xt perfoms the postpone semantics,
it also gets the data and the run-time semantics xt.  You can use
'post,' to postpone the run-time xt.

   Recognizers are organized as stack, so you can arrange the sequence
of recognizers in the same way as the vocabulary stack.

   doc-r:fail doc-rec:word doc-rec:num doc-rec:float
'get-recognizers'       -- xt1 .. xtn n         unknown       "get-recognizers"
   push the content on the recognizer stack

'set-recognizers'       xt1 .. xtn n         unknown       "set-recognizers"
   set the recognizer stack from content on the stack

   doc-do-recognizer doc-recognizer

5.14 The Input Stream
=====================

The text interpreter reads from the input stream, which can come from
several sources (*note Input Sources::).  Some words, in particular
defining words, but also words like ''', read parameters from the input
stream instead of from the stack.

   Such words are called parsing words, because they parse the input
stream.  Parsing words are hard to use in other words, because it is
hard to pass program-generated parameters through the input stream.
They also usually have an unintuitive combination of interpretation and
compilation semantics when implemented naively, leading to various
approaches that try to produce a more intuitive behaviour (*note
Combined words::).

   It should be obvious by now that parsing words are a bad idea.  If
you want to implement a parsing word for convenience, also provide a
factor of the word that does not parse, but takes the parameters on the
stack.  To implement the parsing word on top if it, you can use the
following words:

'parse'       xchar "ccc<xchar>" -- c-addr u         core-ext,xchar       "parse"
   Parse ccc, delimited by xchar, in the parse area.  c-addr u specifies
the parsed string within the parse area.  If the parse area was empty, u
is 0.

'parse-name'       "name" -- c-addr u         gforth       "parse-name"
   Get the next word from the input buffer

'parse-word'       -- c-addr u         gforth-obsolete       "parse-word"
   old name for 'parse-name'; this word has a conflicting behaviour in
some other systems.

'name'       -- c-addr u         gforth-obsolete       "name"
   old name for 'parse-name'

'word'       char "<chars>ccc<char>-- c-addr         core       "word"
   Skip leading delimiters.  Parse ccc, delimited by char, in the parse
area.  c-addr is the address of a transient region containing the parsed
string in counted-string format.  If the parse area was empty or
contained no characters other than delimiters, the resulting string has
zero length.  A program may replace characters within the counted
string.  OBSOLESCENT: the counted string has a trailing space that is
not included in its length.

'refill'       -- flag         core-ext,block-ext,file-ext       "refill"
   Attempt to fill the input buffer from the input source.  When the
input source is the user input device, attempt to receive input into the
terminal input device.  If successful, make the result the input buffer,
set '>IN' to 0 and return true; otherwise return false.  When the input
source is a block, add 1 to the value of 'BLK' to make the next block
the input source and current input buffer, and set '>IN' to 0; return
true if the new value of 'BLK' is a valid block number, false otherwise.
When the input source is a text file, attempt to read the next line from
the file.  If successful, make the result the current input buffer, set
'>IN' to 0 and return true; otherwise, return false.  A successful
result includes receipt of a line containing 0 characters.

   If you have to deal with a parsing word that does not have a
non-parsing factor, you can use 'execute-parsing' to pass a string to
it:

'execute-parsing'       ... addr u xt -- ...         gforth       "execute-parsing"
   Make addr u the current input source, execute xt '( ... -- ... )',
then restore the previous input source.

   Example:

     5 s" foo" ' constant execute-parsing
     \ equivalent to
     5 constant foo

   A definition of this word in Standard Forth is provided in
'compat/execute-parsing.fs'.

   If you want to run a parsing word on a file, the following word
should help:

'execute-parsing-file'       i*x fileid xt -- j*x         gforth       "execute-parsing-file"
   Make fileid the current input source, execute xt '( i*x -- j*x )',
then restore the previous input source.

5.15 Word Lists
===============

A wordlist is a list of named words; you can add new words and look up
words by name (and you can remove words in a restricted way with
markers).  Every named (and 'reveal'ed) word is in one wordlist.

   The text interpreter searches the wordlists present in the search
order (a stack of wordlists), from the top to the bottom.  Within each
wordlist, the search starts conceptually at the newest word; i.e., if
two words in a wordlist have the same name, the newer word is found.

   New words are added to the "compilation wordlist" (aka current
wordlist).

   A word list is identified by a cell-sized word list identifier (wid)
in much the same way as a file is identified by a file handle.  The
numerical value of the wid has no (portable) meaning, and might change
from session to session.

   The Standard Forth "Search order" word set is intended to provide a
set of low-level tools that allow various different schemes to be
implemented.  Gforth also provides 'vocabulary', a traditional Forth
word.  'compat/vocabulary.fs' provides an implementation in Standard
Forth.

'forth-wordlist'       -- wid         search       "forth-wordlist"
   'Constant' -- wid identifies the word list that includes all of the
standard words provided by Gforth.  When Gforth is invoked, this word
list is the compilation word list and is at the top of the search order.

'definitions'       --         search       "definitions"
   Set the compilation word list to be the same as the word list that is
currently at the top of the search order.

'get-current'       -- wid         search       "get-current"
   wid is the identifier of the current compilation word list.

'set-current'       wid --         search       "set-current"
   Set the compilation word list to the word list identified by wid.

'get-order'       -- widn .. wid1 n         search       "get-order"
   Copy the search order to the data stack.  The current search order
has n entries, of which wid1 represents the wordlist that is searched
first (the word list at the top of the search order) and widn represents
the wordlist that is searched last.

'set-order'       widn .. wid1 n --         search       "set-order"
   If N=0, empty the search order.  If N=-1, set the search order to the
implementation-defined minimum search order (for Gforth, this is the
word list 'Root').  Otherwise, replace the existing search order with
the N wid entries such that WID1 represents the word list that will be
searched first and WIDN represents the word list that will be searched
last.

'wordlist'       -- wid         search       "wordlist"
   Create a new, empty word list represented by wid.

'table'       -- wid         gforth       "table"
   Create a lookup table (case-sensitive, no warnings).

'cs-wordlist'       -- wid         gforth       "cs-wordlist"
   Create a case-sensitive wordlist.

'cs-vocabulary'       "name" --         gforth       "cs-vocabulary"
   Create a case-senisitve vocabulary

'>order'       wid --         gforth       "to-order"
   Push WID on the search order.

'previous'       --         search-ext       "previous"
   Drop the wordlist at the top of the search order.

'also'       --         search-ext       "also"
   Like 'DUP' for the search order.  Usually used before a vocabulary
(e.g., 'also Forth'); the combined effect is to push the wordlist
represented by the vocabulary on the search order.

'Forth'       --         search-ext       "Forth"
   Replace the wid at the top of the search order with the wid
associated with the word list 'forth-wordlist'.

'Only'       --         search-ext       "Only"
   Set the search order to the implementation-defined minimum search
order (for Gforth, this is the word list 'Root').

'order'       --         search-ext       "order"
   Print the search order and the compilation word list.  The word lists
are printed in the order in which they are searched (which is reversed
with respect to the conventional way of displaying stacks).  The
compilation word list is displayed last.

'find'       c-addr -- xt +-1 | c-addr 0         core,search       "find"
   Search all word lists in the current search order for the definition
named by the counted string at c-addr.  If the definition is not found,
return 0.  If the definition is found return 1 (if the definition has
non-default compilation semantics) or -1 (if the definition has default
compilation semantics).  The xt returned in interpret state represents
the interpretation semantics.  The xt returned in compile state
represented either the compilation semantics (for non-default
compilation semantics) or the run-time semantics that the compilation
semantics would 'compile,' (for default compilation semantics).  The ANS
Forth standard does not specify clearly what the returned xt represents
(and also talks about immediacy instead of non-default compilation
semantics), so this word is questionable in portable programs.  If
non-portability is ok, 'find-name' and friends are better (*note Name
token::).

'search-wordlist'       c-addr count wid -- 0 | xt +-1         search       "search-wordlist"
   Search the word list identified by wid for the definition named by
the string at c-addr count.  If the definition is not found, return 0.
If the definition is found return 1 (if the definition is immediate) or
-1 (if the definition is not immediate) together with the xt.  In
Gforth, the xt returned represents the interpretation semantics.  ANS
Forth does not specify clearly what xt represents.

'words'       --         tools       "words"
   Display a list of all of the definitions in the word list at the top
of the search order.

'vlist'       --         gforth       "vlist"
   Old (pre-Forth-83) name for 'WORDS'.

'Root'       --         gforth       "Root"
   Add the root wordlist to the search order stack.  This vocabulary
makes up the minimum search order and contains only a search-order
words.

'Vocabulary'       "name" --         gforth       "Vocabulary"
   Create a definition "name" and associate a new word list with it.
The run-time effect of "name" is to replace the wid at the top of the
search order with the wid associated with the new word list.

'seal'       --         gforth       "seal"
   Remove all word lists from the search order stack other than the word
list that is currently on the top of the search order stack.

'vocs'       --         gforth       "vocs"
   List vocabularies and wordlists defined in the system.

'current'       -- addr         gforth       "current"
   'Variable' -- holds the wid of the compilation word list.

'context'       -- addr         gforth       "context"
   'context' '@' is the wid of the word list at the top of the search
order.

5.15.1 Vocabularies
-------------------

Here is an example of creating and using a new wordlist using Standard
Forth words:

     wordlist constant my-new-words-wordlist
     : my-new-words get-order nip my-new-words-wordlist swap set-order ;

     \ add it to the search order
     also my-new-words

     \ alternatively, add it to the search order and make it
     \ the compilation word list
     also my-new-words definitions
     \ type "order" to see the problem

   The problem with this example is that 'order' has no way to associate
the name 'my-new-words' with the wid of the word list (in Gforth,
'order' and 'vocs' will display '???' for a wid that has no associated
name).  There is no Standard way of associating a name with a wid.

   In Gforth, this example can be re-coded using 'vocabulary', which
associates a name with a wid:

     vocabulary my-new-words

     \ add it to the search order
     also my-new-words

     \ alternatively, add it to the search order and make it
     \ the compilation word list
     my-new-words definitions
     \ type "order" to see that the problem is solved

5.15.2 Why use word lists?
--------------------------

Here are some reasons why people use wordlists:

   * To prevent a set of words from being used outside the context in
     which they are valid.  Two classic examples of this are an
     integrated editor (all of the edit commands are defined in a
     separate word list; the search order is set to the editor word list
     when the editor is invoked; the old search order is restored when
     the editor is terminated) and an integrated assembler (the op-codes
     for the machine are defined in a separate word list which is used
     when a 'CODE' word is defined).

   * To organize the words of an application or library into a
     user-visible set (in 'forth-wordlist' or some other common
     wordlist) and a set of helper words used just for the
     implementation (hidden in a separate wordlist).  This keeps
     'words'' output smaller, separates implementation and interface,
     and reduces the chance of name conflicts within the common
     wordlist.

   * To prevent a name-space clash between multiple definitions with the
     same name.  For example, when building a cross-compiler you might
     have a word 'IF' that generates conditional code for your target
     system.  By placing this definition in a different word list you
     can control whether the host system's 'IF' or the target system's
     'IF' get used in any particular context by controlling the order of
     the word lists on the search order stack.

   The downsides of using wordlists are:

   * Debugging becomes more cumbersome.

   * Name conflicts worked around with wordlists are still there, and
     you have to arrange the search order carefully to get the desired
     results; if you forget to do that, you get hard-to-find errors (as
     in any case where you read the code differently from the compiler;
     'see' can help seeing which of several possible words the name
     resolves to in such cases).  'See' displays just the name of the
     words, not what wordlist they belong to, so it might be misleading.
     Using unique names is a better approach to avoid name conflicts.

   * You have to explicitly undo any changes to the search order.  In
     many cases it would be more convenient if this happened implicitly.
     Gforth currently does not provide such a feature, but it may do so
     in the future.

5.15.3 Word list example
------------------------

The following example is from the garbage collector
(http://www.complang.tuwien.ac.at/forth/garbage-collection.zip) and uses
wordlists to separate public words from helper words:

     get-current ( wid )
     vocabulary garbage-collector also garbage-collector definitions
     ... \ define helper words
     ( wid ) set-current \ restore original (i.e., public) compilation wordlist
     ... \ define the public (i.e., API) words
         \ they can refer to the helper words
     previous \ restore original search order (helper words become invisible)

5.16 Environmental Queries
==========================

Forth-94 introduced the idea of "environmental queries" as a way for a
program running on a system to determine certain characteristics of the
system.  The Standard specifies a number of strings that might be
recognised by a system.

   The Standard requires that the header space used for environmental
queries be distinct from the header space used for definitions.

   Typically, environmental queries are supported by creating a set of
definitions in a word list that is only used during environmental
queries; that is what Gforth does.  There is no Standard way of adding
definitions to the set of recognised environmental queries, but any
implementation that supports the loading of optional word sets must have
some mechanism for doing this (after loading the word set, the
associated environmental query string must return 'true').  In Gforth,
the word list used to honour environmental queries can be manipulated
just like any other word list.

'environment?'       c-addr u -- false / ... true         core       "environment-query"
   c-addr, u specify a counted string.  If the string is not recognised,
return a 'false' flag.  Otherwise return a 'true' flag and some
(string-specific) information about the queried string.

'environment-wordlist'       -- wid         gforth       "environment-wordlist"
   wid identifies the word list that is searched by environmental
queries.

'gforth'       -- c-addr u         gforth-environment       "gforth"
   Counted string representing a version string for this version of
Gforth (for versions>0.3.0).  The version strings of the various
versions are guaranteed to be ordered lexicographically.

'os-class'       -- c-addr u         gforth-environment       "os-class"
   Counted string representing a description of the host operating
system.

   Note that, whilst the documentation for (e.g.)  'gforth' shows it
returning two items on the stack, querying it using 'environment?' will
return an additional item; the 'true' flag that shows that the string
was recognised.

   Here are some examples of using environmental queries:

     s" address-unit-bits" environment? 0=
     [IF]
          cr .( environmental attribute address-units-bits unknown... ) cr
     [ELSE]
          drop \ ensure balanced stack effect
     [THEN]

     \ this might occur in the prelude of a standard program that uses THROW
     s" exception" environment? [IF]
        0= [IF]
           : throw abort" exception thrown" ;
        [THEN]
     [ELSE] \ we don't know, so make sure
        : throw abort" exception thrown" ;
     [THEN]

     s" gforth" environment? [IF] .( Gforth version ) TYPE
                             [ELSE] .( Not Gforth..) [THEN]

     \ a program using v*
     s" gforth" environment? [IF]
       s" 0.5.0" compare 0< [IF] \ v* is a primitive since 0.5.0
        : v* ( f_addr1 nstride1 f_addr2 nstride2 ucount -- r )
          >r swap 2swap swap 0e r> 0 ?DO
            dup f@ over + 2swap dup f@ f* f+ over + 2swap
          LOOP
          2drop 2drop ;
       [THEN]
     [ELSE] \
       : v* ( f_addr1 nstride1 f_addr2 nstride2 ucount -- r )
       ...
     [THEN]

   Here is an example of adding a definition to the environment word
list:

     get-current environment-wordlist set-current
     true constant block
     true constant block-ext
     set-current

   You can see what definitions are in the environment word list like
this:

     environment-wordlist >order words previous

5.17 Files
==========

Gforth provides facilities for accessing files that are stored in the
host operating system's file-system.  Files that are processed by Gforth
can be divided into two categories:

   * Files that are processed by the Text Interpreter ("Forth source
     files").
   * Files that are processed by some other program ("general files").

5.17.1 Forth source files
-------------------------

The simplest way to interpret the contents of a file is to use one of
these two formats:

     include mysource.fs
     s" mysource.fs" included

   You usually want to include a file only if it is not included already
(by, say, another source file).  In that case, you can use one of these
three formats:

     require mysource.fs
     needs mysource.fs
     s" mysource.fs" required

   It is good practice to write your source files such that interpreting
them does not change the stack.  Source files designed in this way can
be used with 'required' and friends without complications.  For example:

     1024 require foo.fs drop

   Here you want to pass the argument 1024 (e.g., a buffer size) to
'foo.fs'.  Interpreting 'foo.fs' has the stack effect ( n -- n ), which
allows its use with 'require'.  Of course with such parameters to
required files, you have to ensure that the first 'require' fits for all
uses (i.e., 'require' it early in the master load file).

'include-file'       i*x wfileid -- j*x         file       "include-file"
   Interpret (process using the text interpreter) the contents of the
file WFILEID.

'included'       i*x c-addr u -- j*x         file       "included"
   'include-file' the file whose name is given by the string C-ADDR U.

'included?'       c-addr u -- f         gforth       "included?"
   True only if the file C-ADDR U is in the list of earlier included
files.  If the file has been loaded, it may have been specified as, say,
'foo.fs' and found somewhere on the Forth search path.  To return 'true'
from 'included?', you must specify the exact path to the file, even if
that is './foo.fs'

'include'       ... "file" -- ...         gforth       "include"
   'include-file' the file FILE.

'required'       i*x addr u -- i*x         gforth       "required"
   'include-file' the file with the name given by ADDR U, if it is not
'included' (or 'required') already.  Currently this works by comparing
the name of the file (with path) against the names of earlier included
files.

'require'       ... "file" -- ...         gforth       "require"
   'include-file' FILE only if it is not included already.

'needs'       ... "name" -- ...         gforth       "needs"
   An alias for 'require'; exists on other systems (e.g., Win32Forth).

'sourcefilename'       -- c-addr u         gforth       "sourcefilename"
   The name of the source file which is currently the input source.  The
result is valid only while the file is being loaded.  If the current
input source is no (stream) file, the result is undefined.  In Gforth,
the result is valid during the whole session (but not across
'savesystem' etc.).

'sourceline#'       -- u         gforth       "sourceline-number"
   The line number of the line that is currently being interpreted from
a (stream) file.  The first line has the number 1.  If the current input
source is not a (stream) file, the result is undefined.

   A definition in Standard Forth for 'required' is provided in
'compat/required.fs'.

5.17.2 General files
--------------------

Files are opened/created by name and type.  The following file access
methods (FAMs) are recognised:

'r/o'       -- fam         file       "r-o"

'r/w'       -- fam         file       "r-w"

'w/o'       -- fam         file       "w-o"

'bin'       fam1 -- fam2         file       "bin"

   When a file is opened/created, it returns a file identifier, wfileid
that is used for all other file commands.  All file commands also return
a status value, wior, that is 0 for a successful operation and an
implementation-defined non-zero value in the case of an error.

'open-file'       c-addr u wfam -- wfileid wior        file       "open-file"

'create-file'       c-addr u wfam -- wfileid wior        file       "create-file"

'close-file'       wfileid -- wior        file       "close-file"

'delete-file'       c-addr u -- wior        file       "delete-file"

'rename-file'       c-addr1 u1 c-addr2 u2 -- wior        file-ext       "rename-file"
   Rename file c_addr1 u1 to new name c_addr2 u2

'read-file'       c-addr u1 wfileid -- u2 wior        file       "read-file"

'read-line'       c_addr u1 wfileid -- u2 flag wior         file       "read-line"

'key-file'       fd -- key         unknown       "key-file"
   Read one character n from wfileid.  This word disables buffering for
wfileid.  If you want to read characters from a terminal in
non-canonical (raw) mode, you have to put the terminal in non-canonical
mode yourself (using the C interface); the exception is 'stdin': Gforth
automatically puts it into non-canonical mode.

'key?-file'       wfileid -- f        gforth       "key-q-file"
   f is true if at least one character can be read from wfileid without
blocking.  If you also want to use 'read-file' or 'read-line' on the
file, you have to call 'key?-file' or 'key-file' first (these two words
disable buffering).

'write-file'       c-addr u1 wfileid -- wior        file       "write-file"

'write-line'       c-addr u wfileid -- ior         file       "write-line"

'emit-file'       c wfileid -- wior        gforth       "emit-file"

'flush-file'       wfileid -- wior        file-ext       "flush-file"

'file-status'       c-addr u -- wfam wior        file-ext       "file-status"

'file-position'       wfileid -- ud wior        file       "file-position"

'reposition-file'       ud wfileid -- wior        file       "reposition-file"

'file-size'       wfileid -- ud wior        file       "file-size"

'resize-file'       ud wfileid -- wior        file       "resize-file"

'slurp-file'       c-addr1 u1 -- c-addr2 u2         gforth       "slurp-file"
   C-ADDR1 U1 is the filename, C-ADDR2 U2 is the file's contents

'slurp-fid'       fid -- addr u         gforth       "slurp-fid"
   ADDR U is the content of the file FID

'stdin'       -- wfileid        gforth       "stdin"
   The standard input file of the Gforth process.

'stdout'       -- wfileid        gforth       "stdout"
   The standard output file of the Gforth process.

'stderr'       -- wfileid        gforth       "stderr"
   The standard error output file of the Gforth process.

5.17.3 Redirection
------------------

You can redirect the output of 'type' and 'emit' and all the words that
use them (all output words that don't have an explicit target file) to
an arbitrary file with the 'outfile-execute', used like this:

     : some-warning ( n -- )
         cr ." warning# " . ;

     : print-some-warning ( n -- )
         ['] some-warning stderr outfile-execute ;

   After 'some-warning' is executed, the original output direction is
restored; this construct is safe against exceptions.  Similarly, there
is 'infile-execute' for redirecting the input of 'key' and its users
(any input word that does not take a file explicitly).

'outfile-execute'       ... xt file-id -- ...         gforth       "outfile-execute"
   execute xt with the output of 'type' etc.  redirected to file-id.

'infile-execute'       ... xt file-id -- ...         gforth       "infile-execute"
   execute xt with the input of 'key' etc.  redirected to file-id.

   If you do not want to redirect the input or output to a file, you can
also make use of the fact that 'key', 'emit' and 'type' are deferred
words (*note Deferred Words::).  However, in that case you have to worry
about the restoration and the protection against exceptions yourself;
also, note that for redirecting the output in this way, you have to
redirect both 'emit' and 'type'.

5.17.4 Directories
------------------

You can open and read directories similar to files.  Reading gives you
one directory entry at a time; you can match that to a filename (with
wildcards).

'open-dir'       c-addr u -- wdirid wior        gforth       "open-dir"
   Open the directory specified by c-addr, u and return dir-id for
futher access to it.

'read-dir'       c-addr u1 wdirid -- u2 flag wior        gforth       "read-dir"
   Attempt to read the next entry from the directory specified by dir-id
to the buffer of length u1 at address c-addr.  If the attempt fails
because there is no more entries, ior=0, flag=0, u2=0, and the buffer is
unmodified.  If the attempt to read the next entry fails because of any
other reason, return ior<>0.  If the attempt succeeds, store file name
to the buffer at c-addr and return ior=0, flag=true and u2 equal to the
size of the file name.  If the length of the file name is greater than
u1, store first u1 characters from file name into the buffer and
indicate "name too long" with ior, flag=true, and u2=u1.

'close-dir'       wdirid -- wior        gforth       "close-dir"
   Close the directory specified by dir-id.

'filename-match'       c-addr1 u1 c-addr2 u2 -- flag        gforth       "match-file"
   match the file name C_ADDR1 U1 with the pattern C_ADDR2 U2.  Patterns
match char by char except for the special characters '*' and '?', which
are wildcards for several ('*') or one ('?') character.

'get-dir'       c-addr1 u1 -- c-addr2 u2        gforth       "get-dir"
   Store the current directory in the buffer specified by c-addr1, u1.
If the buffer size is not sufficient, return 0 0

'set-dir'       c-addr u -- wior        gforth       "set-dir"
   Change the current directory to c-addr, u.  Return an error if this
is not possible

'=mkdir'       c-addr u wmode -- wior        gforth       "equals-mkdir"
   Create directory c-addr u with mode wmode.

'mkdir-parents'       c-addr u mode -- ior         unknown       "mkdir-parents"
   create the directory c-addr u and all its parents with mode mode
(modified by umask)

5.17.5 Search Paths
-------------------

If you specify an absolute filename (i.e., a filename starting with '/'
or '~', or with ':' in the second position (as in 'C:...')) for
'included' and friends, that file is included just as you would expect.

   If the filename starts with './', this refers to the directory that
the present file was 'included' from.  This allows files to include
other files relative to their own position (irrespective of the current
working directory or the absolute position).  This feature is essential
for libraries consisting of several files, where a file may include
other files from the library.  It corresponds to '#include "..."' in C.
If the current input source is not a file, '.' refers to the directory
of the innermost file being included, or, if there is no file being
included, to the current working directory.

   For relative filenames (not starting with './'), Gforth uses a search
path similar to Forth's search order (*note Word Lists::).  It tries to
find the given filename in the directories present in the path, and
includes the first one it finds.  There are separate search paths for
Forth source files and general files.  If the search path contains the
directory '.', this refers to the directory of the current file, or the
working directory, as if the file had been specified with './'.

   Use '~+' to refer to the current working directory (as in the
'bash').

5.17.5.1 Source Search Paths
............................

The search path is initialized when you start Gforth (*note Invoking
Gforth::).  You can display it and change it using 'fpath' in
combination with the general path handling words.

'fpath'       -- path-addr         gforth       "fpath"

Here is an example of using 'fpath' and 'require':

     fpath path= /usr/lib/forth/|./
     require timer.fs

5.17.5.2 General Search Paths
.............................

Your application may need to search files in several directories, like
'included' does.  To facilitate this, Gforth allows you to define and
use your own search paths, by providing generic equivalents of the Forth
search path words:

'open-path-file'       addr1 u1 path-addr -- wfileid addr2 u2 0 | ior         gforth       "open-path-file"
   Look in path PATH-ADDR for the file specified by ADDR1 U1.  If found,
the resulting path and and (read-only) open file descriptor are
returned.  If the file is not found, IOR is what came back from the last
attempt at opening the file (in the current implementation).

   doc-path-allot
'clear-path'       path-addr --         gforth       "clear-path"
   Set the path path-addr to empty.

'also-path'       c-addr len path-addr --         gforth       "also-path"
   add the directory c-addr len to path-addr.

'.path'       path-addr --         gforth       ".path"
   Display the contents of the search path PATH-ADDR.

'path+'       path-addr  "dir" --         gforth       "path+"
   Add the directory DIR to the search path PATH-ADDR.

'path='       path-addr "dir1|dir2|dir3"         gforth       "path="
   Make a complete new search path; the path separator is |.

   Here's an example of creating an empty search path:
     create mypath 500 path-allot \ maximum length 500 chars (is checked)

5.18 Blocks
===========

When you run Gforth on a modern desk-top computer, it runs under the
control of an operating system which provides certain services.  One of
these services is FILE SERVICES, which allows Forth source code and data
to be stored in files and read into Gforth (*note Files::).

   Traditionally, Forth has been an important programming language on
systems where it has interfaced directly to the underlying hardware with
no intervening operating system.  Forth provides a mechanism, called
"blocks", for accessing mass storage on such systems.

   A block is a 1024-byte data area, which can be used to hold data or
Forth source code.  No structure is imposed on the contents of the
block.  A block is identified by its number; blocks are numbered
contiguously from 1 to an implementation-defined maximum.

   A typical system that used blocks but no operating system might use a
single floppy-disk drive for mass storage, with the disks formatted to
provide 256-byte sectors.  Blocks would be implemented by assigning the
first four sectors of the disk to block 1, the second four sectors to
block 2 and so on, up to the limit of the capacity of the disk.  The
disk would not contain any file system information, just the set of
blocks.

   On systems that do provide file services, blocks are typically
implemented by storing a sequence of blocks within a single "blocks
file".  The size of the blocks file will be an exact multiple of 1024
bytes, corresponding to the number of blocks it contains.  This is the
mechanism that Gforth uses.

   Only one blocks file can be open at a time.  If you use block words
without having specified a blocks file, Gforth defaults to the blocks
file 'blocks.fb'.  Gforth uses the Forth search path when attempting to
locate a blocks file (*note Source Search Paths::).

   When you read and write blocks under program control, Gforth uses a
number of "block buffers" as intermediate storage.  These buffers are
not used when you use 'load' to interpret the contents of a block.

   The behaviour of the block buffers is analagous to that of a cache.
Each block buffer has three states:

   * Unassigned
   * Assigned-clean
   * Assigned-dirty

   Initially, all block buffers are unassigned.  In order to access a
block, the block (specified by its block number) must be assigned to a
block buffer.

   The assignment of a block to a block buffer is performed by 'block'
or 'buffer'.  Use 'block' when you wish to modify the existing contents
of a block.  Use 'buffer' when you don't care about the existing
contents of the block(1).

   Once a block has been assigned to a block buffer using 'block' or
'buffer', that block buffer becomes the current block buffer.  Data may
only be manipulated (read or written) within the current block buffer.

   When the contents of the current block buffer has been modified it is
necessary, _before calling 'block' or 'buffer' again_, to either abandon
the changes (by doing nothing) or mark the block as changed
(assigned-dirty), using 'update'.  Using 'update' does not change the
blocks file; it simply changes a block buffer's state to assigned-dirty.
The block will be written implicitly when it's buffer is needed for
another block, or explicitly by 'flush' or 'save-buffers'.

   word 'Flush' writes all assigned-dirty blocks back to the blocks file
on disk.  Leaving Gforth with 'bye' also performs a 'flush'.

   In Gforth, 'block' and 'buffer' use a direct-mapped algorithm to
assign a block buffer to a block.  That means that any particular block
can only be assigned to one specific block buffer, called (for the
particular operation) the victim buffer.  If the victim buffer is
unassigned or assigned-clean it is allocated to the new block
immediately.  If it is assigned-dirty its current contents are written
back to the blocks file on disk before it is allocated to the new block.

   Although no structure is imposed on the contents of a block, it is
traditional to display the contents as 16 lines each of 64 characters.
A block provides a single, continuous stream of input (for example, it
acts as a single parse area) -- there are no end-of-line characters
within a block, and no end-of-file character at the end of a block.
There are two consequences of this:

   * The last character of one line wraps straight into the first
     character of the following line
   * The word '\' -- comment to end of line -- requires special treatment;
     in the context of a block it causes all characters until the end of
     the current 64-character "line" to be ignored.

   In Gforth, when you use 'block' with a non-existent block number, the
current blocks file will be extended to the appropriate size and the
block buffer will be initialised with spaces.

   Gforth includes a simple block editor (type 'use blocked.fb 0 list'
for details) but doesn't encourage the use of blocks; the mechanism is
only provided for backward compatibility.

   Common techniques that are used when working with blocks include:

   * A screen editor that allows you to edit blocks without leaving the
     Forth environment.
   * Shadow screens; where every code block has an associated block
     containing comments (for example: code in odd block numbers,
     comments in even block numbers).  Typically, the block editor
     provides a convenient mechanism to toggle between code and
     comments.
   * Load blocks; a single block (typically block 1) contains a number
     of 'thru' commands which 'load' the whole of the application.

   See Frank Sergeant's Pygmy Forth to see just how well blocks can be
integrated into a Forth programming environment.

'open-blocks'       c-addr u --         gforth       "open-blocks"
   Use the file, whose name is given by c-addr u, as the blocks file.

'use'       "file" --         gforth       "use"
   Use file as the blocks file.

'block-offset'       -- addr         gforth       "block-offset"
   User variable containing the number of the first block (default since
0.5.0: 0).  Block files created with Gforth versions before 0.5.0 have
the offset 1.  If you use these files you can: '1 offset !'; or add 1 to
every block number used; or prepend 1024 characters to the file.

'get-block-fid'       -- wfileid         gforth       "get-block-fid"
   Return the file-id of the current blocks file.  If no blocks file has
been opened, use 'blocks.fb' as the default blocks file.

'block-position'       u --         block       "block-position"
   Position the block file to the start of block u.

'list'       u --         block-ext       "list"
   Display block u.  In Gforth, the block is displayed as 16 numbered
lines, each of 64 characters.

'scr'       -- a-addr         block-ext       "s-c-r"
   'User' variable containing the block number of the block most
recently processed by 'list'.

'block'       u -- a-addr         block       "block"
   If a block buffer is assigned for block u, return its start address,
a-addr.  Otherwise, assign a block buffer for block u (if the assigned
block buffer has been 'update'd, transfer the contents to mass storage),
read the block into the block buffer and return its start address,
a-addr.

'buffer'       u -- a-addr         block       "buffer"
   If a block buffer is assigned for block u, return its start address,
a-addr.  Otherwise, assign a block buffer for block u (if the assigned
block buffer has been 'update'd, transfer the contents to mass storage)
and return its start address, a-addr.  The subtle difference between
'buffer' and 'block' mean that you should only use 'buffer' if you don't
care about the previous contents of block u.  In Gforth, this simply
calls 'block'.

'empty-buffers'       --         block-ext       "empty-buffers"
   Mark all block buffers as unassigned; if any had been marked as
assigned-dirty (by 'update'), the changes to those blocks will be lost.

'empty-buffer'       buffer --         gforth       "empty-buffer"

'update'       --         block       "update"
   Mark the state of the current block buffer as assigned-dirty.

'updated?'       n -- f         gforth       "updated?"
   Return true if 'updated' has been used to mark block n as
assigned-dirty.

'save-buffers'       --         block       "save-buffers"
   Transfer the contents of each 'update'd block buffer to mass storage,
then mark all block buffers as assigned-clean.

'save-buffer'       buffer --         gforth       "save-buffer"

'flush'       --         block       "flush"
   Perform the functions of 'save-buffers' then 'empty-buffers'.

'load'       i*x u -- j*x         block       "load"
   Text-interpret block u.  Block 0 cannot be 'load'ed.

'thru'       i*x n1 n2 -- j*x         block-ext       "thru"
   'load' the blocks n1 through n2 in sequence.

'+load'       i*x n -- j*x         gforth       "+load"
   Used within a block to load the block specified as the current block
+ n.

'+thru'       i*x n1 n2 -- j*x         gforth       "+thru"
   Used within a block to load the range of blocks specified as the
current block + n1 thru the current block + n2.

'-->'       --         gforth       "chain"
   If this symbol is encountered whilst loading block n, discard the
remainder of the block and load block n+1.  Used for chaining multiple
blocks together as a single loadable unit.  Not recommended, because it
destroys the independence of loading.  Use 'thru' (which is standard) or
'+thru' instead.

'block-included'       a-addr u --         gforth       "block-included"
   Use within a block that is to be processed by 'load'.  Save the
current blocks file specification, open the blocks file specified by
a-addr u and 'load' block 1 from that file (which may in turn chain or
load other blocks).  Finally, close the blocks file and restore the
original blocks file.

   ---------- Footnotes ----------

   (1) The Standard Forth definition of 'buffer' is intended not to
cause disk I/O; if the data associated with the particular block is
already stored in a block buffer due to an earlier 'block' command,
'buffer' will return that block buffer and the existing contents of the
block will be available.  Otherwise, 'buffer' will simply assign a new,
empty block buffer for the block.

5.19 Other I/O
==============

5.19.1 Simple numeric output
----------------------------

The simplest output functions are those that display numbers from the
data or floating-point stacks.  Floating-point output is always
displayed using base 10.  Numbers displayed from the data stack use the
value stored in 'base'.

'.'       n --         core       "dot"
   Display (the signed single number) N in free-format, followed by a
space.

'dec.'       n --         gforth       "dec."
   Display n as a signed decimal number, followed by a space.

'hex.'       u --         gforth       "hex."
   Display u as an unsigned hex number, prefixed with a "$" and followed
by a space.

'u.'       u --         core       "u-dot"
   Display (the unsigned single number) U in free-format, followed by a
space.

'.r'       n1 n2 --         core-ext       "dot-r"
   Display N1 right-aligned in a field N2 characters wide.  If more than
N2 characters are needed to display the number, all digits are
displayed.  If appropriate, N2 must include a character for a leading
"-".

'u.r'       u n --         core-ext       "u-dot-r"
   Display U right-aligned in a field N characters wide.  If more than N
characters are needed to display the number, all digits are displayed.

'd.'       d --         double       "d-dot"
   Display (the signed double number) D in free-format.  followed by a
space.

'ud.'       ud --         gforth       "u-d-dot"
   Display (the signed double number) UD in free-format, followed by a
space.

'd.r'       d n --         double       "d-dot-r"
   Display D right-aligned in a field N characters wide.  If more than N
characters are needed to display the number, all digits are displayed.
If appropriate, N must include a character for a leading "-".

'ud.r'       ud n --         gforth       "u-d-dot-r"
   Display UD right-aligned in a field N characters wide.  If more than
N characters are needed to display the number, all digits are displayed.

'f.'       r --         float-ext       "f-dot"
   Display (the floating-point number) r without exponent, followed by a
space.

'fe.'       r --         float-ext       "f-e-dot"
   Display r using engineering notation (with exponent dividable by 3),
followed by a space.

'fs.'       r --         gforth       "f-s-dot"
   Display r using scientific notation (with exponent), followed by a
space.

'fp.'       r --         float-ext       "f-e-dot"
   Display r using SI prefix notation (with exponent dividable by 3,
converted into SI prefixes if available), followed by a space.

   Examples of printing the number 1234.5678E23 in the different
floating-point output formats are shown below.

     f. 123456780000000000000000000.
     fe. 123.456780000000E24
     fs. 1.23456780000000E26
     fp. 123.456780000000Y

'precision'       -- u         float-ext       "precision"
   u is the number of significant digits currently used by 'F.' 'FE.'
and 'FS.'

'set-precision'       u --         float-ext       "set-precision"
   Set the number of significant digits currently used by 'F.' 'FE.' and
'FS.' to u.

'f.rdp'       rf +nr +nd +np --         gforth       "f.rdp"
   Print float rf formatted.  The total width of the output is nr.  For
fixed-point notation, the number of digits after the decimal point is
+nd and the minimum number of significant digits is np.  'Set-precision'
has no effect on 'f.rdp'.  Fixed-point notation is used if the number of
siginicant digits would be at least np and if the number of digits
before the decimal point would fit.  If fixed-point notation is not
used, exponential notation is used, and if that does not fit, asterisks
are printed.  We recommend using nr>=7 to avoid the risk of numbers not
fitting at all.  We recommend nr>=np+5 to avoid cases where 'f.rdp'
switches to exponential notation because fixed-point notation would have
too few significant digits, yet exponential notation offers fewer
significant digits.  We recommend nr>=nd+2, if you want to have
fixed-point notation for some numbers; the smaller the value of np, the
more cases are shown in fixed-point notation (cases where few or no
significant digits remain in fixed-point notation).  We recommend np>nr,
if you want to have exponential notation for all numbers.

   For 'f.rdp' the output depends on the parameters.  To give you a
better intuition of how they influence the output, here are some
examples of parameter combinations; in each line the same number is
printed, in each column the same parameter combination is used for
printing:

         12 13 0    7 3 4   7 3 0   7 3 1   7 5 1   7 7 1   7 0 2  4 2 1
     |-1.234568E-6|-1.2E-6| -0.000|-1.2E-6|-1.2E-6|-1.2E-6|-1.2E-6|****|
     |-1.234568E-5|-1.2E-5| -0.000|-1.2E-5|-.00001|-1.2E-5|-1.2E-5|****|
     |-1.234568E-4|-1.2E-4| -0.000|-1.2E-4|-.00012|-1.2E-4|-1.2E-4|****|
     |-1.234568E-3|-1.2E-3| -0.001| -0.001|-.00123|-1.2E-3|-1.2E-3|****|
     |-1.234568E-2|-1.2E-2| -0.012| -0.012|-.01235|-1.2E-2|-1.2E-2|-.01|
     |-1.234568E-1|-1.2E-1| -0.123| -0.123|-.12346|-1.2E-1|-1.2E-1|-.12|
     |-1.2345679E0| -1.235| -1.235| -1.235|-1.23E0|-1.23E0|-1.23E0|-1E0|
     |-1.2345679E1|-12.346|-12.346|-12.346|-1.23E1|-1.23E1|   -12.|-1E1|
     |-1.2345679E2|-1.23E2|-1.23E2|-1.23E2|-1.23E2|-1.23E2|  -123.|-1E2|
     |-1.2345679E3|-1.23E3|-1.23E3|-1.23E3|-1.23E3|-1.23E3| -1235.|-1E3|
     |-1.2345679E4|-1.23E4|-1.23E4|-1.23E4|-1.23E4|-1.23E4|-12346.|-1E4|
     |-1.2345679E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1E5|

5.19.2 Formatted numeric output
-------------------------------

Forth traditionally uses a technique called "pictured numeric output"
for formatted printing of integers.  In this technique, digits are
extracted from the number (using the current output radix defined by
'base'), converted to ASCII codes and appended to a string that is built
in a scratch-pad area of memory (*note Implementation-defined options:
core-idef.).  Arbitrary characters can be appended to the string during
the extraction process.  The completed string is specified by an address
and length and can be manipulated ('TYPE'ed, copied, modified) under
program control.

   All of the integer output words described in the previous section
(*note Simple numeric output::) are implemented in Gforth using pictured
numeric output.

   Three important things to remember about pictured numeric output:

   * It always operates on double-precision numbers; to display a
     single-precision number, convert it first (for ways of doing this
     *note Double precision::).
   * It always treats the double-precision number as though it were
     unsigned.  The examples below show ways of printing signed numbers.
   * The string is built up from right to left; least significant digit
     first.

'<#'       --         core       "less-number-sign"
   Initialise/clear the pictured numeric output string.

'<<#'       --         gforth       "less-less-number-sign"
   Start a hold area that ends with '#>>'.  Can be nested in each other
and in '<#'.  Note: if you do not match up the '<<#'s with '#>>'s, you
will eventually run out of hold area; you can reset the hold area to
empty with '<#'.

'#'       ud1 -- ud2         core       "number-sign"
   Used within '<#' and '#>'.  Add the next least-significant digit to
the pictured numeric output string.  This is achieved by dividing UD1 by
the number in 'base' to leave quotient UD2 and remainder N; N is
converted to the appropriate display code (eg ASCII code) and appended
to the string.  If the number has been fully converted, UD1 will be 0
and '#' will append a "0" to the string.

'#s'       ud -- 0 0         core       "number-sign-s"
   Used within '<#' and '#>'.  Convert all remaining digits using the
same algorithm as for '#'.  '#s' will convert at least one digit.
Therefore, if UD is 0, '#s' will append a "0" to the pictured numeric
output string.

'hold'       char --         core       "hold"
   Used within '<#' and '#>'.  Append the character CHAR to the pictured
numeric output string.

'sign'       n --         core       "sign"
   Used within '<#' and '#>'.  If N (a SINGLE number) is negative,
append the display code for a minus sign to the pictured numeric output
string.  Since the string is built up "backwards" this is usually used
immediately prior to '#>', as shown in the examples below.

'#>'       xd -- addr u         core       "number-sign-greater"
   Complete the pictured numeric output string by discarding XD and
returning ADDR U; the address and length of the formatted string.  A
Standard program may modify characters within the string.

'#>>'       --         gforth       "number-sign-greater-greater"
   Release the hold area started with '<<#'.

'represent'       r c-addr u -- n f1 f2        float       "represent"

'f>str-rdp'       rf +nr +nd +np -- c-addr nr         gforth       "f>str-rdp"
   Convert rf into a string at c-addr nr.  The conversion rules and the
meanings of nr +nd np are the same as for 'f.rdp'.  The result in in the
pictured numeric output buffer and will be destroyed by anything
destroying that buffer.

'f>buf-rdp'       rf c-addr +nr +nd +np --         gforth       "f>buf-rdp"
   Convert rf into a string at c-addr nr.  The conversion rules and the
meanings of nr nd np are the same as for 'f.rdp'.

Here are some examples of using pictured numeric output:

     : my-u. ( u -- )
       \ Simplest use of pns.. behaves like Standard u.
       0              \ convert to unsigned double
       <<#            \ start conversion
       #s             \ convert all digits
       #>             \ complete conversion
       TYPE SPACE     \ display, with trailing space
       #>> ;          \ release hold area

     : cents-only ( u -- )
       0              \ convert to unsigned double
       <<#            \ start conversion
       # #            \ convert two least-significant digits
       #>             \ complete conversion, discard other digits
       TYPE SPACE     \ display, with trailing space
       #>> ;          \ release hold area

     : dollars-and-cents ( u -- )
       0              \ convert to unsigned double
       <<#            \ start conversion
       # #            \ convert two least-significant digits
       [char] . hold  \ insert decimal point
       #s             \ convert remaining digits
       [char] $ hold  \ append currency symbol
       #>             \ complete conversion
       TYPE SPACE     \ display, with trailing space
       #>> ;          \ release hold area

     : my-. ( n -- )
       \ handling negatives.. behaves like Standard .
       s>d            \ convert to signed double
       swap over dabs \ leave sign byte followed by unsigned double
       <<#            \ start conversion
       #s             \ convert all digits
       rot sign       \ get at sign byte, append "-" if needed
       #>             \ complete conversion
       TYPE SPACE     \ display, with trailing space
       #>> ;          \ release hold area

     : account. ( n -- )
       \ accountants don't like minus signs, they use parentheses
       \ for negative numbers
       s>d            \ convert to signed double
       swap over dabs \ leave sign byte followed by unsigned double
       <<#            \ start conversion
       2 pick         \ get copy of sign byte
       0< IF [char] ) hold THEN \ right-most character of output
       #s             \ convert all digits
       rot            \ get at sign byte
       0< IF [char] ( hold THEN
       #>             \ complete conversion
       TYPE SPACE     \ display, with trailing space
       #>> ;          \ release hold area


   Here are some examples of using these words:

     1 my-u. 1
     hex -1 my-u. decimal FFFFFFFF
     1 cents-only 01
     1234 cents-only 34
     2 dollars-and-cents $0.02
     1234 dollars-and-cents $12.34
     123 my-. 123
     -123 my. -123
     123 account. 123
     -456 account. (456)

5.19.3 String Formats
---------------------

Forth commonly uses two different methods for representing character
strings:

   * As a "counted string", represented by a c-addr.  The char addressed
     by c-addr contains a character-count, n, of the string and the
     string occupies the subsequent n char addresses in memory.
   * As cell pair on the stack; c-addr u, where u is the length of the
     string in characters, and c-addr is the address of the first byte
     of the string.

   Standard Forth encourages the use of the cell pair format when
representing strings.

'count'       c-addr1 -- c-addr2 u        core       "count"
   c-addr2 is the first character and u the length of the counted string
at c-addr1.

   For words that move, copy and search for strings see *note Memory
Blocks::.  For words that display characters and strings see *note
Displaying characters and strings::.

5.19.4 Displaying characters and strings
----------------------------------------

This section starts with a glossary of Forth words and ends with a set
of examples.

'bl'       -- c-char         core       "b-l"
   c-char is the character value for a space.

'space'       --         core       "space"
   Display one space.

'spaces'       u --         core       "spaces"
   Display N spaces.

'emit'       c --         core       "emit"
   Display the character associated with character value c.

'toupper'       c1 -- c2        gforth       "toupper"
   If c1 is a lower-case character (in the current locale), c2 is the
equivalent upper-case character.  All other characters are unchanged.

'."'       compilation 'ccc"' -- ; run-time --         core       "dot-quote"
   Compilation: Parse a string ccc delimited by a " (double quote).  At
run-time, display the string.  Interpretation semantics for this word
are undefined in ANS Forth.  Gforth's interpretation semantics are to
display the string.  This is the simplest way to display a string from
within a definition; see examples below.

'.('       compilation&interpretation "ccc<paren>" --         core-ext       "dot-paren"
   Compilation and interpretation semantics: Parse a string ccc
delimited by a ')' (right parenthesis).  Display the string.  This is
often used to display progress information during compilation; see
examples below.

'.\"'       compilation 'ccc"' -- ; run-time --         gforth       "dot-backslash-quote"
   Like '."', but translates C-like \-escape-sequences (see 'S\"').

'type'       c-addr u --         core       "type"
   If U>0, display U characters from a string starting with the
character stored at C-ADDR.

'typewhite'       addr n --         gforth       "typewhite"
   Like type, but white space is printed instead of the characters.

'cr'       --         core       "c-r"
   Output a newline (of the favourite kind of the host OS). Note that
due to the way the Forth command line interpreter inserts newlines, the
preferred way to use 'cr' is at the start of a piece of text; e.g., 'cr
." hello, world"'.

'S"'       compilation 'ccc"' -- ; run-time -- c-addr u         core,file       "s-quote"
   Compilation: Parse a string ccc delimited by a '"' (double quote).
At run-time, return the length, u, and the start address, c-addr of the
string.  Interpretation: parse the string as before, and return c-addr,
u.  Gforth 'allocate's the string.  The resulting memory leak is usually
not a problem; the exception is if you create strings containing 'S"'
and 'evaluate' them; then the leak is not bounded by the size of the
interpreted files and you may want to 'free' the strings.  Forth-2012
only guarantees two buffers of 80 characters each, so in standard
programs you should assume that the string lives only until the
next-but-one 's"'.

's\"'       compilation 'ccc"' -- ; run-time -- c-addr u         gforth       "s-backslash-quote"
   Like 'S"', but translates C-like \-escape-sequences, as follows: '\a'
BEL (alert), '\b' BS, '\e' ESC (not in C99), '\f' FF, '\n' newline, '\r'
CR, '\t' HT, '\v' VT, '\"' ", '\\' \, '\'[0-7]{1,3} octal numerical
character value (non-standard), '\x'[0-9a-f]{0,2} hex numerical
character value (standard only with two digits), '\u'[0-9a-f]{4} for
unicode codepoints (auto-merges surrogate pairs), '\U'[0-9a-f]{8} for
extended unicode code points; a '\' before any other character is
reserved.
Note that '\x'XX produces raw bytes, while '\u'XXXX and '\U'XXXXXXXX
produce code points for the current encoding.  E.g., if we use UTF-8
encoding and want to encode ä (code point U+00E4), you can write the
letter ä itself, or write '\xc3\xa4' (the UTF-8 bytes for this code
point), '\u00e4', or '\U000000e4'.

'C"'       compilation "ccc<quote>" -- ; run-time  -- c-addr         core-ext       "c-quote"
   Compilation: parse a string ccc delimited by a '"' (double quote).
At run-time, return c-addr which specifies the counted string ccc.
Interpretation semantics are undefined.

'char'       '<spaces>ccc' -- c         core       "char"
   Skip leading spaces.  Parse the string ccc and return c, the display
code representing the first character of ccc.

'[char]'       compilation '<spaces>ccc' -- ; run-time -- c         core       "bracket-char"
   Compilation: skip leading spaces.  Parse the string ccc.  Run-time:
return c, the display code representing the first character of ccc.
Interpretation semantics for this word are undefined.

As an example, consider the following text, stored in a file 'test.fs':

     .( text-1)
     : my-word
       ." text-2" cr
       .( text-3)
     ;

     ." text-4"

     : my-char
       [char] ALPHABET emit
       char emit
     ;

   When you load this code into Gforth, the following output is
generated:

     include test.fs <RET> text-1text-3text-4 ok

   * Messages 'text-1' and 'text-3' are displayed because '.(' is an
     immediate word; it behaves in the same way whether it is used
     inside or outside a colon definition.
   * Message 'text-4' is displayed because of Gforth's added
     interpretation semantics for '."'.
   * Message 'text-2' is not displayed, because the text interpreter
     performs the compilation semantics for '."' within the definition
     of 'my-word'.

   Here are some examples of executing 'my-word' and 'my-char':

     my-word <RET> text-2
      ok
     my-char fred <RET> Af ok
     my-char jim <RET> Aj ok

   * Message 'text-2' is displayed because of the run-time behaviour of
     '."'.
   * '[char]' compiles the "A" from "ALPHABET" and puts its display code
     on the stack at run-time.  'emit' always displays the character
     when 'my-char' is executed.
   * 'char' parses a string at run-time and the second 'emit' displays
     the first character of the string.
   * If you type 'see my-char' you can see that '[char]' discarded the
     text "LPHABET" and only compiled the display code for "A" into the
     definition of 'my-char'.

5.19.5 String words
-------------------

The following string library stores strings in ordinary variables, which
then contain a pointer to a cell-counted string allocated from the heap.
The string library originates from bigFORTH.

'delete'       buffer size u --         gforth-string       "delete"
   deletes the first U bytes from a buffer and fills the rest at the end
with blanks.

'insert'       string length buffer size --         gforth-string       "insert"
   inserts a string at the front of a buffer.  The remaining bytes are
moved on.

'$!'       addr1 u $addr --         gforth-string       "string-store"
   stores a newly allocated string buffer at an address, frees the
previous buffer if necessary.

'$@'       $addr -- addr2 u         gforth-string       "string-fetch"
   returns the stored string.

'$@len'       $addr -- u         gforth-string       "string-fetch-len"
   returns the length of the stored string.

'$!len'       u $addr --         gforth-string       "string-store-len"
   changes the length of the stored string.  Therefore we must change
the memory area and adjust address and count cell as well.

'$+!len'       u $addr -- addr         unknown       "$+!len"
   make room for u bytes at the end of the memory area referenced by
$addr; addr is the address of the first of these bytes.

'$del'       addr off u --         gforth-string       "string-del"
   deletes U bytes from a string with offset OFF.

'$ins'       addr1 u $addr off --         gforth-string       "string-ins"
   inserts a string at offset OFF.

'$+!'       addr1 u $addr --         gforth-string       "string-plus-store"
   appends a string to another.

'c$+!'       char $addr --         gforth-string       "c-string-plus-store"
   append a character to a string.

'$free'       $addr --         gforth-string       "string-free"
   free the string pointed to by addr, and set addr to 0

'$init'       $addr --         unknown       "$init"
   store an empty string there, regardless of what was in before

'$split'       addr u char -- addr1 u1 addr2 u2         gforth-string       "string-split"
   divides a string into two, with one char as separator (e.g.  '?' for
arguments in an HTML query)

'$iter'       .. $addr char xt -- ..         gforth-string       "string-iter"
   takes a string apart piece for piece, also with a character as
separator.  For each part a passed token will be called.  With this you
can take apart arguments -- separated with '&' -- at ease.

'$over'       addr u $addr off --         unknown       "$over"
   overwrite string at offset off with addr u

'$exec'       xt addr --         unknown       "$exec"
   execute xt while the standard output (TYPE, EMIT, and everything that
uses them) is appended to the string variable addr.

'$tmp'       xt -- addr u         unknown       "$tmp"
   generate a temporary string from the output of a word

'$.'       addr --         unknown       "$."
   print a string, shortcut

'$slurp'       fid addr --         unknown       "$slurp"
   slurp a file FID into a string ADDR2

'$slurp-file'       addr1 u1 addr2 --         unknown       "$slurp-file"
   slurp a named file ADDR1 U1 into a string ADDR2

'$[]'       u $[]addr -- addr'         unknown       "$[]"
   index into the string array and return the address at index U The
array will be resized as needed

'$[]!'       addr u n $[]addr --         gforth       "string-array-store"
   store a string into an array at index n

'$[]+!'       addr u n $[]addr --         gforth       "string-array-plus-store"
   add a string to the string at index n

'$[]@'       n $[]addr -- addr u         gforth       "string-array-fetch"
   fetch a string from array index n --- return the zero string if empty,
and don't accidentally grow the array.

'$[]#'       addr -- len         gforth       "string-array-num"
   return the number of elements in an array

'$[]map'       addr xt --         unknown       "$[]map"
   execute XT for all elements of the string array ADDR.  xt is ( ADDR U
-- ), getting one string at a time

'$[]slurp'       fid addr --         unknown       "$[]slurp"
   slurp a file FID line by line into a string array ADDR

'$[]slurp-file'       addr u $addr --         unknown       "$[]slurp-file"
   slurp a named file ADDR U line by line into a string array $ADDR

'$[].'       addr --         unknown       "$[]."
   print all array entries

'$[]free'       addr --         unknown       "$[]free"
   addr contains the address of a cell-counted string that contains the
addresses of a number of cell-counted strings; $[]free frees these
strings, frees the array, and sets addr to 0

'$save'       $addr --         unknown       "$save"
   push string to dictionary for savesys

'$[]save'       addr --         unknown       "$[]save"
   push string array to dictionary for savesys

'$boot'       $addr --         unknown       "$boot"
   take string from dictionary to allocated memory.  clean dictionary
afterwards.

'$[]boot'       addr --         unknown       "$[]boot"
   take string array from dictionary to allocated memory

'$saved'       addr --         unknown       "$saved"

'$[]saved'       addr --         unknown       "$[]saved"

'$Variable'       --         unknown       "$Variable"
   A string variable which is preserved across savesystem

'$[]Variable'       --         unknown       "$[]Variable"
   A string variable which is preserved across savesystem

5.19.6 Terminal output
----------------------

If you are outputting to a terminal, you may want to control the
positioning of the cursor:

'at-xy'       x y --         unknown       "at-xy"

   In order to know where to position the cursor, it is often helpful to
know the size of the screen:

'form'              unknown       "form"

   And sometimes you want to use:

'page'       --         unknown       "page"

   Note that on non-terminals you should use '12 emit', not 'page', to
get a form feed.

5.19.6.1 Color output
.....................

The following words are used to create (semantic) colorful output:

'default-color'       -- x         gforth       "default-color"
   use system-default color

'error-color'       -- x         gforth       "error-color"
   error color: red

'warning-color'       -- x         gforth       "warning-color"
   color for warnings: blue/yellow on black terminals

'info-color'       -- x         gforth       "info-color"
   color for info: green/cyan on black terminals

'success-color'       -- x         gforth       "success-color"
   color for success: green

'attr!'       attr --         gforth       "attr!"
   apply attribute to terminal (i.e.  set color)

'color-execute'       xt x-color -- ...         gforth       "color-execute"
   execute a xt using color

5.19.6.2 Color themes
.....................

Depending on wether you prefer bright or dark background the foreground
colors-theme can be changed by:

   doc-white-colors doc-black-colors

5.19.7 Single-key input
-----------------------

If you want to get a single printable character, you can use 'key'; to
check whether a character is available for 'key', you can use 'key?'.

'key'       -- char         unknown       "key"
   Receive (but do not display) one character, CHAR.

'key?'       -- flag         facility       "key-question"
   Determine whether a character is available.  If a character is
available, FLAG is true; the next call to 'key' will yield the
character.  Once 'key?' returns true, subsequent calls to 'key?' before
calling 'key' or 'ekey' will also return true.

   If you want to process a mix of printable and non-printable
characters, you can do that with 'ekey' and friends.  'Ekey' produces a
keyboard event that you have to convert into a character with
'ekey>char' or into a key identifier with 'ekey>fkey'.

   Typical code for using EKEY looks like this:

     ekey ekey>char if ( c )
       ... \ do something with the character
     else ekey>fkey if ( key-id )
       case
         k-up                                  of ... endof
         k-f1                                  of ... endof
         k-left k-shift-mask or k-ctrl-mask or of ... endof
         ...
       endcase
     else ( keyboard-event )
       drop \ just ignore an unknown keyboard event type
     then then

'ekey'       -- u         facility-ext       "e-key"
   Receive a keyboard event U (encoding implementation-defined).

'ekey>char'       u -- u false | c true         facility-ext       "e-key-to-char"
   Convert keyboard event U into character 'c' if possible.

'ekey>fkey'       u1 -- u2 f         X:ekeys       "ekey>fkey"
   If u1 is a keyboard event in the special key set, convert keyboard
event U1 into key id U2 and return true; otherwise return U1 and false.

'ekey?'       -- flag         facility-ext       "e-key-question"
   True if a keyboard event is available.

   The key identifiers for cursor keys are:

'k-left'       -- u         X:ekeys       "k-left"

'k-right'       -- u         X:ekeys       "k-right"

'k-up'       -- u         X:ekeys       "k-up"

'k-down'       -- u         X:ekeys       "k-down"

'k-home'       -- u         X:ekeys       "k-home"
   aka Pos1

'k-end'       -- u         X:ekeys       "k-end"

'k-prior'       -- u         X:ekeys       "k-prior"
   aka PgUp

'k-next'       -- u         X:ekeys       "k-next"
   aka PgDn

'k-insert'       -- u         X:ekeys       "k-insert"

'k-delete'       -- u         X:ekeys       "k-delete"

   The key identifiers for function keys (aka keypad keys) are:

'k-f1'       -- u         X:ekeys       "k-f1"

'k-f2'       -- u         X:ekeys       "k-f2"

'k-f3'       -- u         X:ekeys       "k-f3"

'k-f4'       -- u         X:ekeys       "k-f4"

'k-f5'       -- u         X:ekeys       "k-f5"

'k-f6'       -- u         X:ekeys       "k-f6"

'k-f7'       -- u         X:ekeys       "k-f7"

'k-f8'       -- u         X:ekeys       "k-f8"

'k-f9'       -- u         X:ekeys       "k-f9"

'k-f10'       -- u         X:ekeys       "k-f10"

'k-f11'       -- u         X:ekeys       "k-f11"

'k-f12'       -- u         X:ekeys       "k-f12"

   Note that 'k-f11' and 'k-f12' are not as widely available.

   You can combine these key identifiers with masks for various shift
keys:

'k-shift-mask'       -- u         X:ekeys       "k-shift-mask"

'k-ctrl-mask'       -- u         X:ekeys       "k-ctrl-mask"

'k-alt-mask'       -- u         X:ekeys       "k-alt-mask"

   Note that, even if a Forth system has 'ekey>fkey' and the key
identifier words, the keys are not necessarily available or it may not
necessarily be able to report all the keys and all the possible
combinations with shift masks.  Therefore, write your programs in such a
way that they are still useful even if the keys and key combinations
cannot be pressed or are not recognized.

   Examples: Older keyboards often do not have an F11 and F12 key.  If
you run Gforth in an xterm, the xterm catches a number of combinations
(e.g., <Shift-Up>), and never passes it to Gforth.  Finally, Gforth
currently does not recognize and report combinations with multiple shift
keys (so the <shift-ctrl-left> case in the example above would never be
entered).

   Gforth recognizes various keys available on ANSI terminals (in MS-DOS
you need the ANSI.SYS driver to get that behaviour); it works by
recognizing the escape sequences that ANSI terminals send when such a
key is pressed.  If you have a terminal that sends other escape
sequences, you will not get useful results on Gforth.  Other Forth
systems may work in a different way.

   Gforth also provides a few words for outputting names of function
keys:

'fkey.'       u --         gforth       "fkey-dot"
   Print a string representation for the function key u.  U must be a
function key (possibly with modifier masks), otherwise there may be an
exception.

'simple-fkey-string'       u1 -- c-addr u         gforth       "simple-fkey-string"
   c-addr u is the string name of the function key u1.  Only works for
simple function keys without modifier masks.  Any u1 that does not
correspond to a simple function key currently produces an exception.

5.19.8 Line input and conversion
--------------------------------

For ways of storing character strings in memory see *note String
Formats::.

   Words for inputting one line from the keyboard:

'accept'       c-addr +n1 -- +n2         core       "accept"
   Get a string of up to N1 characters from the user input device and
store it at C-ADDR.  N2 is the length of the received string.  The user
indicates the end by pressing <RET>.  Gforth supports all the editing
functions available on the Forth command line (including history and
word completion) in 'accept'.

'edit-line'       c-addr n1 n2 -- n3         gforth       "edit-line"
   edit the string with length N2 in the buffer C-ADDR N1, like
'accept'.

   Conversion words:

's>number?'       addr u -- d f         gforth       "s>number?"
   converts string addr u into d, flag indicates success

's>unumber?'       c-addr u -- ud flag         gforth       "s>unumber?"
   converts string c-addr u into ud, flag indicates success

'>number'       ud1 c-addr1 u1 -- ud2 c-addr2 u2         core       "to-number"
   Attempt to convert the character string C-ADDR1 U1 to an unsigned
number in the current number base.  The double UD1 accumulates the
result of the conversion to form UD2.  Conversion continues,
left-to-right, until the whole string is converted or a character that
is not convertable in the current number base is encountered (including
+ or -).  For each convertable character, UD1 is first multiplied by the
value in 'BASE' and then incremented by the value represented by the
character.  C-ADDR2 is the location of the first unconverted character
(past the end of the string if the whole string was converted).  U2 is
the number of unconverted characters in the string.  Overflow is not
detected.

'>float'       c-addr u -- f:... flag        float       "to-float"
   Actual stack effect: ( c_addr u -- r t | f ).  Attempt to convert the
character string c-addr u to internal floating-point representation.  If
the string represents a valid floating-point number, r is placed on the
floating-point stack and flag is true.  Otherwise, flag is false.  A
string of blanks is a special case and represents the floating-point
number 0.

'>float1'       c-addr u c -- f:... flag        gforth       "to-float1"
   Actual stack effect: ( c_addr u c -- r t | f ).  Attempt to convert
the character string c-addr u to internal floating-point representation,
with c being the decimal separator.  If the string represents a valid
floating-point number, r is placed on the floating-point stack and flag
is true.  Otherwise, flag is false.  A string of blanks is a special
case and represents the floating-point number 0.

   Obsolescent input and conversion words:

'convert'       ud1 c-addr1 -- ud2 c-addr2         core-ext-obsolescent       "convert"
   Obsolescent: superseded by '>number'.

'expect'       c-addr +n --         core-ext-obsolescent       "expect"
   Receive a string of at most +n characters, and store it in memory
starting at c-addr.  The string is displayed.  Input terminates when the
<return> key is pressed or +n characters have been received.  The normal
Gforth line editing capabilites are available.  The length of the string
is stored in 'span'; it does not include the <return> character.
OBSOLESCENT: superceeded by 'accept'.

'span'       -- c-addr         core-ext-obsolescent       "span"
   'Variable' -- c-addr is the address of a cell that stores the length
of the last string received by 'expect'.  OBSOLESCENT.

5.19.9 Pipes
------------

In addition to using Gforth in pipes created by other processes (*note
Gforth in pipes::), you can create your own pipe with 'open-pipe', and
read from or write to it.

'open-pipe'       c-addr u wfam -- wfileid wior        gforth       "open-pipe"

'close-pipe'       wfileid -- wretval wior        gforth       "close-pipe"

   If you write to a pipe, Gforth can throw a 'broken-pipe-error'; if
you don't catch this exception, Gforth will catch it and exit, usually
silently (*note Gforth in pipes::).  Since you probably do not want
this, you should wrap a 'catch' or 'try' block around the code from
'open-pipe' to 'close-pipe', so you can deal with the problem yourself,
and then return to regular processing.

'broken-pipe-error'       -- n         gforth       "broken-pipe-error"
   the error number for a broken pipe

5.19.10 Xchars and Unicode
--------------------------

ASCII is only appropriate for the English language.  Most western
languages however fit somewhat into the Forth frame, since a byte is
sufficient to encode the few special characters in each (though not
always the same encoding can be used; latin-1 is most widely used,
though).  For other languages, different char-sets have to be used,
several of them variable-width.  Most prominent representant is UTF-8.
Let's call these extended characters xchars.  The primitive fixed-size
characters stored as bytes are called pchars in this section.

   The xchar words add a few data types:

   * XC is an extended char (xchar) on the stack.  It occupies one cell,
     and is a subset of unsigned cell.  Note: UTF-8 can not store more
     that 31 bits; on 16 bit systems, only the UCS16 subset of the UTF-8
     character set can be used.

   * XC-ADDR is the address of an xchar in memory.  Alignment
     requirements are the same as C-ADDR.  The memory representation of
     an xchar differs from the stack representation, and depends on the
     encoding used.  An xchar may use a variable number of pchars in
     memory.

   * XC-ADDR U is a buffer of xchars in memory, starting at XC-ADDR, U
     pchars long.

'xc-size'       xc -- u         xchar-ext       "xc-size"
   Computes the memory size of the xchar XC in pchars.

'x-size'       xc-addr u1 -- u2         xchar       "x-size"
   Computes the memory size of the first xchar stored at XC-ADDR in
pchars.

'xc@+'       xc-addr1 -- xc-addr2 xc         xchar-ext       "xc-fetch-plus"
   Fetchs the xchar XC at XC-ADDR1.  XC-ADDR2 points to the first memory
location after XC.

'xc!+?'       xc xc-addr1 u1 -- xc-addr2 u2 f         xchar-ext       "xc-store-plus-query"
   Stores the xchar XC into the buffer starting at address XC-ADDR1, U1
pchars large.  XC-ADDR2 points to the first memory location after XC, U2
is the remaining size of the buffer.  If the xchar XC did fit into the
buffer, F is true, otherwise F is false, and XC-ADDR2 U2 equal XC-ADDR1
U1.  XC!+?  is safe for buffer overflows, and therefore preferred over
XC!+.

'xchar+'       xc-addr1 -- xc-addr2         xchar-ext       "xchar+"
   Adds the size of the xchar stored at XC-ADDR1 to this address, giving
XC-ADDR2.

'xchar-'       xc-addr1 -- xc-addr2         xchar-ext       "xchar-"
   Goes backward from XC_ADDR1 until it finds an xchar so that the size
of this xchar added to XC_ADDR2 gives XC_ADDR1.

'+x/string'       xc-addr1 u1 -- xc-addr2 u2         xchar       "plus-x-slash-string"
   Step forward by one xchar in the buffer defined by address XC-ADDR1,
size U1 pchars.  XC-ADDR2 is the address and u2 the size in pchars of
the remaining buffer after stepping over the first xchar in the buffer.

'x\string-'       xc-addr1 u1 -- xc-addr1 u2         xchar       "x-back-string-minus"
   Step backward by one xchar in the buffer defined by address XC-ADDR1
and size U1 in pchars, starting at the end of the buffer.  XC-ADDR1 is
the address and U2 the size in pchars of the remaining buffer after
stepping backward over the last xchar in the buffer.

'-trailing-garbage'       xc-addr u1 -- addr u2         xchar-ext       "-trailing-garbage"
   Examine the last XCHAR in the buffer XC-ADDR U1---if the encoding is
correct and it repesents a full pchar, U2 equals U1, otherwise, U2
represents the string without the last (garbled) xchar.

'x-width'       xc-addr u -- n         xchar-ext       "x-width"
   N is the number of monospace ASCII pchars that take the same space to
display as the the xchar string starting at XC-ADDR, using U pchars;
assuming a monospaced display font, i.e.  pchar width is always an
integer multiple of the width of an ASCII pchar.

'xkey'       -- xc         xchar-ext       "xkey"
   Reads an xchar from the terminal.  This will discard all input events
up to the completion of the xchar.

'xemit'       xc --         xchar-ext       "xemit"
   Prints an xchar on the terminal.

   There's a new environment query

'xchar-encoding'       -- addr u         xchar-ext       "xchar-encoding"
   Returns a printable ASCII string that reperesents the encoding, and
use the preferred MIME name (if any) or the name in
<http://www.iana.org/assignments/character-sets> like "ISO-LATIN-1" or
"UTF-8", with the exception of "ASCII", where we prefer the alias
"ASCII".

5.20 OS command line arguments
==============================

The usual way to pass arguments to Gforth programs on the command line
is via the '-e' option, e.g.

     gforth -e "123 456" foo.fs -e bye

   However, you may want to interpret the command-line arguments
directly.  In that case, you can access the (image-specific)
command-line arguments through 'next-arg':

'next-arg'       -- addr u         gforth       "next-arg"
   get the next argument from the OS command line, consuming it; if
there is no argument left, return '0 0'.

   Here's an example program 'echo.fs' for 'next-arg':

     : echo ( -- )
         begin
     	next-arg 2dup 0 0 d<> while
     	    type space
         repeat
         2drop ;

     echo cr bye

   This can be invoked with

     gforth echo.fs hello world

   and it will print

     hello world

   The next lower level of dealing with the OS command line are the
following words:

'arg'       u -- addr count         gforth       "arg"
   Return the string for the uth command-line argument; returns '0 0' if
the access is beyond the last argument.  '0 arg' is the program name
with which you started Gforth.  The next unprocessed argument is always
'1 arg', the one after that is '2 arg' etc.  All arguments already
processed by the system are deleted.  After you have processed an
argument, you can delete it with 'shift-args'.

'shift-args'       --         gforth       "shift-args"
   '1 arg' is deleted, shifting all following OS command line parameters
to the left by 1, and reducing 'argc @'.  This word can change 'argv @'.

   Finally, at the lowest level Gforth provides the following words:

'argc'       -- addr         gforth       "argc"
   'Variable' -- the number of command-line arguments (including the
command name).  Changed by 'next-arg' and 'shift-args'.

'argv'       -- addr         gforth       "argv"
   'Variable' -- a pointer to a vector of pointers to the command-line
arguments (including the command-name).  Each argument is represented as
a C-style zero-terminated string.  Changed by 'next-arg' and
'shift-args'.

5.21 Locals
===========

Local variables can make Forth programming more enjoyable and Forth
programs easier to read.  Unfortunately, the locals of Standard Forth
are laden with restrictions.  Therefore, we provide not only the
Standard Forth locals wordset, but also our own, more powerful locals
wordset (we implemented the Standard Forth locals wordset through our
locals wordset).

   The ideas in this section have also been published in M. Anton Ertl,
'Automatic Scoping of Local Variables
(http://www.complang.tuwien.ac.at/papers/ertl94l.ps.gz)', EuroForth '94.

5.21.1 Gforth locals
--------------------

Locals can be defined with

     { local1 local2 ... -- comment }
   or
     { local1 local2 ... }

   E.g.,
     : max { n1 n2 -- n3 }
      n1 n2 > if
        n1
      else
        n2
      endif ;

   The similarity of locals definitions with stack comments is intended.
A locals definition often replaces the stack comment of a word.  The
order of the locals corresponds to the order in a stack comment and
everything after the '--' is really a comment.

   This similarity has one disadvantage: It is too easy to confuse
locals declarations with stack comments, causing bugs and making them
hard to find.  However, this problem can be avoided by appropriate
coding conventions: Do not use both notations in the same program.  If
you do, they should be distinguished using additional means, e.g.  by
position.

   The name of the local may be preceded by a type specifier, e.g., 'F:'
for a floating point value:

     : CX* { F: Ar F: Ai F: Br F: Bi -- Cr Ci }
     \ complex multiplication
      Ar Br f* Ai Bi f* f-
      Ar Bi f* Ai Br f* f+ ;

   Gforth currently supports cells ('W:', 'W^'), doubles ('D:', 'D^'),
floats ('F:', 'F^') and characters ('C:', 'C^') in two flavours: a
value-flavoured local (defined with 'W:', 'D:' etc.)  produces its value
and can be changed with 'TO'.  A variable-flavoured local (defined with
'W^' etc.)  produces its address (which becomes invalid when the
variable's scope is left).  E.g., the standard word 'emit' can be
defined in terms of 'type' like this:

     : emit { C^ char* -- }
         char* 1 type ;

   A local without type specifier is a 'W:' local.  Both flavours of
locals are initialized with values from the data or FP stack.

   Gforth supports the square bracket notation of local data structures.
These locals are similar to variable-flavored locals, the size is
specified as a constant expression.  A declaration looks 'name[ size ]'.
The Forth expression 'size' is evaluated during declaration, it must
have the stack effect '( -- +n )', giving the size in bytes.  The square
bracket '[' is part of the defined name.

   Local data structures are initialized by copying size bytes from an
address passed on the stack; uninitialized local data structures (after
'|' in the declaration) are not erased, they just contain whatever data
there was on the locals stack before.

   Example:

     begin-structure test-struct
       field: a1
       field: a2
     end-structure

     : test-local {: foo[ test-struct ] :}
         foo[ a1 !  foo[ a2 !
         foo[ test-struct dump ;

   Gforth allows defining locals everywhere in a colon definition.  This
poses the following questions:

5.21.1.1 Where are locals visible by name?
..........................................

Basically, the answer is that locals are visible where you would expect
it in block-structured languages, and sometimes a little longer.  If you
want to restrict the scope of a local, enclose its definition in
'SCOPE'...'ENDSCOPE'.

'scope'       compilation  -- scope ; run-time  --         gforth       "scope"

'endscope'       compilation scope -- ; run-time  --         gforth       "endscope"

   These words behave like control structure words, so you can use them
with 'CS-PICK' and 'CS-ROLL' to restrict the scope in arbitrary ways.

   If you want a more exact answer to the visibility question, here's
the basic principle: A local is visible in all places that can only be
reached through the definition of the local(1).  In other words, it is
not visible in places that can be reached without going through the
definition of the local.  E.g., locals defined in 'IF'...'ENDIF' are
visible until the 'ENDIF', locals defined in 'BEGIN'...'UNTIL' are
visible after the 'UNTIL' (until, e.g., a subsequent 'ENDSCOPE').

   The reasoning behind this solution is: We want to have the locals
visible as long as it is meaningful.  The user can always make the
visibility shorter by using explicit scoping.  In a place that can only
be reached through the definition of a local, the meaning of a local
name is clear.  In other places it is not: How is the local initialized
at the control flow path that does not contain the definition?  Which
local is meant, if the same name is defined twice in two independent
control flow paths?

   This should be enough detail for nearly all users, so you can skip
the rest of this section.  If you really must know all the gory details
and options, read on.

   In order to implement this rule, the compiler has to know which
places are unreachable.  It knows this automatically after 'AHEAD',
'AGAIN', 'EXIT' and 'LEAVE'; in other cases (e.g., after most 'THROW's),
you can use the word 'UNREACHABLE' to tell the compiler that the control
flow never reaches that place.  If 'UNREACHABLE' is not used where it
could, the only consequence is that the visibility of some locals is
more limited than the rule above says.  If 'UNREACHABLE' is used where
it should not (i.e., if you lie to the compiler), buggy code will be
produced.

'UNREACHABLE'       --         gforth       "UNREACHABLE"

   Another problem with this rule is that at 'BEGIN', the compiler does
not know which locals will be visible on the incoming back-edge.  All
problems discussed in the following are due to this ignorance of the
compiler (we discuss the problems using 'BEGIN' loops as examples; the
discussion also applies to '?DO' and other loops).  Perhaps the most
insidious example is:
     AHEAD
     BEGIN
       x
     [ 1 CS-ROLL ] THEN
       { x }
       ...
     UNTIL

   This should be legal according to the visibility rule.  The use of
'x' can only be reached through the definition; but that appears
textually below the use.

   From this example it is clear that the visibility rules cannot be
fully implemented without major headaches.  Our implementation treats
common cases as advertised and the exceptions are treated in a safe way:
The compiler makes a reasonable guess about the locals visible after a
'BEGIN'; if it is too pessimistic, the user will get a spurious error
about the local not being defined; if the compiler is too optimistic, it
will notice this later and issue a warning.  In the case above the
compiler would complain about 'x' being undefined at its use.  You can
see from the obscure examples in this section that it takes quite
unusual control structures to get the compiler into trouble, and even
then it will often do fine.

   If the 'BEGIN' is reachable from above, the most optimistic guess is
that all locals visible before the 'BEGIN' will also be visible after
the 'BEGIN'.  This guess is valid for all loops that are entered only
through the 'BEGIN', in particular, for normal
'BEGIN'...'WHILE'...'REPEAT' and 'BEGIN'...'UNTIL' loops and it is
implemented in our compiler.  When the branch to the 'BEGIN' is finally
generated by 'AGAIN' or 'UNTIL', the compiler checks the guess and warns
the user if it was too optimistic:
     IF
       { x }
     BEGIN
       \ x ?
     [ 1 cs-roll ] THEN
       ...
     UNTIL

   Here, 'x' lives only until the 'BEGIN', but the compiler
optimistically assumes that it lives until the 'THEN'.  It notices this
difference when it compiles the 'UNTIL' and issues a warning.  The user
can avoid the warning, and make sure that 'x' is not used in the wrong
area by using explicit scoping:
     IF
       SCOPE
       { x }
       ENDSCOPE
     BEGIN
     [ 1 cs-roll ] THEN
       ...
     UNTIL

   Since the guess is optimistic, there will be no spurious error
messages about undefined locals.

   If the 'BEGIN' is not reachable from above (e.g., after 'AHEAD' or
'EXIT'), the compiler cannot even make an optimistic guess, as the
locals visible after the 'BEGIN' may be defined later.  Therefore, the
compiler assumes that no locals are visible after the 'BEGIN'.  However,
the user can use 'ASSUME-LIVE' to make the compiler assume that the same
locals are visible at the BEGIN as at the point where the top
control-flow stack item was created.

'ASSUME-LIVE'       orig -- orig         gforth       "ASSUME-LIVE"

E.g.,
     { x }
     AHEAD
     ASSUME-LIVE
     BEGIN
       x
     [ 1 CS-ROLL ] THEN
       ...
     UNTIL

   Other cases where the locals are defined before the 'BEGIN' can be
handled by inserting an appropriate 'CS-ROLL' before the 'ASSUME-LIVE'
(and changing the control-flow stack manipulation behind the
'ASSUME-LIVE').

   Cases where locals are defined after the 'BEGIN' (but should be
visible immediately after the 'BEGIN') can only be handled by
rearranging the loop.  E.g., the "most insidious" example above can be
arranged into:
     BEGIN
       { x }
       ... 0=
     WHILE
       x
     REPEAT

   ---------- Footnotes ----------

   (1) In compiler construction terminology, all places dominated by the
definition of the local.

5.21.1.2 How long do locals live?
.................................

The right answer for the lifetime question would be: A local lives at
least as long as it can be accessed.  For a value-flavoured local this
means: until the end of its visibility.  However, a variable-flavoured
local could be accessed through its address far beyond its visibility
scope.  Ultimately, this would mean that such locals would have to be
garbage collected.  Since this entails un-Forth-like implementation
complexities, I adopted the same cowardly solution as some other
languages (e.g., C): The local lives only as long as it is visible;
afterwards its address is invalid (and programs that access it
afterwards are erroneous).

5.21.1.3 Locals programming style
.................................

The freedom to define locals anywhere has the potential to change
programming styles dramatically.  In particular, the need to use the
return stack for intermediate storage vanishes.  Moreover, all stack
manipulations (except 'PICK's and 'ROLL's with run-time determined
arguments) can be eliminated: If the stack items are in the wrong order,
just write a locals definition for all of them; then write the items in
the order you want.

   This seems a little far-fetched and eliminating stack manipulations
is unlikely to become a conscious programming objective.  Still, the
number of stack manipulations will be reduced dramatically if local
variables are used liberally (e.g., compare 'max' (*note Gforth
locals::) with a traditional implementation of 'max').

   This shows one potential benefit of locals: making Forth programs
more readable.  Of course, this benefit will only be realized if the
programmers continue to honour the principle of factoring instead of
using the added latitude to make the words longer.

   Using 'TO' can and should be avoided.  Without 'TO', every
value-flavoured local has only a single assignment and many advantages
of functional languages apply to Forth.  I.e., programs are easier to
analyse, to optimize and to read: It is clear from the definition what
the local stands for, it does not turn into something different later.

   E.g., a definition using 'TO' might look like this:
     : strcmp { addr1 u1 addr2 u2 -- n }
      u1 u2 min 0
      ?do
        addr1 c@ addr2 c@ -
        ?dup-if
          unloop exit
        then
        addr1 char+ TO addr1
        addr2 char+ TO addr2
      loop
      u1 u2 - ;
   Here, 'TO' is used to update 'addr1' and 'addr2' at every loop
iteration.  'strcmp' is a typical example of the readability problems of
using 'TO'.  When you start reading 'strcmp', you think that 'addr1'
refers to the start of the string.  Only near the end of the loop you
realize that it is something else.

   This can be avoided by defining two locals at the start of the loop
that are initialized with the right value for the current iteration.
     : strcmp { addr1 u1 addr2 u2 -- n }
      addr1 addr2
      u1 u2 min 0
      ?do { s1 s2 }
        s1 c@ s2 c@ -
        ?dup-if
          unloop exit
        then
        s1 char+ s2 char+
      loop
      2drop
      u1 u2 - ;
   Here it is clear from the start that 's1' has a different value in
every loop iteration.

5.21.1.4 Locals implementation
..............................

Gforth uses an extra locals stack.  The most compelling reason for this
is that the return stack is not float-aligned; using an extra stack also
eliminates the problems and restrictions of using the return stack as
locals stack.  Like the other stacks, the locals stack grows toward
lower addresses.  A few primitives allow an efficient implementation:

'@local#'       #noffset -- w        gforth       "fetch-local-number"

'f@local#'       #noffset -- r        gforth       "f-fetch-local-number"

'laddr#'       #noffset -- c-addr        gforth       "laddr-number"

'lp+!#'       #noffset --        gforth       "lp-plus-store-number"
   used with negative immediate values it allocates memory on the local
stack, a positive immediate argument drops memory from the local stack

'lp!'       c-addr --        gforth       "lp-store"

'>l'       w --        gforth       "to-l"

'f>l'       r --        gforth       "f-to-l"

   In addition to these primitives, some specializations of these
primitives for commonly occurring inline arguments are provided for
efficiency reasons, e.g., '@local0' as specialization of '@local#' for
the inline argument 0.  The following compiling words compile the right
specialized version, or the general version, as appropriate:

'compile-lp+!'       n --         gforth       "compile-l-p-plus-store"

   Combinations of conditional branches and 'lp+!#' like '?branch-lp+!#'
(the locals pointer is only changed if the branch is taken) are provided
for efficiency and correctness in loops.

   A special area in the dictionary space is reserved for keeping the
local variable names.  '{' switches the dictionary pointer to this area
and '}' switches it back and generates the locals initializing code.
'W:' etc. are normal defining words.  This special area is cleared at
the start of every colon definition.

   A special feature of Gforth's dictionary is used to implement the
definition of locals without type specifiers: every word list (aka
vocabulary) has its own methods for searching etc.  (*note Word
Lists::).  For the present purpose we defined a word list with a special
search method: When it is searched for a word, it actually creates that
word using 'W:'.  '{' changes the search order to first search the word
list containing '}', 'W:' etc., and then the word list for defining
locals without type specifiers.

   The lifetime rules support a stack discipline within a colon
definition: The lifetime of a local is either nested with other locals
lifetimes or it does not overlap them.

   At 'BEGIN', 'IF', and 'AHEAD' no code for locals stack pointer
manipulation is generated.  Between control structure words locals
definitions can push locals onto the locals stack.  'AGAIN' is the
simplest of the other three control flow words.  It has to restore the
locals stack depth of the corresponding 'BEGIN' before branching.  The
code looks like this:
'lp+!#' current-locals-size - dest-locals-size
'branch' <begin>

   'UNTIL' is a little more complicated: If it branches back, it must
adjust the stack just like 'AGAIN'.  But if it falls through, the locals
stack must not be changed.  The compiler generates the following code:
'?branch-lp+!#' <begin> current-locals-size - dest-locals-size
   The locals stack pointer is only adjusted if the branch is taken.

   'THEN' can produce somewhat inefficient code:
'lp+!#' current-locals-size - orig-locals-size
<orig target>:
'lp+!#' orig-locals-size - new-locals-size
   The second 'lp+!#' adjusts the locals stack pointer from the level at
the orig point to the level after the 'THEN'.  The first 'lp+!#' adjusts
the locals stack pointer from the current level to the level at the orig
point, so the complete effect is an adjustment from the current level to
the right level after the 'THEN'.

   In a conventional Forth implementation a dest control-flow stack
entry is just the target address and an orig entry is just the address
to be patched.  Our locals implementation adds a word list to every orig
or dest item.  It is the list of locals visible (or assumed visible) at
the point described by the entry.  Our implementation also adds a tag to
identify the kind of entry, in particular to differentiate between live
and dead (reachable and unreachable) orig entries.

   A few unusual operations have to be performed on locals word lists:

'common-list'       list1 list2 -- list3         unknown       "common-list"

'sub-list?'       list1 list2 -- f         unknown       "sub-list?"

'list-size'       list -- u         gforth-internal       "list-size"

   Several features of our locals word list implementation make these
operations easy to implement: The locals word lists are organised as
linked lists; the tails of these lists are shared, if the lists contain
some of the same locals; and the address of a name is greater than the
address of the names behind it in the list.

   Another important implementation detail is the variable 'dead-code'.
It is used by 'BEGIN' and 'THEN' to determine if they can be reached
directly or only through the branch that they resolve.  'dead-code' is
set by 'UNREACHABLE', 'AHEAD', 'EXIT' etc., and cleared at the start of
a colon definition, by 'BEGIN' and usually by 'THEN'.

   Counted loops are similar to other loops in most respects, but
'LEAVE' requires special attention: It performs basically the same
service as 'AHEAD', but it does not create a control-flow stack entry.
Therefore the information has to be stored elsewhere; traditionally, the
information was stored in the target fields of the branches created by
the 'LEAVE's, by organizing these fields into a linked list.
Unfortunately, this clever trick does not provide enough space for
storing our extended control flow information.  Therefore, we introduce
another stack, the leave stack.  It contains the control-flow stack
entries for all unresolved 'LEAVE's.

   Local names are kept until the end of the colon definition, even if
they are no longer visible in any control-flow path.  In a few cases
this may lead to increased space needs for the locals name area, but
usually less than reclaiming this space would cost in code size.

5.21.1.5 Closures
.................

Gforth also provides basic closures.  A closure is a combination of a
quotation (*note Quotations::) and locals.  Gforth's closures have
locals which are filled with values at the closure's run-time, producing
a trampoline xt.  When executing that trampoline xt, the closure's code
is executed, with access to the closure's locals on the locals stack.
Modifications of the closure's locals aren't persistent, i.e.  when the
closure 'EXIT's, the modified values are lost.

'[{:'       -- vtaddr u latest latestnt wid 0         gforth-experimental       "start-closure"
   starts a closure.  Closures first declare the locals frame they are
going to use, and then the code that is executed with those locals.
Closures end like quotations with a ';]'.  The locals declaration ends
depending where the closure's locals are created.  At run-time, the
closure is created as trampolin xt, and fills the values of its local
frame from the stack.  At execution time of the xt, the local frame is
copied to the locals stack, and used inside the closure's code.  After
return, those values are removed from the locals stack, and not updated
in the closure itself.

':}l'       vtaddr u latest latestnt wid 0 a-addr1 u1 ... --         gforth       "close-brace-locals"
   end a closure's locals declaration.  The closure will be allocated on
the local's stack.

':}d'       vtaddr u latest latestnt wid 0 a-addr1 u1 ... --         gforth       "close-brace-dictionary"
   end a closure's locals declaration.  The closure will be allocated in
the dictionary.

':}h'       vtaddr u latest latestnt wid 0 a-addr1 u1 ... --         gforth       "close-brace-heap"
   end a closure's locals declaration.  The closure will be allocated on
the heap.

'>addr'       xt -- addr         gforth-experimental       "to-addr"
   convert the xt of a closure on the heap to the ADDR with can be
passed to 'free' to get rid of the closure

     : foo [{: a f: b d: c xt: d :}d a . b f. c d. d ;] ;
     5 3.3e #1234. ' cr foo execute

   'foo' creates a closure in the dictionary with a single cell, a
floating point, a double, and an xt, and prints the first three values
before executing the xt on invocation.

   This allows to implement Donald Knuth's "Man or boy test" proposed in
1964 to test Algol compilers.

     : A {: w^ k x1 x2 x3 xt: x4 xt: x5 | w^ B :} recursive
         k  0<= IF  x4 x5 f+  ELSE
             B k x1 x2 x3 action-of x4 [{: B k x1 x2 x3 x4 :}L
                 -1 k +!
                 k  B  x1 x2 x3 x4 A ;] dup B !
             execute  THEN ;
     : man-or-boy? ( n -- ) [: 1e ;] [: -1e ;] 2dup swap [: 0e ;] A f. ;

   Sometimes, closures need a permanent storage to be modified; it is
even possible that more than one closure shares that permanent storage.
In the example above, local variables of the outer procedure are used
for this, but in some cases, the closure lives longer than the outer
procedure; especially closures allocated in the dictionary or on the
heap are designed to outlive their parent procedure.

   For those, we have home locations, which are allocated like closures,
but their code is directly executed at run-time and should provide us
with the addresses of the home locations.

     : bar ( a b c -- aaddr baddr caddr hl-addr )
         <{: w^ a w^ b w^ c :}h a b c ;> ;

   This example creates a home location with three cells on the heap,
and returns the addresses of the three locations and the address of the
home location.  This address can be used to 'free' the home location
when it is no longer needed.

'<{:'       -- vtaddr u latest latestnt wid 0         gforth-experimental       "start-homelocation"
   starts a home location

';>'       --         gforth-experimental       "end-homelocation"
   end using a home location

5.21.2 Standard Forth locals
----------------------------

The Forth-2012 standard defines a syntax for locals, that is similar to
a subset of Gforth locals.  Instead of using '{' and '}', the standard
decided to use '{:' and ':}', as shown in the following examples:

     {: local1 local2 ... -- comment :}
or
     {: local1 local2 ... | local3 local4 ... -- comment :}
where local3 and local4 are uninitialized or
     {: local1 local2 ... :}

   The order of the locals corresponds to the order in a stack comment.
The restrictions are:

   * Locals can only be cell-sized values (no type specifiers are
     allowed).
   * Locals can be defined only outside control structures.
   * Locals can interfere with explicit usage of the return stack.  For
     the exact (and long) rules, see the standard.  If you don't use
     return stack accessing words in a definition using locals, you will
     be all right.  The purpose of this rule is to make locals
     implementation on the return stack easier.
   * The whole definition must be in one line.

   Locals defined in Standard Forth behave like 'VALUE's (*note
Values::).  I.e., they are initialized from the stack.  Using their name
produces their value.  Their value can be changed using 'TO'.

   Since the syntax above is supported by Gforth directly, you need not
do anything to use it.  If you want to port a program using this syntax
to another ANS Forth system, use 'compat/anslocal.fs' to implement the
syntax on the other system.

   Note that a syntax shown in the standard, section A.13 looks similar,
but is quite different in having the order of locals reversed.  Beware!

   The Standard Forth locals wordset itself consists of two words:

'(local)'       addr u --         local       "paren-local-paren"

'{:'       -- vtaddr u latest latestnt wid 0         forth-2012       "open-brace-colon"
   Start standard locals declaration.  All Gforth locals extensions are
supported by Gforth, though the standard only supports the subset of
cells.

   The ANS Forth locals extension wordset defines a syntax using
'locals|', but it is so awful that we strongly recommend not to use it.
We have implemented this syntax to make porting to Gforth easy, but do
not document it here.  The problem with this syntax is that the locals
are defined in an order reversed with respect to the standard stack
comment notation, making programs harder to read, and easier to misread
and miswrite.  The only merit of this syntax is that it is easy to
implement using the ANS Forth locals wordset.

5.22 Structures
===============

This section presents the structure package that comes with Gforth.  A
version of the package implemented in Standard Forth is available in
'compat/struct.fs'.  This package was inspired by a posting on
comp.lang.forth in 1989 (unfortunately I don't remember, by whom;
possibly John Hayes).  A version of this section has been published in
M. Anton Ertl, Yet Another Forth Structures Package
(http://www.complang.tuwien.ac.at/forth/objects/structs.html), Forth
Dimensions 19(3), pages 13--16.  Marcel Hendrix provided helpful
comments.

5.22.1 Why explicit structure support?
--------------------------------------

If we want to use a structure containing several fields, we could simply
reserve memory for it, and access the fields using address arithmetic
(*note Address arithmetic::).  As an example, consider a structure with
the following fields

'a'
     is a float
'b'
     is a cell
'c'
     is a float

   Given the (float-aligned) base address of the structure we get the
address of the field

'a'
     without doing anything further.
'b'
     with 'float+'
'c'
     with 'float+ cell+ faligned'

   It is easy to see that this can become quite tiring.

   Moreover, it is not very readable, because seeing a 'cell+' tells us
neither which kind of structure is accessed nor what field is accessed;
we have to somehow infer the kind of structure, and then look up in the
documentation, which field of that structure corresponds to that offset.

   Finally, this kind of address arithmetic also causes maintenance
troubles: If you add or delete a field somewhere in the middle of the
structure, you have to find and change all computations for the fields
afterwards.

   So, instead of using 'cell+' and friends directly, how about storing
the offsets in constants:

     0 constant a-offset
     0 float+ constant b-offset
     0 float+ cell+ faligned c-offset

   Now we can get the address of field 'x' with 'x-offset +'.  This is
much better in all respects.  Of course, you still have to change all
later offset definitions if you add a field.  You can fix this by
declaring the offsets in the following way:

     0 constant a-offset
     a-offset float+ constant b-offset
     b-offset cell+ faligned constant c-offset

   Since we always use the offsets with '+', we could use a defining
word 'cfield' that includes the '+' in the action of the defined word:

     : cfield ( n "name" -- )
         create ,
     does> ( name execution: addr1 -- addr2 )
         @ + ;

     0 cfield a
     0 a float+ cfield b
     0 b cell+ faligned cfield c

   Instead of 'x-offset +', we now simply write 'x'.

   The structure field words now can be used quite nicely.  However,
their definition is still a bit cumbersome: We have to repeat the name,
the information about size and alignment is distributed before and after
the field definitions etc.  The structure package presented here
addresses these problems.

5.22.2 Structure Usage
----------------------

You can define a structure for a (data-less) linked list with:
     struct
         cell% field list-next
     end-struct list%

   With the address of the list node on the stack, you can compute the
address of the field that contains the address of the next node with
'list-next'.  E.g., you can determine the length of a list with:

     : list-length ( list -- n )
     \ "list" is a pointer to the first element of a linked list
     \ "n" is the length of the list
         0 BEGIN ( list1 n1 )
             over
         WHILE ( list1 n1 )
             1+ swap list-next @ swap
         REPEAT
         nip ;

   You can reserve memory for a list node in the dictionary with 'list%
%allot', which leaves the address of the list node on the stack.  For
the equivalent allocation on the heap you can use 'list% %alloc' (or,
for an 'allocate'-like stack effect (i.e., with ior), use 'list%
%allocate').  You can get the the size of a list node with 'list% %size'
and its alignment with 'list% %alignment'.

   Note that in Standard Forth the body of a 'create'd word is 'aligned'
but not necessarily 'faligned'; therefore, if you do a:

     create _name_ foo% %allot drop

then the memory alloted for 'foo%' is guaranteed to start at the body of
'_name_' only if 'foo%' contains only character, cell and double fields.
Therefore, if your structure contains floats, better use

     foo% %allot constant _name_

   You can include a structure 'foo%' as a field of another structure,
like this:
     struct
     ...
         foo% field ...
     ...
     end-struct ...

   Instead of starting with an empty structure, you can extend an
existing structure.  E.g., a plain linked list without data, as defined
above, is hardly useful; You can extend it to a linked list of integers,
like this:(1)

     list%
         cell% field intlist-int
     end-struct intlist%

   'intlist%' is a structure with two fields: 'list-next' and
'intlist-int'.

   You can specify an array type containing _n_ elements of type 'foo%'
like this:

     foo% _n_ *

   You can use this array type in any place where you can use a normal
type, e.g., when defining a 'field', or with '%allot'.

   The first field is at the base address of a structure and the word
for this field (e.g., 'list-next') actually does not change the address
on the stack.  You may be tempted to leave it away in the interest of
run-time and space efficiency.  This is not necessary, because the
structure package optimizes this case: If you compile a first-field
words, no code is generated.  So, in the interest of readability and
maintainability you should include the word for the field when accessing
the field.

   ---------- Footnotes ----------

   (1) This feature is also known as _extended records_.  It is the main
innovation in the Oberon language; in other words, adding this feature
to Modula-2 led Wirth to create a new language, write a new compiler
etc.  Adding this feature to Forth just required a few lines of code.

5.22.3 Structure Naming Convention
----------------------------------

The field names that come to (my) mind are often quite generic, and, if
used, would cause frequent name clashes.  E.g., many structures probably
contain a 'counter' field.  The structure names that come to (my) mind
are often also the logical choice for the names of words that create
such a structure.

   Therefore, I have adopted the following naming conventions:

   * The names of fields are of the form '_struct_-_field_', where
     '_struct_' is the basic name of the structure, and '_field_' is the
     basic name of the field.  You can think of field words as
     converting the (address of the) structure into the (address of the)
     field.

   * The names of structures are of the form '_struct_%', where
     '_struct_' is the basic name of the structure.

   This naming convention does not work that well for fields of extended
structures; e.g., the integer list structure has a field 'intlist-int',
but has 'list-next', not 'intlist-next'.

5.22.4 Structure Implementation
-------------------------------

The central idea in the implementation is to pass the data about the
structure being built on the stack, not in some global variable.
Everything else falls into place naturally once this design decision is
made.

   The type description on the stack is of the form _align size_.
Keeping the size on the top-of-stack makes dealing with arrays very
simple.

   'field' is a defining word that uses 'Create' and 'DOES>'.  The body
of the field contains the offset of the field, and the normal 'DOES>'
action is simply:

     @ +

i.e., add the offset to the address, giving the stack effect addr1 --
addr2 for a field.

   This simple structure is slightly complicated by the optimization for
fields with offset 0, which requires a different 'DOES>'-part (because
we cannot rely on there being something on the stack if such a field is
invoked during compilation).  Therefore, we put the different
'DOES>'-parts in separate words, and decide which one to invoke based on
the offset.  For a zero offset, the field is basically a noop; it is
immediate, and therefore no code is generated when it is compiled.

5.22.5 Structure Glossary
-------------------------

'%align'       align size --         gforth       "%align"
   Align the data space pointer to the alignment ALIGN.

'%alignment'       align size -- align         gforth       "%alignment"
   The alignment of the structure.

'%alloc'       align size -- addr         gforth       "%alloc"
   Allocate SIZE address units with alignment ALIGN, giving a data block
at ADDR; 'throw' an ior code if not successful.

'%allocate'       align size -- addr ior         gforth       "%allocate"
   Allocate SIZE address units with alignment ALIGN, similar to
'allocate'.

'%allot'       align size -- addr         gforth       "%allot"
   Allot SIZE address units of data space with alignment ALIGN; the
resulting block of data is found at ADDR.

'cell%'       -- align size         gforth       "cell%"

'char%'       -- align size         gforth       "char%"

'dfloat%'       -- align size         gforth       "dfloat%"

'double%'       -- align size         gforth       "double%"

'end-struct'       align size "name" --         gforth       "end-struct"
   Define a structure/type descriptor NAME with alignment ALIGN and size
SIZE1 (SIZE rounded up to be a multiple of ALIGN).
'name' execution: -- ALIGN SIZE1

'field'       align1 offset1 align size "name" --  align2 offset2         gforth       "field"
   Create a field NAME with offset OFFSET1, and the type given by ALIGN
SIZE.  OFFSET2 is the offset of the next field, and ALIGN2 is the
alignment of all fields.
'name' execution: ADDR1 -- ADDR2.
ADDR2=ADDR1+OFFSET1

'float%'       -- align size         gforth       "float%"

'naligned'       addr1 n -- addr2         gforth       "naligned"
   ADDR2 is the aligned version of ADDR1 with respect to the alignment
N.

'sfloat%'       -- align size         gforth       "sfloat%"

'%size'       align size -- size         gforth       "%size"
   The size of the structure.

'struct'       -- align size         gforth       "struct"
   An empty structure, used to start a structure definition.

5.22.6 Forth200x Structures
---------------------------

The Forth 2012 standard defines a slightly less convenient form of
structures.  In general (when using 'field+', you have to perform the
alignment yourself, but there are a number of convenience words (e.g.,
'field:' that perform the alignment for you.

   A typical usage example is:

     0
       field:                   s-a
       faligned 2 floats +field s-b
     constant s-struct

   An alternative way of writing this structure is:

     begin-structure s-struct
       field:                   s-a
       faligned 2 floats +field s-b
     end-structure

'begin-structure'       "name" -- struct-sys 0         X:structures       "begin-structure"

'end-structure'       struct-sys +n --         X:structures       "end-structure"

'+field'       unknown         unknown       "+field"

'cfield:'       u1 "name" -- u2         X:structures       "cfield:"

'field:'       u1 "name" -- u2         X:structures       "field:"

'2field:'       u1 "name" -- u2         gforth       "2field:"

'ffield:'       u1 "name" -- u2         X:structures       "ffield:"

'sffield:'       u1 "name" -- u2         X:structures       "sffield:"

'dffield:'       u1 "name" -- u2         X:structures       "dffield:"

5.23 Object-oriented Forth
==========================

Gforth comes with three packages for object-oriented programming:
'objects.fs', 'oof.fs', and 'mini-oof.fs'; none of them is preloaded, so
you have to 'include' them before use.  The most important differences
between these packages (and others) are discussed in *note Comparison
with other object models::.  All packages are written in Standard Forth
and can be used with any other Standard Forth.

5.23.1 Why object-oriented programming?
---------------------------------------

Often we have to deal with several data structures (_objects_), that
have to be treated similarly in some respects, but differently in
others.  Graphical objects are the textbook example: circles, triangles,
dinosaurs, icons, and others, and we may want to add more during program
development.  We want to apply some operations to any graphical object,
e.g., 'draw' for displaying it on the screen.  However, 'draw' has to do
something different for every kind of object.

   We could implement 'draw' as a big 'CASE' control structure that
executes the appropriate code depending on the kind of object to be
drawn.  This would be not be very elegant, and, moreover, we would have
to change 'draw' every time we add a new kind of graphical object (say,
a spaceship).

   What we would rather do is: When defining spaceships, we would tell
the system: "Here's how you 'draw' a spaceship; you figure out the
rest".

   This is the problem that all systems solve that (rightfully) call
themselves object-oriented; the object-oriented packages presented here
solve this problem (and not much else).

5.23.2 Object-Oriented Terminology
----------------------------------

This section is mainly for reference, so you don't have to understand
all of it right away.  The terminology is mainly Smalltalk-inspired.  In
short:

_class_
     a data structure definition with some extras.

_object_
     an instance of the data structure described by the class
     definition.

_instance variables_
     fields of the data structure.

_selector_
     (or _method selector_) a word (e.g., 'draw') that performs an
     operation on a variety of data structures (classes).  A selector
     describes _what_ operation to perform.  In C++ terminology: a
     (pure) virtual function.

_method_
     the concrete definition that performs the operation described by
     the selector for a specific class.  A method specifies _how_ the
     operation is performed for a specific class.

_selector invocation_
     a call of a selector.  One argument of the call (the TOS
     (top-of-stack)) is used for determining which method is used.  In
     Smalltalk terminology: a message (consisting of the selector and
     the other arguments) is sent to the object.

_receiving object_
     the object used for determining the method executed by a selector
     invocation.  In the 'objects.fs' model, it is the object that is on
     the TOS when the selector is invoked.  (_Receiving_ comes from the
     Smalltalk _message_ terminology.)

_child class_
     a class that has (_inherits_) all properties (instance variables,
     selectors, methods) from a _parent class_.  In Smalltalk
     terminology: The subclass inherits from the superclass.  In C++
     terminology: The derived class inherits from the base class.

5.23.3 The 'objects.fs' model
-----------------------------

This section describes the 'objects.fs' package.  This material also has
been published in M. Anton Ertl, 'Yet Another Forth Objects Package
(http://www.complang.tuwien.ac.at/forth/objects/objects.html)', Forth
Dimensions 19(2), pages 37--43.

   This section assumes that you have read *note Structures::.

   The techniques on which this model is based have been used to
implement the parser generator, Gray, and have also been used in Gforth
for implementing the various flavours of word lists (hashed or not,
case-sensitive or not, special-purpose word lists for locals etc.).

   Marcel Hendrix provided helpful comments on this section.

5.23.3.1 Properties of the 'objects.fs' model
.............................................

   * It is straightforward to pass objects on the stack.  Passing
     selectors on the stack is a little less convenient, but possible.

   * Objects are just data structures in memory, and are referenced by
     their address.  You can create words for objects with normal
     defining words like 'constant'.  Likewise, there is no difference
     between instance variables that contain objects and those that
     contain other data.

   * Late binding is efficient and easy to use.

   * It avoids parsing, and thus avoids problems with state-smartness
     and reduced extensibility; for convenience there are a few parsing
     words, but they have non-parsing counterparts.  There are also a
     few defining words that parse.  This is hard to avoid, because all
     standard defining words parse (except ':noname'); however, such
     words are not as bad as many other parsing words, because they are
     not state-smart.

   * It does not try to incorporate everything.  It does a few things
     and does them well (IMO). In particular, this model was not
     designed to support information hiding (although it has features
     that may help); you can use a separate package for achieving this.

   * It is layered; you don't have to learn and use all features to use
     this model.  Only a few features are necessary (*note Basic Objects
     Usage::, *note The Objects base class::, *note Creating
     objects::.), the others are optional and independent of each other.

   * An implementation in Standard Forth is available.

5.23.3.2 Basic 'objects.fs' Usage
.................................

You can define a class for graphical objects like this:

     object class \ "object" is the parent class
       selector draw ( x y graphical -- )
     end-class graphical

   This code defines a class 'graphical' with an operation 'draw'.  We
can perform the operation 'draw' on any 'graphical' object, e.g.:

     100 100 t-rex draw

where 't-rex' is a word (say, a constant) that produces a graphical
object.

   How do we create a graphical object?  With the present definitions,
we cannot create a useful graphical object.  The class 'graphical'
describes graphical objects in general, but not any concrete graphical
object type (C++ users would call it an _abstract class_); e.g., there
is no method for the selector 'draw' in the class 'graphical'.

   For concrete graphical objects, we define child classes of the class
'graphical', e.g.:

     graphical class \ "graphical" is the parent class
       cell% field circle-radius

     :noname ( x y circle -- )
       circle-radius @ draw-circle ;
     overrides draw

     :noname ( n-radius circle -- )
       circle-radius ! ;
     overrides construct

     end-class circle

   Here we define a class 'circle' as a child of 'graphical', with field
'circle-radius' (which behaves just like a field (*note Structures::);
it defines (using 'overrides') new methods for the selectors 'draw' and
'construct' ('construct' is defined in 'object', the parent class of
'graphical').

   Now we can create a circle on the heap (i.e., 'allocate'd memory)
with:

     50 circle heap-new constant my-circle

'heap-new' invokes 'construct', thus initializing the field
'circle-radius' with 50.  We can draw this new circle at (100,100) with:

     100 100 my-circle draw

   Note: You can only invoke a selector if the object on the TOS (the
receiving object) belongs to the class where the selector was defined or
one of its descendents; e.g., you can invoke 'draw' only for objects
belonging to 'graphical' or its descendents (e.g., 'circle').
Immediately before 'end-class', the search order has to be the same as
immediately after 'class'.

5.23.3.3 The 'object.fs' base class
...................................

When you define a class, you have to specify a parent class.  So how do
you start defining classes?  There is one class available from the
start: 'object'.  It is ancestor for all classes and so is the only
class that has no parent.  It has two selectors: 'construct' and
'print'.

5.23.3.4 Creating objects
.........................

You can create and initialize an object of a class on the heap with
'heap-new' ( ...  class -- object ) and in the dictionary (allocation
with 'allot') with 'dict-new' ( ...  class -- object ).  Both words
invoke 'construct', which consumes the stack items indicated by "..."
above.

   If you want to allocate memory for an object yourself, you can get
its alignment and size with 'class-inst-size 2@' ( class -- align size ).
Once you have memory for an object, you can initialize it with
'init-object' ( ...  class object -- ); 'construct' does only a part of
the necessary work.

5.23.3.5 Object-Oriented Programming Style
..........................................

This section is not exhaustive.

   In general, it is a good idea to ensure that all methods for the same
selector have the same stack effect: when you invoke a selector, you
often have no idea which method will be invoked, so, unless all methods
have the same stack effect, you will not know the stack effect of the
selector invocation.

   One exception to this rule is methods for the selector 'construct'.
We know which method is invoked, because we specify the class to be
constructed at the same place.  Actually, I defined 'construct' as a
selector only to give the users a convenient way to specify
initialization.  The way it is used, a mechanism different from selector
invocation would be more natural (but probably would take more code and
more space to explain).

5.23.3.6 Class Binding
......................

Normal selector invocations determine the method at run-time depending
on the class of the receiving object.  This run-time selection is called
late binding.

   Sometimes it's preferable to invoke a different method.  For example,
you might want to use the simple method for 'print'ing 'object's instead
of the possibly long-winded 'print' method of the receiver class.  You
can achieve this by replacing the invocation of 'print' with:

     [bind] object print

in compiled code or:

     bind object print

in interpreted code.  Alternatively, you can define the method with a
name (e.g., 'print-object'), and then invoke it through the name.  Class
binding is just a (often more convenient) way to achieve the same
effect; it avoids name clutter and allows you to invoke methods directly
without naming them first.

   A frequent use of class binding is this: When we define a method for
a selector, we often want the method to do what the selector does in the
parent class, and a little more.  There is a special word for this
purpose: '[parent]'; '[parent] _selector_' is equivalent to '[bind]
_parent selector_', where '_parent_' is the parent class of the current
class.  E.g., a method definition might look like:

     :noname
       dup [parent] foo \ do parent's foo on the receiving object
       ... \ do some more
     ; overrides foo

   In 'Object-oriented programming in ANS Forth' (Forth Dimensions,
March 1997), Andrew McKewan presents class binding as an optimization
technique.  I recommend not using it for this purpose unless you are in
an emergency.  Late binding is pretty fast with this model anyway, so
the benefit of using class binding is small; the cost of using class
binding where it is not appropriate is reduced maintainability.

   While we are at programming style questions: You should bind
selectors only to ancestor classes of the receiving object.  E.g., say,
you know that the receiving object is of class 'foo' or its descendents;
then you should bind only to 'foo' and its ancestors.

5.23.3.7 Method conveniences
............................

In a method you usually access the receiving object pretty often.  If
you define the method as a plain colon definition (e.g., with
':noname'), you may have to do a lot of stack gymnastics.  To avoid
this, you can define the method with 'm: ... ;m'.  E.g., you could
define the method for 'draw'ing a 'circle' with

     m: ( x y circle -- )
       ( x y ) this circle-radius @ draw-circle ;m

   When this method is executed, the receiver object is removed from the
stack; you can access it with 'this' (admittedly, in this example the
use of 'm: ... ;m' offers no advantage).  Note that I specify the stack
effect for the whole method (i.e.  including the receiver object), not
just for the code between 'm:' and ';m'.  You cannot use 'exit' in
'm:...;m'; instead, use 'exitm'.(1)

   You will frequently use sequences of the form 'this _field_' (in the
example above: 'this circle-radius').  If you use the field only in this
way, you can define it with 'inst-var' and eliminate the 'this' before
the field name.  E.g., the 'circle' class above could also be defined
with:

     graphical class
       cell% inst-var radius

     m: ( x y circle -- )
       radius @ draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       radius ! ;m
     overrides construct

     end-class circle

   'radius' can only be used in 'circle' and its descendent classes and
inside 'm:...;m'.

   You can also define fields with 'inst-value', which is to 'inst-var'
what 'value' is to 'variable'.  You can change the value of such a field
with '[to-inst]'.  E.g., we could also define the class 'circle' like
this:

     graphical class
       inst-value radius

     m: ( x y circle -- )
       radius draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       [to-inst] radius ;m
     overrides construct

     end-class circle

   ---------- Footnotes ----------

   (1) Moreover, for any word that calls 'catch' and was defined before
loading 'objects.fs', you have to redefine it like I redefined 'catch':
': catch this >r catch r> to-this ;'

5.23.3.8 Classes and Scoping
............................

Inheritance is frequent, unlike structure extension.  This exacerbates
the problem with the field name convention (*note Structure Naming
Convention::): One always has to remember in which class the field was
originally defined; changing a part of the class structure would require
changes for renaming in otherwise unaffected code.

   To solve this problem, I added a scoping mechanism (which was not in
my original charter): A field defined with 'inst-var' (or 'inst-value')
is visible only in the class where it is defined and in the descendent
classes of this class.  Using such fields only makes sense in
'm:'-defined methods in these classes anyway.

   This scoping mechanism allows us to use the unadorned field name,
because name clashes with unrelated words become much less likely.

   Once we have this mechanism, we can also use it for controlling the
visibility of other words: All words defined after 'protected' are
visible only in the current class and its descendents.  'public'
restores the compilation (i.e.  'current') word list that was in effect
before.  If you have several 'protected's without an intervening
'public' or 'set-current', 'public' will restore the compilation word
list in effect before the first of these 'protected's.

5.23.3.9 Dividing classes
.........................

You may want to do the definition of methods separate from the
definition of the class, its selectors, fields, and instance variables,
i.e., separate the implementation from the definition.  You can do this
in the following way:

     graphical class
       inst-value radius
     end-class circle

     ... \ do some other stuff

     circle methods \ now we are ready

     m: ( x y circle -- )
       radius draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       [to-inst] radius ;m
     overrides construct

     end-methods

   You can use several 'methods'...'end-methods' sections.  The only
things you can do to the class in these sections are: defining methods,
and overriding the class's selectors.  You must not define new selectors
or fields.

   Note that you often have to override a selector before using it.  In
particular, you usually have to override 'construct' with a new method
before you can invoke 'heap-new' and friends.  E.g., you must not create
a circle before the 'overrides construct' sequence in the example above.

5.23.3.10 Object Interfaces
...........................

In this model you can only call selectors defined in the class of the
receiving objects or in one of its ancestors.  If you call a selector
with a receiving object that is not in one of these classes, the result
is undefined; if you are lucky, the program crashes immediately.

   Now consider the case when you want to have a selector (or several)
available in two classes: You would have to add the selector to a common
ancestor class, in the worst case to 'object'.  You may not want to do
this, e.g., because someone else is responsible for this ancestor class.

   The solution for this problem is interfaces.  An interface is a
collection of selectors.  If a class implements an interface, the
selectors become available to the class and its descendents.  A class
can implement an unlimited number of interfaces.  For the problem
discussed above, we would define an interface for the selector(s), and
both classes would implement the interface.

   As an example, consider an interface 'storage' for writing objects to
disk and getting them back, and a class 'foo' that implements it.  The
code would look like this:

     interface
       selector write ( file object -- )
       selector read1 ( file object -- )
     end-interface storage

     bar class
       storage implementation

     ... overrides write
     ... overrides read1
     ...
     end-class foo

(I would add a word 'read' ( file -- object ) that uses 'read1'
internally, but that's beyond the point illustrated here.)

   Note that you cannot use 'protected' in an interface; and of course
you cannot define fields.

   In the Neon model, all selectors are available for all classes;
therefore it does not need interfaces.  The price you pay in this model
is slower late binding, and therefore, added complexity to avoid late
binding.

5.23.3.11 'objects.fs' Implementation
.....................................

An object is a piece of memory, like one of the data structures
described with 'struct...end-struct'.  It has a field 'object-map' that
points to the method map for the object's class.

   The _method map_(1) is an array that contains the execution tokens
(xts) of the methods for the object's class.  Each selector contains an
offset into a method map.

   'selector' is a defining word that uses 'CREATE' and 'DOES>'.  The
body of the selector contains the offset; the 'DOES>' action for a class
selector is, basically:

     ( object addr ) @ over object-map @ + @ execute

   Since 'object-map' is the first field of the object, it does not
generate any code.  As you can see, calling a selector has a small,
constant cost.

   A class is basically a 'struct' combined with a method map.  During
the class definition the alignment and size of the class are passed on
the stack, just as with 'struct's, so 'field' can also be used for
defining class fields.  However, passing more items on the stack would
be inconvenient, so 'class' builds a data structure in memory, which is
accessed through the variable 'current-interface'.  After its definition
is complete, the class is represented on the stack by a pointer (e.g.,
as parameter for a child class definition).

   A new class starts off with the alignment and size of its parent, and
a copy of the parent's method map.  Defining new fields extends the size
and alignment; likewise, defining new selectors extends the method map.
'overrides' just stores a new xt in the method map at the offset given
by the selector.

   Class binding just gets the xt at the offset given by the selector
from the class's method map and 'compile,'s (in the case of '[bind]')
it.

   I implemented 'this' as a 'value'.  At the start of an 'm:...;m'
method the old 'this' is stored to the return stack and restored at the
end; and the object on the TOS is stored 'TO this'.  This technique has
one disadvantage: If the user does not leave the method via ';m', but
via 'throw' or 'exit', 'this' is not restored (and 'exit' may crash).
To deal with the 'throw' problem, I have redefined 'catch' to save and
restore 'this'; the same should be done with any word that can catch an
exception.  As for 'exit', I simply forbid it (as a replacement, there
is 'exitm').

   'inst-var' is just the same as 'field', with a different 'DOES>'
action:
     @ this +
   Similar for 'inst-value'.

   Each class also has a word list that contains the words defined with
'inst-var' and 'inst-value', and its protected words.  It also has a
pointer to its parent.  'class' pushes the word lists of the class and
all its ancestors onto the search order stack, and 'end-class' drops
them.

   An interface is like a class without fields, parent and protected
words; i.e., it just has a method map.  If a class implements an
interface, its method map contains a pointer to the method map of the
interface.  The positive offsets in the map are reserved for class
methods, therefore interface map pointers have negative offsets.
Interfaces have offsets that are unique throughout the system, unlike
class selectors, whose offsets are only unique for the classes where the
selector is available (invokable).

   This structure means that interface selectors have to perform one
indirection more than class selectors to find their method.  Their body
contains the interface map pointer offset in the class method map, and
the method offset in the interface method map.  The 'does>' action for
an interface selector is, basically:

     ( object selector-body )
     2dup selector-interface @ ( object selector-body object interface-offset )
     swap object-map @ + @ ( object selector-body map )
     swap selector-offset @ + @ execute

   where 'object-map' and 'selector-offset' are first fields and
generate no code.

   As a concrete example, consider the following code:

     interface
       selector if1sel1
       selector if1sel2
     end-interface if1

     object class
       if1 implementation
       selector cl1sel1
       cell% inst-var cl1iv1

     ' m1 overrides construct
     ' m2 overrides if1sel1
     ' m3 overrides if1sel2
     ' m4 overrides cl1sel2
     end-class cl1

     create obj1 object dict-new drop
     create obj2 cl1    dict-new drop

   The data structure created by this code (including the data structure
for 'object') is shown in the figure (objects-implementation.eps),
assuming a cell size of 4.

   ---------- Footnotes ----------

   (1) This is Self terminology; in C++ terminology: virtual function
table.

5.23.3.12 'objects.fs' Glossary
...............................

'bind'       ... "class" "selector" -- ...         objects       "bind"
   Execute the method for SELECTOR in CLASS.

'<bind>'       class selector-xt -- xt         objects       "<bind>"
   XT is the method for the selector SELECTOR-XT in CLASS.

'bind''       "class" "selector" -- xt         objects       "bind"'
   XT is the method for SELECTOR in CLASS.

'[bind]'       compile-time: "class" "selector" -- ; run-time: ... object -- ...         objects       "[bind]"
   Compile the method for SELECTOR in CLASS.

'class'       parent-class -- align offset         objects       "class"
   Start a new class definition as a child of PARENT-CLASS.  ALIGN
OFFSET are for use by FIELD etc.

'class->map'       class -- map         objects       "class->map"
   MAP is the pointer to CLASS's method map; it points to the place in
the map to which the selector offsets refer (i.e., where OBJECT-MAPs
point to).

'class-inst-size'       class -- addr         objects       "class-inst-size"
   Give the size specification for an instance (i.e.  an object) of
CLASS; used as 'class-inst-size 2 ( class -- align size )'.

'class-override!'       xt sel-xt class-map --         objects       "class-override!"
   XT is the new method for the selector SEL-XT in CLASS-MAP.

'class-previous'       class --         objects       "class-previous"
   Drop CLASS's wordlists from the search order.  No checking is made
whether CLASS's wordlists are actually on the search order.

'class>order'       class --         objects       "class>order"
   Add CLASS's wordlists to the head of the search-order.

'construct'       ... object --         objects       "construct"
   Initialize the data fields of OBJECT.  The method for the class
OBJECT just does nothing: '( object -- )'.

'current''       "selector" -- xt         objects       "current"'
   XT is the method for SELECTOR in the current class.

'[current]'       compile-time: "selector" -- ; run-time: ... object -- ...         objects       "[current]"
   Compile the method for SELECTOR in the current class.

'current-interface'       -- addr         objects       "current-interface"
   Variable: contains the class or interface currently being defined.

'dict-new'       ... class -- object         objects       "dict-new"
   'allot' and initialize an object of class CLASS in the dictionary.

'end-class'       align offset "name" --         objects       "end-class"
   NAME execution: '-- class'
End a class definition.  The resulting class is CLASS.

'end-class-noname'       align offset -- class         objects       "end-class-noname"
   End a class definition.  The resulting class is CLASS.

'end-interface'       "name" --         objects       "end-interface"
   'name' execution: '-- interface'
End an interface definition.  The resulting interface is INTERFACE.

'end-interface-noname'       -- interface         objects       "end-interface-noname"
   End an interface definition.  The resulting interface is INTERFACE.

'end-methods'       --         objects       "end-methods"
   Switch back from defining methods of a class to normal mode
(currently this just restores the old search order).

'exitm'       --         objects       "exitm"
   'exit' from a method; restore old 'this'.

'heap-new'       ... class -- object         objects       "heap-new"
   'allocate' and initialize an object of class CLASS.

'implementation'       interface --         objects       "implementation"
   The current class implements INTERFACE.  I.e., you can use all
selectors of the interface in the current class and its descendents.

'init-object'       ... class object --         objects       "init-object"
   Initialize a chunk of memory (OBJECT) to an object of class CLASS;
then performs 'construct'.

'inst-value'       align1 offset1 "name" -- align2 offset2         objects       "inst-value"
   NAME execution: '-- w'
W is the value of the field NAME in 'this' object.

'inst-var'       align1 offset1 align size "name" -- align2 offset2         objects       "inst-var"
   NAME execution: '-- addr'
ADDR is the address of the field NAME in 'this' object.

'interface'       --         objects       "interface"
   Start an interface definition.

'm:'       -- xt colon-sys; run-time: object --         objects       "m:"
   Start a method definition; OBJECT becomes new 'this'.

':m'       "name" -- xt; run-time: object --         objects       ":m"
   Start a named method definition; OBJECT becomes new 'this'.  Has to
be ended with ';m'.

';m'       colon-sys --; run-time: --         objects       ";m"
   End a method definition; restore old 'this'.

'method'       xt "name" --         objects       "method"
   'name' execution: '... object -- ...'
Create selector NAME and makes XT its method in the current class.

'methods'       class --         objects       "methods"
   Makes CLASS the current class.  This is intended to be used for
defining methods to override selectors; you cannot define new fields or
selectors.

'object'       -- class         objects       "object"
   the ancestor of all classes.

'overrides'       xt "selector" --         objects       "overrides"
   replace default method for SELECTOR in the current class with XT.
'overrides' must not be used during an interface definition.

'[parent]'       compile-time: "selector" -- ; run-time: ... object -- ...         objects       "[parent]"
   Compile the method for SELECTOR in the parent of the current class.

'print'       object --         objects       "print"
   Print the object.  The method for the class OBJECT prints the address
of the object and the address of its class.

'protected'       --         objects       "protected"
   Set the compilation wordlist to the current class's wordlist

'public'       --         objects       "public"
   Restore the compilation wordlist that was in effect before the last
'protected' that actually changed the compilation wordlist.

'selector'       "name" --         objects       "selector"
   NAME execution: '... object -- ...'
Create selector NAME for the current class and its descendents; you can
set a method for the selector in the current class with 'overrides'.

'this'       -- object         objects       "this"
   the receiving object of the current method (aka active object).

'<to-inst>'       w xt --         objects       "<to-inst>"
   store W into the field XT in 'this' object.

'[to-inst]'       compile-time: "name" -- ; run-time: w --         objects       "[to-inst]"
   store W into field NAME in 'this' object.

'to-this'       object --         objects       "to-this"
   Set 'this' (used internally, but useful when debugging).

'xt-new'       ... class xt -- object         objects       "xt-new"
   Make a new object, using 'xt ( align size -- addr )' to get memory.

5.23.4 The 'oof.fs' model
-------------------------

This section describes the 'oof.fs' package.

   The package described in this section has been used in bigFORTH since
1991, and used for two large applications: a chromatographic system used
to create new medicaments, and a graphic user interface library (MINOS).

   You can find a description (in German) of 'oof.fs' in 'Object
oriented bigFORTH' by Bernd Paysan, published in 'Vierte Dimension'
10(2), 1994.

5.23.4.1 Properties of the 'oof.fs' model
.........................................

   * This model combines object oriented programming with information
     hiding.  It helps you writing large application, where scoping is
     necessary, because it provides class-oriented scoping.

   * Named objects, object pointers, and object arrays can be created,
     selector invocation uses the "object selector" syntax.  Selector
     invocation to objects and/or selectors on the stack is a bit less
     convenient, but possible.

   * Selector invocation and instance variable usage of the active
     object is straightforward, since both make use of the active
     object.

   * Late binding is efficient and easy to use.

   * State-smart objects parse selectors.  However, extensibility is
     provided using a (parsing) selector 'postpone' and a selector '''.

   * An implementation in Standard Forth is available.

5.23.4.2 Basic 'oof.fs' Usage
.............................

This section uses the same example as for 'objects' (*note Basic Objects
Usage::).

   You can define a class for graphical objects like this:

     object class graphical \ "object" is the parent class
       method draw ( x y -- )
     class;

   This code defines a class 'graphical' with an operation 'draw'.  We
can perform the operation 'draw' on any 'graphical' object, e.g.:

     100 100 t-rex draw

where 't-rex' is an object or object pointer, created with e.g.
'graphical : t-rex'.

   How do we create a graphical object?  With the present definitions,
we cannot create a useful graphical object.  The class 'graphical'
describes graphical objects in general, but not any concrete graphical
object type (C++ users would call it an _abstract class_); e.g., there
is no method for the selector 'draw' in the class 'graphical'.

   For concrete graphical objects, we define child classes of the class
'graphical', e.g.:

     graphical class circle \ "graphical" is the parent class
       cell var circle-radius
     how:
       : draw ( x y -- )
         circle-radius @ draw-circle ;

       : init ( n-radius -- )
         circle-radius ! ;
     class;

   Here we define a class 'circle' as a child of 'graphical', with a
field 'circle-radius'; it defines new methods for the selectors 'draw'
and 'init' ('init' is defined in 'object', the parent class of
'graphical').

   Now we can create a circle in the dictionary with:

     50 circle : my-circle

':' invokes 'init', thus initializing the field 'circle-radius' with 50.
We can draw this new circle at (100,100) with:

     100 100 my-circle draw

   Note: You can only invoke a selector if the receiving object belongs
to the class where the selector was defined or one of its descendents;
e.g., you can invoke 'draw' only for objects belonging to 'graphical' or
its descendents (e.g., 'circle').  The scoping mechanism will check if
you try to invoke a selector that is not defined in this class
hierarchy, so you'll get an error at compilation time.

5.23.4.3 The 'oof.fs' base class
................................

When you define a class, you have to specify a parent class.  So how do
you start defining classes?  There is one class available from the
start: 'object'.  You have to use it as ancestor for all classes.  It is
the only class that has no parent.  Classes are also objects, except
that they don't have instance variables; class manipulation such as
inheritance or changing definitions of a class is handled through
selectors of the class 'object'.

   'object' provides a number of selectors:

   * 'class' for subclassing, 'definitions' to add definitions later on,
     and 'class?' to get type informations (is the class a subclass of
     the class passed on the stack?).

     'class'       "name" --         oof       "class"

     'definitions'       --         oof       "definitions"

     'class?'       o -- flag         oof       "class-query"

   * 'init' and 'dispose' as constructor and destructor of the object.
     'init' is invocated after the object's memory is allocated, while
     'dispose' also handles deallocation.  Thus if you redefine
     'dispose', you have to call the parent's dispose with 'super
     dispose', too.

     'init'       ... --         oof       "init"

     'dispose'       --         oof       "dispose"

   * 'new', 'new[]', ':', 'ptr', 'asptr', and '[]' to create named and
     unnamed objects and object arrays or object pointers.

     'new'       -- o         oof       "new"

     'new[]'       n -- o         oof       "new-array"

     ':'       "name" --         oof       "define"

     'ptr'       "name" --         oof       "ptr"

     'asptr'       o "name" --         oof       "asptr"

     '[]'       n "name" --         oof       "array"

   * '::' and 'super' for explicit scoping.  You should use explicit
     scoping only for super classes or classes with the same set of
     instance variables.  Explicitly-scoped selectors use early binding.

     '::'       "name" --         oof       "scope"

     'super'       "name" --         oof       "super"

   * 'self' to get the address of the object

     'self'       -- o         oof       "self"

   * 'bind', 'bound', 'link', and 'is' to assign object pointers and
     instance defers.

     'bind'       o "name" --         oof       "bind"

     'bound'       class addr "name" --         oof       "bound"

     'link'       "name" -- class addr         oof       "link"

     'is'       xt "name" --         oof       "is"

   * ''' to obtain selector tokens, 'send' to invocate selectors form
     the stack, and 'postpone' to generate selector invocation code.

     '''       "name" -- xt         oof       "tick"

     'postpone'       "name" --         oof       "postpone"

   * 'with' and 'endwith' to select the active object from the stack,
     and enable its scope.  Using 'with' and 'endwith' also allows you
     to create code using selector 'postpone' without being trapped by
     the state-smart objects.

     'with'       o --         oof       "with"

     'endwith'       --         oof       "endwith"

5.23.4.4 Class Declaration
..........................

   * Instance variables

     'var'       size --         oof       "var"
     Create an instance variable

   * Object pointers

     'ptr'       --         oof       "ptr"
     Create an instance pointer

     'asptr'       class --         oof       "asptr"
     Create an alias to an instance pointer, cast to another class.

   * Instance defers

     'defer'       --         oof       "defer"
     Create an instance defer

   * Method selectors

     'early'       --         oof       "early"
     Create a method selector for early binding.

     'method'       --         oof       "method"
     Create a method selector.

   * Class-wide variables

     'static'       --         oof       "static"
     Create a class-wide cell-sized variable.

   * End declaration

     'how:'       --         oof       "how-to"
     End declaration, start implementation

     'class;'       --         oof       "end-class"
     End class declaration or implementation

5.23.4.5 Class Implementation
.............................

5.23.5 The 'mini-oof.fs' model
------------------------------

Gforth's third object oriented Forth package is a 12-liner.  It uses a
mixture of the 'objects.fs' and the 'oof.fs' syntax, and reduces to the
bare minimum of features.  This is based on a posting of Bernd Paysan in
comp.lang.forth.

5.23.5.1 Basic 'mini-oof.fs' Usage
..................................

There is a base class ('class', which allocates one cell for the object
pointer) plus seven other words: to define a method, a variable, a
class; to end a class, to resolve binding, to allocate an object and to
compile a class method.

'object'       -- a-addr         mini-oof       "object"
   OBJECT is the base class of all objects.

'method'       m v "name" -- m' v         mini-oof       "method"
   Define a selector.

'var'       m v size "name" -- m v'         mini-oof       "var"
   Define a variable with SIZE bytes.

'class'       class -- class selectors vars         mini-oof       "class"
   Start the definition of a class.

'end-class'       class selectors vars "name" --         mini-oof       "end-class"
   End the definition of a class.

'defines'       xt class "name" --         mini-oof       "defines"
   Bind XT to the selector NAME in class CLASS.

'new'       class -- o         mini-oof       "new"
   Create a new incarnation of the class CLASS.

'::'       class "name" --         mini-oof       "colon-colon"
   Compile the method for the selector NAME of the class CLASS (not
immediate!).

5.23.5.2 Mini-OOF Example
.........................

A short example shows how to use this package.  This example, in
slightly extended form, is supplied as 'moof-exm.fs'

     object class
       method init
       method draw
     end-class graphical

   This code defines a class 'graphical' with an operation 'draw'.  We
can perform the operation 'draw' on any 'graphical' object, e.g.:

     100 100 t-rex draw

   where 't-rex' is an object or object pointer, created with e.g.
'graphical new Constant t-rex'.

   For concrete graphical objects, we define child classes of the class
'graphical', e.g.:

     graphical class
       cell var circle-radius
     end-class circle \ "graphical" is the parent class

     :noname ( x y -- )
       circle-radius @ draw-circle ; circle defines draw
     :noname ( r -- )
       circle-radius ! ; circle defines init

   There is no implicit init method, so we have to define one.  The
creation code of the object now has to call init explicitely.

     circle new Constant my-circle
     50 my-circle init

   It is also possible to add a function to create named objects with
automatic call of 'init', given that all objects have 'init' on the same
place:

     : new: ( .. o "name" -- )
         new dup Constant init ;
     80 circle new: large-circle

   We can draw this new circle at (100,100) with:

     100 100 my-circle draw

5.23.5.3 'mini-oof.fs' Implementation
.....................................

Object-oriented systems with late binding typically use a
"vtable"-approach: the first variable in each object is a pointer to a
table, which contains the methods as function pointers.  The vtable may
also contain other information.

   So first, let's declare selectors:

     : method ( m v "name" -- m' v ) Create  over , swap cell+ swap
       DOES> ( ... o -- ... ) @ over @ + @ execute ;

   During selector declaration, the number of selectors and instance
variables is on the stack (in address units).  'method' creates one
selector and increments the selector number.  To execute a selector, it
takes the object, fetches the vtable pointer, adds the offset, and
executes the method xt stored there.  Each selector takes the object it
is invoked with as top of stack parameter; it passes the parameters
(including the object) unchanged to the appropriate method which should
consume that object.

   Now, we also have to declare instance variables

     : var ( m v size "name" -- m v' ) Create  over , +
       DOES> ( o -- addr ) @ + ;

   As before, a word is created with the current offset.  Instance
variables can have different sizes (cells, floats, doubles, chars), so
all we do is take the size and add it to the offset.  If your machine
has alignment restrictions, put the proper 'aligned' or 'faligned'
before the variable, to adjust the variable offset.  That's why it is on
the top of stack.

   We need a starting point (the base object) and some syntactic sugar:

     Create object  1 cells , 2 cells ,
     : class ( class -- class selectors vars ) dup 2@ ;

   For inheritance, the vtable of the parent object has to be copied
when a new, derived class is declared.  This gives all the methods of
the parent class, which can be overridden, though.

     : end-class  ( class selectors vars "name" -- )
       Create  here >r , dup , 2 cells ?DO ['] noop , 1 cells +LOOP
       cell+ dup cell+ r> rot @ 2 cells /string move ;

   The first line creates the vtable, initialized with 'noop's.  The
second line is the inheritance mechanism, it copies the xts from the
parent vtable.

   We still have no way to define new methods, let's do that now:

     : defines ( xt class "name" -- ) ' >body @ + ! ;

   To allocate a new object, we need a word, too:

     : new ( class -- o )  here over @ allot swap over ! ;

   Sometimes derived classes want to access the method of the parent
object.  There are two ways to achieve this with Mini-OOF: first, you
could use named words, and second, you could look up the vtable of the
parent object.

     : :: ( class "name" -- ) ' >body @ + @ compile, ;

   Nothing can be more confusing than a good example, so here is one.
First let's declare a text object (called 'button'), that stores text
and position:

     object class
       cell var text
       cell var len
       cell var x
       cell var y
       method init
       method draw
     end-class button

Now, implement the two methods, 'draw' and 'init':

     :noname ( o -- )
      >r r@ x @ r@ y @ at-xy  r@ text @ r> len @ type ;
      button defines draw
     :noname ( addr u o -- )
      >r 0 r@ x ! 0 r@ y ! r@ len ! r> text ! ;
      button defines init

To demonstrate inheritance, we define a class 'bold-button', with no new
data and no new selectors:

     button class
     end-class bold-button

     : bold   27 emit ." [1m" ;
     : normal 27 emit ." [0m" ;

The class 'bold-button' has a different draw method to 'button', but the
new method is defined in terms of the draw method for 'button':

     :noname bold [ button :: draw ] normal ; bold-button defines draw

Finally, create two objects and apply selectors:

     button new Constant foo
     s" thin foo" foo init
     page
     foo draw
     bold-button new Constant bar
     s" fat bar" bar init
     1 bar y !
     bar draw

5.23.6 Comparison with other object models
------------------------------------------

Many object-oriented Forth extensions have been proposed ('A survey of
object-oriented Forths' (SIGPLAN Notices, April 1996) by Bradford J.
Rodriguez and W. F. S. Poehlman lists 17).  This section discusses the
relation of the object models described here to two well-known and two
closely-related (by the use of method maps) models.  Andras Zsoter
helped us with this section.

   The most popular model currently seems to be the Neon model (see
'Object-oriented programming in ANS Forth' (Forth Dimensions, March
1997) by Andrew McKewan) but this model has a number of limitations (1):

   * It uses a '_selector object_' syntax, which makes it unnatural to
     pass objects on the stack.

   * It requires that the selector parses the input stream (at compile
     time); this leads to reduced extensibility and to bugs that are
     hard to find.

   * It allows using every selector on every object; this eliminates the
     need for interfaces, but makes it harder to create efficient
     implementations.

   Another well-known publication is 'Object-Oriented Forth' (Academic
Press, London, 1987) by Dick Pountain.  However, it is not really about
object-oriented programming, because it hardly deals with late binding.
Instead, it focuses on features like information hiding and overloading
that are characteristic of modular languages like Ada (83).

   In Does late binding have to be slow?
(http://www.forth.org/oopf.html) (Forth Dimensions 18(1) 1996, pages
31-35) Andras Zsoter describes a model that makes heavy use of an active
object (like 'this' in 'objects.fs'): The active object is not only used
for accessing all fields, but also specifies the receiving object of
every selector invocation; you have to change the active object
explicitly with '{ ... }', whereas in 'objects.fs' it changes more or
less implicitly at 'm: ... ;m'.  Such a change at the method entry point
is unnecessary with Zsoter's model, because the receiving object is the
active object already.  On the other hand, the explicit change is
absolutely necessary in that model, because otherwise no one could ever
change the active object.  An Standard Forth implementation of this
model is available through <http://www.forth.org/oopf.html>.

   The 'oof.fs' model combines information hiding and overloading
resolution (by keeping names in various word lists) with object-oriented
programming.  It sets the active object implicitly on method entry, but
also allows explicit changing (with '>o...o>' or with 'with...endwith').
It uses parsing and state-smart objects and classes for resolving
overloading and for early binding: the object or class parses the
selector and determines the method from this.  If the selector is not
parsed by an object or class, it performs a call to the selector for the
active object (late binding), like Zsoter's model.  Fields are always
accessed through the active object.  The big disadvantage of this model
is the parsing and the state-smartness, which reduces extensibility and
increases the opportunities for subtle bugs; essentially, you are only
safe if you never tick or 'postpone' an object or class (Bernd
disagrees, but I (Anton) am not convinced).

   The 'mini-oof.fs' model is quite similar to a very stripped-down
version of the 'objects.fs' model, but syntactically it is a mixture of
the 'objects.fs' and 'oof.fs' models.

   ---------- Footnotes ----------

   (1) A longer version of this critique can be found in 'On
Standardizing Object-Oriented Forth Extensions' (Forth Dimensions, May
1997) by Anton Ertl.

5.24 Programming Tools
======================

5.24.1 Locating source code definitions
---------------------------------------

Many programming systems are organized as an integrated development
environment (IDE) where the editor is the hub of the system, and allows
building and running programs.  If you want that, Gforth has it, too
(*note Emacs and Gforth::).

   However, several Forth systems have a different kind of IDE: The
Forth command line is the hub of the environment; you can view the
source from there in various ways, and call an editor if needed.

   Gforth also implements such an IDE. It mostly follows the conventions
of SwiftForth where they exist, but implements features beyond them.

   An advantage of this approach is that it allows you to use your
favourite editor: set the environment variable 'EDITOR' to your
favourite editor, and the editing commands will call that editor; Gforth
invokes some GUI editors in the background (so you do not need to finish
editing to continue with your Forth session), terminal editors in the
foreground (default for editors not known to Gforth is foreground).  If
you have not set 'EDITOR', the default editor is 'vi'.

'locate'       "name" --         gforth       "locate"
   Show the source code of the word name and set the current location
there.

   The _current location_ is set by a number of other words in addition
to 'locate'.  Also, when an error happens while loading a file, the
location of the error becomes the current location.

   A number of words work with the current location:

'l'       --         unknown       "l"
   Display source code lines at the current location.

'n'       --         gforth       "n"
   Display lines behind the current location, or behind the last 'n' or
'b' output (whichever was later).

'b'       --         gforth       "b"
   Display lines before the current location, or before the last 'n' or
'b' output (whichever was later).

'g'       --         gforth       "g"
   Enter the editor at the current location, or at the start of the last
'n' or 'b' output (whichever was later).

   You can control how many lines 'l', 'n' and 'b' show by changing the
values:

'before-locate'       -- u         gforth       "before-locate"
   number of lines shown before current location (default 3).

'after-locate'       -- u         gforth       "after-locate"
   number of lines shown after current location (default 12).

   Finally, you can directly go to the source code of a word in the
editor with

'edit'       "name" --         gforth       "edit"
   Enter the editor at the location of "name"

5.24.2 Locating documentation
-----------------------------

'help'       "rest-of-line" --         gforth       "help"
   If no name is given, show basic help.  If a documentation node name
is given followed by "::", show the start of the node.  If the name of a
word is given, show the documentation of the word if it exists, or its
source code if not.  Use 'g' to enter the editor at the point shown by
'help'.

   'Help' sets the current location, so you can use 'n' and 'b' to show
more of the text, or 'g' to visit the documentation in an editor (*note
Locating source code definitions::).

5.24.3 Locating uses of a word
------------------------------

'where'       "name" --         gforth       "where"
   Show all places where name is used (text-interpreted).  You can then
use 'ww', 'nw' or 'bw' to inspect specific occurences more closely.

'ww'       u --         gforth       "ww"
   The next 'l' or 'g' shows the 'where' result with index u

'nw'       --         gforth       "nw"
   The next 'l' or 'g' shows the next 'where' result; if the current one
is the last one, after 'nw' there is no current one.  If there is no
current one, after 'nw' the first one is the current one.

'bw'       --         gforth       "bw"
   The next 'l' or 'g' shows the previous 'where' result; if the current
one is the first one, after 'bw' there is no current one.  If there is
no current one, after 'bw' the last one is the current one.

'gg'       --         gforth       "gg"
   The next 'ww', 'nw', 'bw', 'bb', 'nb', 'lb' (but not 'locate',
'edit', 'l' or 'g') puts it result in the editor (like 'g').  Use 'gg
gg' to make this permanent rather than one-shot.

'll'       --         gforth       "ll"
   The next 'ww', 'nw', 'bw', 'bb', 'nb', 'lb' (but not 'locate',
'edit', 'l' or 'g') displays in the Forth system (like 'l').  Use 'll
ll' to make this permanent rather than one-shot.

'whereg'       "name" --         gforth       "whereg"
   Like 'where', but puts the output in the editor.  In Emacs, you can
then use the compilation-mode commands (*note (emacs)Compilation Mode::)
to inspect specific occurences more closely.

5.24.4 Locating exception source
--------------------------------

'tt'       u --         gforth       "tt"

'nt'        --         gforth       "nt"

'bt'       --         gforth       "bt"

5.24.5 Examining compiled code
------------------------------

And finally, 'see' and friends show compiled code.  Some of the things
in the native code are not present in the compiled code (e.g.,
formatting and comments), but this is useful to see what threaded code
or native code is produced by macros and Gforth's optimization features.

'see'       "<spaces>name" --         tools       "see"
   Locate NAME using the current search order.  Display the definition
of NAME.  Since this is achieved by decompiling the definition, the
formatting is mechanised and some source information (comments,
interpreted sequences within definitions etc.)  is lost.

'xt-see'       xt --         gforth       "xt-see"
   Decompile the definition represented by xt.

'simple-see'       "name" --         gforth       "simple-see"
   a simple decompiler that's closer to 'dump' than 'see'.

'simple-see-range'       addr1 addr2 --         gforth       "simple-see-range"

'see-code'       "name" --         gforth       "see-code"
   like 'simple-see', but also shows the dynamic native code for the
inlined primitives (except for the last).

'see-code-range'       addr1 addr2 --         gforth       "see-code-range"

5.24.6 Examining data and code
------------------------------

The following words inspect the stack non-destructively:

'...'       unknown         varargs       "(programmable)"

'.s'       --         tools       "dot-s"
   Display the number of items on the data stack, followed by a list of
the items (but not more than specified by 'maxdepth-.s'; TOS is the
right-most item.

'f.s'       --         gforth       "f-dot-s"
   Display the number of items on the floating-point stack, followed by
a list of the items (but not more than specified by 'maxdepth-.s'; TOS
is the right-most item.

'maxdepth-.s'       -- addr         gforth       "maxdepth-dot-s"
   A variable containing 9 by default.  '.s' and 'f.s' display at most
that many stack items.

   There is a word '.r' but it does not display the return stack!  It is
used for formatted numeric output (*note Simple numeric output::).

'Depth'       unknown         unknown       "Depth"

'fdepth'       -- +n         float       "f-depth"
   +n is the current number of (floating-point) values on the
floating-point stack.

'clearstack'       ... --         gforth       "clear-stack"
   remove and discard all/any items from the data stack.

'clearstacks'       ... --         gforth       "clear-stacks"
   empty data and FP stack

   The following words inspect memory.

'?'       a-addr --         tools       "question"
   Display the contents of address A-ADDR in the current number base.

'dump'       addr u --         unknown       "dump"

5.24.7 Forgetting words
-----------------------

Forth allows you to forget words (and everything that was alloted in the
dictonary after them) in a LIFO manner.

'marker'       "<spaces> name" --         core-ext       "marker"
   Create a definition, name (called a mark) whose execution semantics
are to remove itself and everything defined after it.

   The most common use of this feature is during progam development:
when you change a source file, forget all the words it defined and load
it again (since you also forget everything defined after the source file
was loaded, you have to reload that, too).  Note that effects like
storing to variables and destroyed system words are not undone when you
forget words.  With a system like Gforth, that is fast enough at
starting up and compiling, I find it more convenient to exit and restart
Gforth, as this gives me a clean slate.

   Here's an example of using 'marker' at the start of a source file
that you are debugging; it ensures that you only ever have one copy of
the file's definitions compiled at any time:

     [IFDEF] my-code
         my-code
     [ENDIF]

     marker my-code
     init-included-files

     \ .. definitions start here
     \ .
     \ .
     \ end

5.24.8 Debugging
----------------

Languages with a slow edit/compile/link/test development loop tend to
require sophisticated tracing/stepping debuggers to facilate debugging.

   A much better (faster) way in fast-compiling languages is to add
printing code at well-selected places, let the program run, look at the
output, see where things went wrong, add more printing code, etc., until
the bug is found.

   The simple debugging aids provided in 'debugs.fs' are meant to
support this style of debugging.

   The word '~~' prints debugging information (by default the source
location and the stack contents).  It is easy to insert.  If you use
Emacs it is also easy to remove ('C-x ~' in the Emacs Forth mode to
query-replace them with nothing).  The deferred words 'printdebugdata'
and '.debugline' control the output of '~~'.  The default source
location output format works well with Emacs' compilation mode, so you
can step through the program at the source level using 'C-x `' (the
advantage over a stepping debugger is that you can step in any direction
and you know where the crash has happened or where the strange data has
occurred).

'~~'       --         gforth       "tilde-tilde"
   Prints the source code location of the '~~' and the stack contents
with '.debugline'.

'printdebugdata'       --         gforth       "print-debug-data"

'.debugline'       nfile nline --         gforth       "print-debug-line"
   Print the source code location indicated by NFILE NLINE, and
additional debugging information; the default '.debugline' prints the
additional information with 'printdebugdata'.

'debug-fid'       -- file-id         gforth       "debug-fid"

   '~~' (and assertions) will usually print the wrong file name if a
marker is executed in the same file after their occurance.  They will
print '*somewhere*' as file name if a marker is executed in the same
file before their occurance.

'once'       --         unknown       "once"
   do the following up to THEN only once

'~~bt'       --         unknown       "~~bt"
   print stackdump and backtrace

'~~1bt'       --         unknown       "~~1bt"
   print stackdump and backtrace once

'???'       --         unknown       "???"
   Open a debuging shell

'WTF??'       --         unknown       "WTF??"
   Open a debugging shell with backtrace and stack dump

'!!FIXME!!'       --         unknown       "!!FIXME!!"
   word that should never be reached

'replace-word'       xt1 xt2 --         gforth       "replace-word"
   make xt2 do xt1, both need to be colon definitions

'~~Variable'       "name" --         unknown       "~~Variable"
   Variable that will be watched on every access

'~~Value'       n "name" --         unknown       "~~Value"
   Value that will be watched on every access

'+ltrace'       --         unknown       "+ltrace"
   turn on line tracing

'-ltrace'       unknown         unknown       "-ltrace"
   turn off line tracing

'view'       "name" --         gforth       "view"

'locate'       "name" --         gforth       "locate"
   Show the source code of the word name and set the current location
there.

'edit'       "name" --         gforth       "edit"
   Enter the editor at the location of "name"

'#loc'       nline nchar "file" --         unknown       "#loc"
   set next word's location to NLINE NCHAR in "FILE"

5.24.9 Assertions
-----------------

It is a good idea to make your programs self-checking, especially if you
make an assumption that may become invalid during maintenance (for
example, that a certain field of a data structure is never zero).
Gforth supports "assertions" for this purpose.  They are used like this:

     assert( flag )

   The code between 'assert(' and ')' should compute a flag, that should
be true if everything is alright and false otherwise.  It should not
change anything else on the stack.  The overall stack effect of the
assertion is '( -- )'.  E.g.

     assert( 1 1 + 2 = ) \ what we learn in school
     assert( dup 0<> ) \ assert that the top of stack is not zero
     assert( false ) \ this code should not be reached

   The need for assertions is different at different times.  During
debugging, we want more checking, in production we sometimes care more
for speed.  Therefore, assertions can be turned off, i.e., the assertion
becomes a comment.  Depending on the importance of an assertion and the
time it takes to check it, you may want to turn off some assertions and
keep others turned on.  Gforth provides several levels of assertions for
this purpose:

'assert0('       --         gforth       "assert-zero"
   Important assertions that should always be turned on.

'assert1('       --         gforth       "assert-one"
   Normal assertions; turned on by default.

'assert2('       --         gforth       "assert-two"
   Debugging assertions.

'assert3('       --         gforth       "assert-three"
   Slow assertions that you may not want to turn on in normal debugging;
you would turn them on mainly for thorough checking.

'assert('       --         gforth       "assert("
   Equivalent to 'assert1('

')'       --         gforth       "close-paren"
   End an assertion.  Generic end, can be used for other similar
purposes

   The variable 'assert-level' specifies the highest assertions that are
turned on.  I.e., at the default 'assert-level' of one, 'assert0(' and
'assert1(' assertions perform checking, while 'assert2(' and 'assert3('
assertions are treated as comments.

   The value of 'assert-level' is evaluated at compile-time, not at
run-time.  Therefore you cannot turn assertions on or off at run-time;
you have to set the 'assert-level' appropriately before compiling a
piece of code.  You can compile different pieces of code at different
'assert-level's (e.g., a trusted library at level 1 and newly-written
code at level 3).

'assert-level'       -- a-addr         gforth       "assert-level"
   All assertions above this level are turned off.

   If an assertion fails, a message compatible with Emacs' compilation
mode is produced and the execution is aborted (currently with 'ABORT"'.
If there is interest, we will introduce a special throw code.  But if
you intend to 'catch' a specific condition, using 'throw' is probably
more appropriate than an assertion).

   Assertions (and '~~') will usually print the wrong file name if a
marker is executed in the same file after their occurance.  They will
print '*somewhere*' as file name if a marker is executed in the same
file before their occurance.

   Definitions in Standard Forth for these assertion words are provided
in 'compat/assert.fs'.

5.24.10 Singlestep Debugger
---------------------------

The singlestep debugger works only with the engine 'gforth-itc'.

   When you create a new word there's often the need to check whether it
behaves correctly or not.  You can do this by typing 'dbg badword'.  A
debug session might look like this:

     : badword 0 DO i . LOOP ;  ok
     2 dbg badword
     : badword
     Scanning code...

     Nesting debugger ready!

     400D4738  8049BC4 0              -> [ 2 ] 00002 00000
     400D4740  8049F68 DO             -> [ 0 ]
     400D4744  804A0C8 i              -> [ 1 ] 00000
     400D4748 400C5E60 .              -> 0 [ 0 ]
     400D474C  8049D0C LOOP           -> [ 0 ]
     400D4744  804A0C8 i              -> [ 1 ] 00001
     400D4748 400C5E60 .              -> 1 [ 0 ]
     400D474C  8049D0C LOOP           -> [ 0 ]
     400D4758  804B384 ;              ->  ok

   Each line displayed is one step.  You always have to hit return to
execute the next word that is displayed.  If you don't want to execute
the next word in a whole, you have to type 'n' for 'nest'.  Here is an
overview what keys are available:

<RET>
     Next; Execute the next word.

n
     Nest; Single step through next word.

u
     Unnest; Stop debugging and execute rest of word.  If we got to this
     word with nest, continue debugging with the calling word.

d
     Done; Stop debugging and execute rest.

s
     Stop; Abort immediately.

   Debugging large application with this mechanism is very difficult,
because you have to nest very deeply into the program before the
interesting part begins.  This takes a lot of time.

   To do it more directly put a 'BREAK:' command into your source code.
When program execution reaches 'BREAK:' the single step debugger is
invoked and you have all the features described above.

   If you have more than one part to debug it is useful to know where
the program has stopped at the moment.  You can do this by the 'BREAK"
string"' command.  This behaves like 'BREAK:' except that string is
typed out when the "breakpoint" is reached.

'dbg'       "name" --         gforth       "dbg"

'break:'       --         gforth       "break:"

'break"'       'ccc"' --         gforth       "break""

5.24.11 Code Coverage and Execution Frequency
---------------------------------------------

If you run extensive tests on your code, you often want to figure out if
the tests exercise all parts of the code.  This is called (test)
coverage.  The file 'coverage.fs' contains tools for measuring the
coverage as well as execution frequency.

   Code coverage inserts counting code in every basic block
(straight-line code sequence) loaded after 'coverage.fs'.  Each time
that code is run, it increments the counter for that basic block.  Later
you can show the source file with the counts inserted in these basic
blocks.

'.coverage'       --         gforth-exp       ".coverage"
   Show code with execution frequencies.

'annotate-cov'       --         gforth-exp       "annotate-cov"
   For every file with coverage information, produce a '.cov' file that
has the execution frequencies inserted.  We recommend to use 'bw-cover'
first (with the default 'color-cover' you get escape sequences in the
files).

'cov%'       --         gforth-exp       "cov%"
   Print the percentage of basic blocks loaded after 'coverage.fs' that
are executed at least once.

'.cover-raw'       --         gforth-exp       ".cover-raw"
   Print raw execution counts.

   By default, the counts are shown in colour (using ANSI escape
sequences), but you can use 'bw-cover' to show them in parenthesized
form without escape sequences.

'bw-cover'       --         unknown       "bw-cover"
   Print execution counts in parentheses (source-code compatible).

'color-cover'       --         unknown       "color-cover"
   Print execution counts in colours (default).

   You can save and reload the coverage counters in binary format, to
aggregate coverage counters across several test runs.

'save-cov'       --         gforth-exp       "save-cov"
   Save coverage counters.

'load-cov'       --         gforth-exp       "load-cov"
   Load coverage counters.

'cov+'       --         gforth-exp       "cov+"
   Add a coverage tag here.

5.25 Multitasker
================

Gforth offers two multitaskers: a traditional, cooperative round-robin
multitasker, and a pthread-based multitasker which allows to run several
threads concurrently on multi-core machines.  The pthread-based is now
marked as experimental feature, as standardization of Forth multitaskers
will likely change the names of words without changing their semantics.

5.25.1 Ptheads
--------------

Tasks can be created with 'newtask' or 'newtask4' with a given amount of
stack space (either all the same or each stack's size specified); these
tasks neet to be 'activate'd or send an XT through 'initiate'.  Tasks
can 'stop' themselves when they are done or wait for new instructions.

'newtask'       stacksize -- task         gforth-experimental       "newtask"
   creates a task, uses stacksize for stack, rstack, fpstack, locals

'task'       stacksize "name" --         gforth-experimental       "task"
   create a named task with stacksize STACKSIZE

'execute-task'       xt -- task         gforth-experimental       "execute-task"
   create a new task TASK and initiate it with XT

'stacksize'       -- n         gforth-experimental       "stacksize"
   stacksize for data stack

'newtask4'       dsize rsize fsize lsize -- task         gforth-experimental       "newtask4"
   creates a task, each stack individually sized

'stacksize4'       -- dsize fsize rsize lsize         gforth-experimental       "stacksize4"
   This gives you the system stack sizes

'activate'       task --         gforth-experimental       "activate"
   activates a task.  The remaining part of the word calling 'activate'
will be executed in the context of the task.

'pass'       x1 .. xn n task --         gforth-experimental       "pass"
   activates task, and passes n parameters from the data stack

'initiate'       xt task --         gforth-experimental       "initiate"
   pass an XT to a task (VFX compatible)

'pause'       --         gforth-experimental       "pause"
   voluntarily switch to the next waiting task ('pause' is the
traditional cooperative task switcher; in the pthread multitasker, you
don't need 'pause' for cooperation, but you still can use it e.g.  when
you have to resort to polling for some reason).  This also checks for
events in the queue.

'restart'       task --         gforth-experimental       "restart"
   Wake a task

'halt'       task --         gforth-experimental       "halt"
   Stop a task

'stop'       --         gforth-experimental       "stop"
   stops the current task, and waits for events (which may restart it)

'stop-ns'       timeout --         gforth-experimental       "stop-ns"
   Stop with timeout (in nanoseconds), better replacement for ms

   A cooperative multitasker can ensure that there is no other task
interacting between two invocations of 'pause'.  Pthreads however are
really concurrent tasks (at least on a multi-core CPU), and therefore,
several techniques to avoid conflicts when accessing the same resources.

5.25.1.1 Special User Variables
...............................

Aside from the user variables that are already defined in the kernel,
tasks may want to have user values and user defers, optain the offset of
a user variable, or the address of those related to another task to
initialize that task's user area.

'UValue'       "name" --         unknown       "UValue"

'UDefer'       "name" --         gforth-experimental       "UDefer"
   Define a per-thread deferred word

'user''       'user' -- n         gforth-experimental       "user"'
   USER' computes the task offset of a user variable

''s'       user task -- user'         gforth-experimental       "'s"
   get the tasks's address of our user variable

5.25.1.2 Semaphores
...................

Semaphores can only be aquired by one thread, all other threads have to
wait until the semapohre is released.

'semaphore'       "name" --         gforth-experimental       "semaphore"
   create a named semaphore "NAME" \\ "name"-execution: ( -- SEMAPHORE )

'lock'       semaphore --         gforth-experimental       "lock"
   lock the semaphore

'unlock'       semaphore --         gforth-experimental       "unlock"
   unlock the semaphore

   The other approach to prevent concurrent access is the critical
section.  Here, we implement a critical section with a semaphore, so you
have to specify the semaphore which is used for the critical section.
Only those critical sections which use the same semaphore are mutually
exclusive.

'critical-section'       xt semaphore --         gforth-experimental       "critical-section"
   implement a critical section that will unlock the semaphore even in
case there's an exception within.

5.25.1.3 Atomic operations
..........................

Atomic operations can be used to synchronize tasks without using slow OS
primitives.

'!@'       u1 a-addr -- u2        gforth-experimental       "store-fetch"
   load U2 from A_ADDR, and store U1 there, as atomic operation

'+!@'       u1 a-addr -- u2        gforth-experimental       "add-store-fetch"
   load U2 from A_ADDR, and increment this location by U1, as atomic
operation

'?!@'       unew uold a-addr -- uprev        gforth-experimental       "question-store-fetch"
   load UPREV from A_ADDR, compare it to UOLD, and if equal, store UNEW
there, as atomic operation

'barrier'       --        gforth-experimental       "barrier"
   Insert a full memory barrier

5.25.1.4 Message Queues
.......................

Gforth implements executable message queues for event driven programs:
you send instructions to other tasks, enclosed in '<event' and 'event>';
the entire event sequence is executed atomically.  You can pass
integers, floats, and strings (only the addresses, so treat the string
as read-only after you have send it to another task).  The messages you
send are defined with 'event:' NAME, which, when invoked, will add the
code for its execution to the message queue, and when recieved, will
execute the code following.  The message queue is queried when you
'stop' a task, or when you check for events with '?events'.  You can
define a maximum of 256 different events.

'<event'       --         gforth-experimental       "<event"
   starts a sequence of events.

'event>'       task --         gforth-experimental       "event>"
   ends a sequence and sends it to the mentioned task

'event:'       "name" --         gforth-experimental       "event:"
   defines an event and the reaction to it as Forth code.  If 'name' is
invoked, the event gets assembled to the event buffer.  If the event
'name' is received, the Forth definition that follows the event
declaration is executed.

'?events'       --         gforth-experimental       "?events"
   checks for events and executes them

'event-loop'       --         gforth-experimental       "event-loop"
   Tasks that are controlled by sending events to them should go into an
event-loop

'elit,'       x --         gforth-experimental       "elit,"
   sends a literal

'e$,'       addr u --         gforth-experimental       "e$,"
   sends a string (actually only the address and the count, because it's
shared memory

'eflit,'       x --         gforth-experimental       "eflit,"
   sends a float

   The naming conventions for events is ':>'NAME.

5.25.1.5 Conditions
...................

The pthreads library also provides conditional variables, which allow to
wait for a condition.  Using the message queue is generally preferred.

'cond'       "name" --         gforth-experimental       "cond"
   create a named condition

'pthread_cond_signal'       cond -- r         gforth-experimental       "pthread_cond_signal"

'pthread_cond_broadcast'       cond -- r         gforth-experimental       "pthread_cond_broadcast"

'pthread_cond_wait'       cond mutex -- r         gforth-experimental       "pthread_cond_wait"

'pthread_cond_timedwait'       cond mutex abstime -- r         gforth-experimental       "pthread_cond_timedwait"

5.26 C Interface
================

The C interface is now mostly complete, callbacks have been added, but
for structs, we use Forth2012 structs, which don't have independent
scopes.  The offsets of those structs are extracted from header files
with a SWIG plugin, which is still not completed.

5.26.1 Calling C functions
--------------------------

Once a C function is declared (see *note Declaring C Functions::), you
can call it as follows: You push the arguments on the stack(s), and then
call the word for the C function.  The arguments have to be pushed in
the same order as the arguments appear in the C documentation (i.e., the
first argument is deepest on the stack).  Integer and pointer arguments
have to be pushed on the data stack, floating-point arguments on the FP
stack; these arguments are consumed by the called C function.

   On returning from the C function, the return value, if any, resides
on the appropriate stack: an integer return value is pushed on the data
stack, an FP return value on the FP stack, and a void return value
results in not pushing anything.  Note that most C functions have a
return value, even if that is often not used in C; in Forth, you have to
'drop' this return value explicitly if you do not use it.

   The C interface automatically converts between the C type and the
Forth type as necessary, on a best-effort basis (in some cases, there
may be some loss).

   As an example, consider the POSIX function 'lseek()':

     off_t lseek(int fd, off_t offset, int whence);

   This function takes three integer arguments, and returns an integer
argument, so a Forth call for setting the current file offset to the
start of the file could look like this:

     fd @ 0 SEEK_SET lseek -1 = if
       ... \ error handling
     then

   You might be worried that an 'off_t' does not fit into a cell, so you
could not pass larger offsets to lseek, and might get only a part of the
return values.  In that case, in your declaration of the function (*note
Declaring C Functions::) you should declare it to use double-cells for
the off_t argument and return value, and maybe give the resulting Forth
word a different name, like 'dlseek'; the result could be called like
this:

     fd @ 0. SEEK_SET dlseek -1. d= if
       ... \ error handling
     then

   Passing and returning structs or unions is currently not supported by
our interface(1).

   Calling functions with a variable number of arguments (_variadic_
functions, e.g., 'printf()') is only supported by having you declare one
function-calling word for each argument pattern, and calling the
appropriate word for the desired pattern.

   ---------- Footnotes ----------

   (1) If you know the calling convention of your C compiler, you
usually can call such functions in some way, but that way is usually not
portable between platforms, and sometimes not even between C compilers.

5.26.2 Declaring C Functions
----------------------------

Before you can call 'lseek' or 'dlseek', you have to declare it.  The
declaration consists of two parts:

The C part
     is the C declaration of the function, or more typically and
     portably, a C-style '#include' of a file that contains the
     declaration of the C function.

The Forth part
     declares the Forth types of the parameters and the Forth word name
     corresponding to the C function.

   For the words 'lseek' and 'dlseek' mentioned earlier, the
declarations are:

     \c #define _FILE_OFFSET_BITS 64
     \c #include <sys/types.h>
     \c #include <unistd.h>
     c-function lseek lseek n n n -- n
     c-function dlseek lseek n d n -- d

   The C part of the declarations is prefixed by '\c', and the rest of
the line is ordinary C code.  You can use as many lines of C
declarations as you like, and they are visible for all further function
declarations.

   The Forth part declares each interface word with 'c-function',
followed by the Forth name of the word, the C name of the called
function, and the stack effect of the word.  The stack effect contains
an arbitrary number of types of parameters, then '--', and then exactly
one type for the return value.  The possible types are:

'n'
     single-cell integer

'a'
     address (single-cell)

'd'
     double-cell integer

'r'
     floating-point value

'func'
     C function pointer

'void'
     no value (used as return type for void functions)

   To deal with variadic C functions, you can declare one Forth word for
every pattern you want to use, e.g.:

     \c #include <stdio.h>
     c-function printf-nr printf a n r -- n
     c-function printf-rn printf a r n -- n

   Note that with C functions declared as variadic (or if you don't
provide a prototype), the C interface has no C type to convert to, so no
automatic conversion happens, which may lead to portability problems in
some cases.  You can add the C type cast in curly braces after the Forth
type.  This also allows to pass e.g.  structs to C functions, which in
Forth cannot live on the stack.

     c-function printfll printf a n{(long long)} -- n
     c-function pass-struct pass_struct a{*(struct foo *)} -- n

   This typecasting is not available to return values, as C does not
allow typecasts for lvalues.

'\c'       "rest-of-line" --         gforth       "backslash-c"
   One line of C declarations for the C interface

'c-function'       "forth-name" "c-name" "{type}" "---" "type" --         gforth       "c-function"
   Define a Forth word forth-name.  Forth-name has the specified stack
effect and calls the C function 'c-name'.

'c-value'       "forth-name" "c-name" "---" "type" --         gforth       "c-value"
   Define a Forth word forth-name.  Forth-name has the specified stack
effect and gives the C value of 'c-name'.

'c-variable'       "forth-name" "c-name" --         gforth       "c-variable"
   Define a Forth word forth-name.  Forth-name returns the address of
'c-name'.

   In order to work, this C interface invokes GCC at run-time and uses
dynamic linking.  If these features are not available, there are other,
less convenient and less portable C interfaces in 'lib.fs' and
'oldlib.fs'.  These interfaces are mostly undocumented and mostly
incompatible with each other and with the documented C interface; you
can find some examples for the 'lib.fs' interface in 'lib.fs'.

5.26.3 Calling C function pointers from Forth
---------------------------------------------

If you come across a C function pointer (e.g., in some C-constructed
structure) and want to call it from your Forth program, you could use
the structures as described above by defining a macro.  Or you use
'c-funptr'.

'c-funptr'       "forth-name" <{>"c-typecast"<}> "{type}" "---" "type" --         gforth       "c-funptr"
   Define a Forth word forth-name.  Forth-name has the specified stack
effect plus the called pointer on top of stack, i.e.  '( {type} ptr --
type )' and calls the C function pointer 'ptr' using the typecast or
struct access 'c-typecast'.

   Let us assume that there is a C function pointer type 'func1' defined
in some header file 'func1.h', and you know that these functions take
one integer argument and return an integer result; and you want to call
functions through such pointers.  Just define

     \c #include <func1.h>
     c-funptr call-func1 {((func1)ptr)} n -- n

   and then you can call a function pointed to by, say 'func1a' as
follows:

     -5 func1a call-func1 .

   The Forth word 'call-func1' is similar to 'execute', except that it
takes a C 'func1' pointer instead of a Forth execution token, and it is
specific to 'func1' pointers.  For each type of function pointer you
want to call from Forth, you have to define a separate calling word.

5.26.4 Defining library interfaces
----------------------------------

You can give a name to a bunch of C function declarations (a library
interface), as follows:

     c-library lseek-lib
     \c #define _FILE_OFFSET_BITS 64
     ...
     end-c-library

   The effect of giving such a name to the interface is that the names
of the generated files will contain that name, and when you use the
interface a second time, it will use the existing files instead of
generating and compiling them again, saving you time.  The generated
file contains a 128 bit hash (not cryptographically safe, but good
enough for that purpose) of the source code, so changing the
declarations will cause a new compilation.  Normally these files are
cached in '$HOME/.gforth/'ARCHITECTURE'/libcc-named', so if you
experience problems or have other reasons to force a recompilation, you
can delete the files there.

   Note that you should use 'c-library' before everything else having
anything to do with that library, as it resets some setup stuff.  The
idea is that the typical use is to put each
'c-library'...'end-c-library' unit in its own file, and to be able to
include these files in any order.  All other words dealing with the C
interface are hidden in the vocabulary 'c-lib', which is put on top o
the search stack by 'c-library' and removed by 'end-c-library'.

   Note that the library name is not allocated in the dictionary and
therefore does not shadow dictionary names.  It is used in the file
system, so you have to use naming conventions appropriate for file
systems.  The name is also used as part of the C symbols, but characters
outside the legal C symbol names are replaced with underscores.  Also,
you shall not call a function you declare after 'c-library' before you
perform 'end-c-library'.

   A major benefit of these named library interfaces is that, once they
are generated, the tools used to generated them (in particular, the C
compiler and libtool) are no longer needed, so the interface can be used
even on machines that do not have the tools installed.  The build system
of Gforth can even cross-compile these libraries, so that the libraries
are available for plattforms on which build tools aren't installed.

'c-library-name'       c-addr u --         gforth       "c-library-name"
   Start a C library interface with name c-addr u.

'c-library'       "name" --         gforth       "c-library"
   Parsing version of 'c-library-name'

'end-c-library'       --         gforth       "end-c-library"
   Finish and (if necessary) build the latest C library interface.

5.26.5 Declaring OS-level libraries
-----------------------------------

For calling some C functions, you need to link with a specific OS-level
library that contains that function.  E.g., the 'sin' function requires
linking a special library by using the command line switch '-lm'.  In
our C iterface you do the equivalent thing by calling 'add-lib' as
follows:

     clear-libs
     s" m" add-lib
     \c #include <math.h>
     c-function sin sin r -- r

   First, you clear any libraries that may have been declared earlier
(you don't need them for 'sin'); then you add the 'm' library (actually
'libm.so' or somesuch) to the currently declared libraries; you can add
as many as you need.  Finally you declare the function as shown above.
Typically you will use the same set of library declarations for many
function declarations; you need to write only one set for that, right at
the beginning.

   Note that you must not call 'clear-libs' inside
'c-library...end-c-library'; however, 'c-library' performs the function
of 'clear-libs', so 'clear-libs' is not necessary, and you usually want
to put 'add-lib' calls inside 'c-library...end-c-library'.

'clear-libs'       --         gforth       "clear-libs"
   Clear the list of libs

'add-lib'       c-addr u --         gforth       "add-lib"
   Add library libstring to the list of libraries, where string is
represented by c-addr u.

'add-libpath'       c-addr u --         gforth       "add-libpath"
   Add path string to the list of library search pathes, where string is
represented by c-addr u.

'add-incdir'       c-addr u --         gforth       "add-incdir"
   Add path c-addr u to the list of include search pathes

'add-cflags'       c-addr u --         gforth       "add-cflags"
   add any kind of cflags to compilation

'add-ldflags'       c-addr u --         gforth       "add-ldflags"
   add flag to linker

5.26.6 Callbacks
----------------

In some cases you have to pass a function pointer to a C function, i.e.,
the library wants to call back to your application (and the pointed-to
function is called a callback function).  You can pass the address of an
existing C function (that you get with 'lib-sym', *note Low-Level C
Interface Words::), but if there is no appropriate C function, you
probably want to define the function as a Forth word.  Then you need to
generate a callback as described below:

   You can generate C callbacks from Forth code with 'c-callback'.

'c-callback'       "forth-name" "{type}" "---" "type" --         gforth       "c-callback"
   Define a callback instantiator with the given signature.  The
callback instantiator forth-name '( xt -- addr )' takes an XT, and
returns the ADDRess of the C function handling that callback.

   This precompiles a number of callback functions (up to the value
'callback#').  The prototype of the C function is deduced from its Forth
signature.  If this is not sufficient, you can add types in curly braces
after the Forth type.

     c-callback vector4double: f f f f -- void
     c-callback vector4single: f{float} f{float} f{float} f{float} -- void

5.26.7 How the C interface works
--------------------------------

The documented C interface works by generating a C code out of the
declarations.

   In particular, for every Forth word declared with 'c-function', it
generates a wrapper function in C that takes the Forth data from the
Forth stacks, and calls the target C function with these data as
arguments.  The C compiler then performs an implicit conversion between
the Forth type from the stack, and the C type for the parameter, which
is given by the C function prototype.  After the C function returns, the
return value is likewise implicitly converted to a Forth type and
written back on the stack.

   The '\c' lines are literally included in the C code (but without the
'\c'), and provide the necessary declarations so that the C compiler
knows the C types and has enough information to perform the conversion.

   These wrapper functions are eventually compiled and dynamically
linked into Gforth, and then they can be called.

   The libraries added with 'add-lib' are used in the compile command
line to specify dependent libraries with '-lLIB', causing these
libraries to be dynamically linked when the wrapper function is linked.

5.26.8 Low-Level C Interface Words
----------------------------------

'open-lib'       c-addr1 u1 -- u2        gforth       "open-lib"

'lib-sym'       c-addr1 u1 u2 -- u3        gforth       "lib-sym"

'lib-error'       -- c-addr u        gforth       "lib-error"
   Error message for last failed 'open-lib' or 'lib-sym'.

'call-c'       ... w -- ...        gforth       "call-c"
   Call the C function pointed to by w.  The C function has to access
the stack itself.  The stack pointers are exported into a ptrpair
structure passed to the C function, and returned in that form.

5.26.9 Migrating from Gforth 0.7
--------------------------------

In this version, you can use '\c', 'c-function' and 'add-lib' only
inside 'c-library'...'end-c-library'.  'add-lib' now always starts from
a clean slate inside a 'c-library', so you don't need to use
'clear-libs' in most cases.

   If you have a program that uses these words outside
'c-library'...'end-c-library', just wrap them in
'c-library'...'end-c-library'.  You may have to add some instances of
'add-lib', however.

5.27 Assembler and Code Words
=============================

5.27.1 Definitions in assembly language
---------------------------------------

Gforth provides ways to implement words in assembly language (using
'abi-code'...'end-code'), and also ways to define defining words with
arbitrary run-time behaviour (like 'does>'), where (unlike 'does>') the
behaviour is not defined in Forth, but in assembly language (with
';code').

   However, the machine-independent nature of Gforth poses a few
problems: First of all, Gforth runs on several architectures, so it can
provide no standard assembler.  It does provide assemblers for several
of the architectures it runs on, though.  Moreover, you can use a
system-independent assembler in Gforth, or compile machine code directly
with ',' and 'c,'.

   Another problem is that the virtual machine registers of Gforth (the
stack pointers and the virtual machine instruction pointer) depend on
the installation and engine.  Also, which registers are free to use also
depend on the installation and engine.  So any code written to run in
the context of the Gforth virtual machine is essentially limited to the
installation and engine it was developed for (it may run elsewhere, but
you cannot rely on that).

   Fortunately, you can define 'abi-code' words in Gforth that are
portable to any Gforth running on a platform with the same calling
convention (ABI); typically this means portability to the same
architecture/OS combination, sometimes crossing OS boundaries).

'assembler'       --         tools-ext       "assembler"
   A vocubulary: Replaces the wordlist at the top of the search order
with the assembler wordlist.

'init-asm'       --         gforth       "init-asm"
   Pushes the assembler wordlist on the search order.

'abi-code'       "name" -- colon-sys         gforth       "abi-code"
   Start a native code definition that is called using the platform's
ABI conventions corresponding to the C-prototype:
     Cell *function(Cell *sp, Float **fpp);
   The FP stack pointer is passed in by providing a reference to a
memory location containing the FP stack pointer and is passed out by
storing the changed FP stack pointer there (if necessary).

'end-code'       colon-sys --         gforth       "end-code"
   End a code definition.  Note that you have to assemble the return
from the ABI call (for 'abi-code') or the dispatch to the next VM
instruction (for 'code' and ';code') yourself.

'code'       "name" -- colon-sys         tools-ext       "code"
   Start a native code definition that runs in the context of the Gforth
virtual machine (engine).  Such a definition is not portable between
Gforth installations, so we recommend using 'abi-code' instead of
'code'.  You have to end a 'code' definition with a dispatch to the next
virtual machine instruction.

';code'       compilation. colon-sys1 -- colon-sys2         tools-ext       "semicolon-code"
   The code after ';code' becomes the behaviour of the last defined word
(which must be a 'create'd word).  The same caveats apply as for 'code',
so we recommend using ';abi-code' instead.

'flush-icache'       c-addr u --        gforth       "flush-icache"
   Make sure that the instruction cache of the processor (if there is
one) does not contain stale data at c-addr and u bytes afterwards.
'END-CODE' performs a 'flush-icache' automatically.  Caveat:
'flush-icache' might not work on your installation; this is usually the
case if direct threading is not supported on your machine (take a look
at your 'machine.h') and your machine has a separate instruction cache.
In such cases, 'flush-icache' does nothing instead of flushing the
instruction cache.

   If 'flush-icache' does not work correctly, 'abi-code' words etc.
will not work (reliably), either.

   The typical usage of these words can be shown most easily by analogy
to the equivalent high-level defining words:

     : foo                              abi-code foo
        <high-level Forth words>              <assembler>
     ;                                  end-code

     : bar                              : bar
        <high-level Forth words>           <high-level Forth words>
        CREATE                             CREATE
           <high-level Forth words>           <high-level Forth words>
        DOES>                              ;code
           <high-level Forth words>           <assembler>
     ;                                  end-code

   For using 'abi-code', take a look at the ABI documentation of your
platform to see how the parameters are passed (so you know where you get
the stack pointers) and how the return value is passed (so you know
where the data stack pointer is returned).  The ABI documentation also
tells you which registers are saved by the caller (caller-saved), so you
are free to destroy them in your code, and which registers have to be
preserved by the called word (callee-saved), so you have to save them
before using them, and restore them afterwards.  For some architectures
and OSs we give short summaries of the parts of the calling convention
in the appropriate sections.  More reverse-engineering oriented people
can also find out about the passing and returning of the stack pointers
through 'see abi-call'.

   Most ABIs pass the parameters through registers, but some (in
particular the most common 386 (aka IA-32) calling conventions) pass
them on the architectural stack.  The common ABIs all pass the return
value in a register.

   Other things you need to know for using 'abi-code' is that both the
data and the FP stack grow downwards (towards lower addresses) in
Gforth, with '1 cells' size per cell, and '1 floats' size per FP value.

   Here's an example of using 'abi-code' on the 386 architecture:

     abi-code my+ ( n1 n2 -- n )
     4 sp d) ax mov \ sp into return reg
     ax )    cx mov \ tos
     4 #     ax add \ update sp (pop)
     cx    ax ) add \ sec = sec+tos
     ret            \ return from my+
     end-code

   An AMD64 variant of this example can be found in *note AMD64
Assembler::.

   Here's a 386 example that deals with FP values:

     abi-code my-f+ ( r1 r2 -- r )
     8 sp d) cx mov  \ load address of fp
     cx )    dx mov  \ load fp
     .fl dx )   fld  \ r2
     8 #     dx add  \ update fp
     .fl dx )   fadd \ r1+r2
     .fl dx )   fstp \ store r
     dx    cx ) mov  \ store new fp
     4 sp d) ax mov  \ sp into return reg
     ret             \ return from my-f+
     end-code

5.27.2 Common Assembler
-----------------------

The assemblers in Gforth generally use a postfix syntax, i.e., the
instruction name follows the operands.

   The operands are passed in the usual order (the same that is used in
the manual of the architecture).  Since they all are Forth words, they
have to be separated by spaces; you can also use Forth words to compute
the operands.

   The instruction names usually end with a ','.  This makes it easier
to visually separate instructions if you put several of them on one
line; it also avoids shadowing other Forth words (e.g., 'and').

   Registers are usually specified by number; e.g., (decimal) '11'
specifies registers R11 and F11 on the Alpha architecture (which one,
depends on the instruction).  The usual names are also available, e.g.,
's2' for R11 on Alpha.

   Control flow is specified similar to normal Forth code (*note
Arbitrary control structures::), with 'if,', 'ahead,', 'then,',
'begin,', 'until,', 'again,', 'cs-roll', 'cs-pick', 'else,', 'while,',
and 'repeat,'.  The conditions are specified in a way specific to each
assembler.

   The rest of this section is of interest mainly for those who want to
define 'code' words (instead of the more portable 'abi-code' words).

   Note that the register assignments of the Gforth engine can change
between Gforth versions, or even between different compilations of the
same Gforth version (e.g., if you use a different GCC version).  If you
are using 'CODE' instead of 'ABI-CODE', and you want to refer to
Gforth's registers (e.g., the stack pointer or TOS), I recommend
defining your own words for refering to these registers, and using them
later on; then you can adapt to a changed register assignment.

   The most common use of these registers is to end a 'code' definition
with a dispatch to the next word (the 'next' routine).  A portable way
to do this is to jump to '' noop >code-address' (of course, this is less
efficient than integrating the 'next' code and scheduling it well).
When using 'ABI-CODE', you can just assemble a normal subroutine return
(but make sure you return the data stack pointer).

   Another difference between Gforth versions is that the top of stack
is kept in memory in 'gforth' and, on most platforms, in a register in
'gforth-fast'.  For 'ABI-CODE' definitions, any stack caching registers
are guaranteed to be flushed to the stack, allowing you to reliably
access the top of stack in memory.

5.27.3 Common Disassembler
--------------------------

You can disassemble a 'code' word with 'see' (*note Debugging::).  You
can disassemble a section of memory with

'discode'       addr u --         gforth       "discode"
   hook for the disassembler: disassemble u bytes of code at addr

   There are two kinds of disassembler for Gforth: The Forth
disassembler (available on some CPUs) and the gdb disassembler
(available on platforms with 'gdb' and 'mktemp').  If both are
available, the Forth disassembler is used by default.  If you prefer the
gdb disassembler, say

     ' disasm-gdb is discode

   If neither is available, 'discode' performs 'dump'.

   The Forth disassembler generally produces output that can be fed into
the assembler (i.e., same syntax, etc.).  It also includes additional
information in comments.  In particular, the address of the instruction
is given in a comment before the instruction.

   The gdb disassembler produces output in the same format as the gdb
'disassemble' command (*note Source and machine code: (gdb)Machine
Code.), in the default flavour (AT&T syntax for the 386 and AMD64
architectures).

   'See' may display more or less than the actual code of the word,
because the recognition of the end of the code is unreliable.  You can
use 'discode' if it did not display enough.  It may display more, if the
code word is not immediately followed by a named word.  If you have
something else there, you can follow the word with 'align latest ,' to
ensure that the end is recognized.

5.27.4 386 Assembler
--------------------

The 386 assembler included in Gforth was written by Bernd Paysan, it's
available under GPL, and originally part of bigFORTH.

   The 386 disassembler included in Gforth was written by Andrew McKewan
and is in the public domain.

   The disassembler displays code in an Intel-like prefix syntax.

   The assembler uses a postfix syntax with AT&T-style parameter order
(i.e., destination last).

   The assembler includes all instruction of the Athlon, i.e.  486 core
instructions, Pentium and PPro extensions, floating point, MMX, 3Dnow!,
but not ISSE. It's an integrated 16- and 32-bit assembler.  Default is
32 bit, you can switch to 16 bit with .86 and back to 32 bit with .386.

   There are several prefixes to switch between different operation
sizes, '.b' for byte accesses, '.w' for word accesses, '.d' for
double-word accesses.  Addressing modes can be switched with '.wa' for
16 bit addresses, and '.da' for 32 bit addresses.  You don't need a
prefix for byte register names ('AL' et al).

   For floating point operations, the prefixes are '.fs' (IEEE single),
'.fl' (IEEE double), '.fx' (extended), '.fw' (word), '.fd'
(double-word), and '.fq' (quad-word).  The default is '.fx', so you need
to specify '.fl' explicitly when dealing with Gforth FP values.

   The MMX opcodes don't have size prefixes, they are spelled out like
in the Intel assembler.  Instead of move from and to memory, there are
PLDQ/PLDD and PSTQ/PSTD.

   The registers lack the 'e' prefix; even in 32 bit mode, eax is called
ax.  Immediate values are indicated by postfixing them with '#', e.g.,
'3 #'.  Here are some examples of addressing modes in various syntaxes:

     Gforth          Intel (NASM)   AT&T (gas)      Name
     .w ax           ax             %ax             register (16 bit)
     ax              eax            %eax            register (32 bit)
     3 #             offset 3       $3              immediate
     1000 #)         byte ptr 1000  1000            displacement
     bx )            [ebx]          (%ebx)          base
     100 di d)       100[edi]       100(%edi)       base+displacement
     20 ax *4 i#)    20[eax*4]      20(,%eax,4)     (index*scale)+displacement
     di ax *4 i)     [edi][eax*4]   (%edi,%eax,4)   base+(index*scale)
     4 bx cx di)     4[ebx][ecx]    4(%ebx,%ecx)    base+index+displacement
     12 sp ax *2 di) 12[esp][eax*2] 12(%esp,%eax,2) base+(index*scale)+displacement

   You can use 'L)' and 'LI)' instead of 'D)' and 'DI)' to enforce
32-bit displacement fields (useful for later patching).

   Some example of instructions are:

     ax bx mov             \ move ebx,eax
     3 # ax mov            \ mov eax,3
     100 di d) ax mov      \ mov eax,100[edi]
     4 bx cx di) ax mov    \ mov eax,4[ebx][ecx]
     .w ax bx mov          \ mov bx,ax

   The following forms are supported for binary instructions:

     <reg> <reg> <inst>
     <n> # <reg> <inst>
     <mem> <reg> <inst>
     <reg> <mem> <inst>
     <n> # <mem> <inst>

   The shift/rotate syntax is:

     <reg/mem> 1 # shl \ shortens to shift without immediate
     <reg/mem> 4 # shl
     <reg/mem> cl shl

   Precede string instructions ('movs' etc.)  with '.b' to get the byte
version.

   The control structure words 'IF' 'UNTIL' etc.  must be preceded by
one of these conditions: 'vs vc u< u>= 0= 0<> u<= u> 0< 0>= ps pc < >=
<= >'.  (Note that most of these words shadow some Forth words when
'assembler' is in front of 'forth' in the search path, e.g., in 'code'
words).  Currently the control structure words use one stack item, so
you have to use 'roll' instead of 'cs-roll' to shuffle them (you can
also use 'swap' etc.).

   Based on the Intel ABI (used in Linux), 'abi-code' words can find the
data stack pointer at '4 sp d)', and the address of the FP stack pointer
at '8 sp d)'; the data stack pointer is returned in 'ax'; 'Ax', 'cx',
and 'dx' are caller-saved, so you do not need to preserve their values
inside the word.  You can return from the word with 'ret', the
parameters are cleaned up by the caller.

   For examples of 386 'abi-code' words, see *note Assembler
Definitions::.

5.27.5 AMD64 (x86_64) Assembler
-------------------------------

The AMD64 assembler is a slightly modified version of the 386 assembler,
and as such shares most of the syntax.  Two new prefixes, '.q' and
'.qa', are provided to select 64-bit operand and address sizes
respectively.  64-bit sizes are the default, so normally you only have
to use the other prefixes.  Also there are additional register operands
'R8'-'R15'.

   The registers lack the 'e' or 'r' prefix; even in 64 bit mode, 'rax'
is called 'ax'.  Additional register operands are available to refer to
the lowest-significant byte of all registers: 'R8L'-'R15L', 'SPL',
'BPL', 'SIL', 'DIL'.

   The Linux-AMD64 calling convention is to pass the first 6 integer
parameters in rdi, rsi, rdx, rcx, r8 and r9 and to return the result in
rax and rdx; to pass the first 8 FP parameters in xmm0--xmm7 and to
return FP results in xmm0--xmm1.  So 'abi-code' words get the data stack
pointer in 'di' and the address of the FP stack pointer in 'si', and
return the data stack pointer in 'ax'.  The other caller-saved registers
are: r10, r11, xmm8-xmm15.  This calling convention reportedly is also
used in other non-Microsoft OSs.

   Windows x64 passes the first four integer parameters in rcx, rdx, r8
and r9 and return the integer result in rax.  The other caller-saved
registers are r10 and r11.

   Here is an example of an AMD64 'abi-code' word:

     abi-code my+  ( n1 n2 -- n3 )
     \ SP passed in di, returned in ax,  address of FP passed in si
     8 di d) ax lea        \ compute new sp in result reg
     di )    dx mov        \ get old tos
     dx    ax ) add        \ add to new tos
     ret
     end-code

   Here's a AMD64 example that deals with FP values:

     abi-code my-f+  ( r1 r2 -- r )
     \ SP passed in di, returned in ax,  address of FP passed in si
     si )       dx mov         \ load fp
     8 dx d)  xmm0 movsd       \ r2
     dx )     xmm0 addsd       \ r1+r2
     xmm0  8 dx d) movsd       \ store r
     8 #      si ) add         \ update fp
     di         ax mov         \ sp into return reg
     ret
     end-code

5.27.6 Alpha Assembler
----------------------

The Alpha assembler and disassembler were originally written by Bernd
Thallner.

   The register names 'a0'--'a5' are not available to avoid shadowing hex
numbers.

   Immediate forms of arithmetic instructions are distinguished by a '#'
just before the ',', e.g., 'and#,' (note: 'lda,' does not count as
arithmetic instruction).

   You have to specify all operands to an instruction, even those that
other assemblers consider optional, e.g., the destination register for
'br,', or the destination register and hint for 'jmp,'.

   You can specify conditions for 'if,' by removing the first 'b' and
the trailing ',' from a branch with a corresponding name; e.g.,

     11 fgt if, \ if F11>0e
       ...
     endif,

   'fbgt,' gives 'fgt'.

5.27.7 MIPS assembler
---------------------

The MIPS assembler was originally written by Christian Pirker.

   Currently the assembler and disassembler covers most of the MIPS32
architecture and doesn't support FP instructions.

   The register names '$a0'--'$a3' are not available to avoid shadowing
hex numbers.  Use register numbers '$4'--'$7' instead.

   Nothing distinguishes registers from immediate values.  Use explicit
opcode names with the 'i' suffix for instructions with immediate
argument.  E.g.  'addiu,' in place of 'addu,'.

   Where the architecture manual specifies several formats for the
instruction (e.g., for 'jalr,'),use the one with more arguments (i.e.
two for 'jalr,').  When in doubt, see 'arch/mips/testasm.fs' for an
example of correct use.

   Branches and jumps in the MIPS architecture have a delay slot.  You
have to fill it manually (the simplest way is to use 'nop,'), the
assembler does not do it for you (unlike 'as').  Even 'if,', 'ahead,',
'until,', 'again,', 'while,', 'else,' and 'repeat,' need a delay slot.
Since 'begin,' and 'then,' just specify branch targets, they are not
affected.  For branches the argument specifying the target is a relative
address.  Add the address of the delay slot to get the absolute address.

   Note that you must not put branches nor jumps (nor control-flow
instructions) into the delay slot.  Also it is a bad idea to put
pseudo-ops such as 'li,' into a delay slot, as these may expand to
several instructions.  The MIPS I architecture also had load delay
slots, and newer MIPSes still have restrictions on using 'mfhi,' and
'mflo,'.  Be careful to satisfy these restrictions, the assembler does
not do it for you.

   Some example of instructions are:

     $ra  12 $sp  sw,         \ sw    ra,12(sp)
     $4    8 $s0  lw,         \ lw    a0,8(s0)
     $v0  $0  lui,            \ lui   v0,0x0
     $s0  $s4  $12  addiu,    \ addiu s0,s4,0x12
     $s0  $s4  $4  addu,      \ addu  s0,s4,$a0
     $ra  $t9  jalr,          \ jalr  t9

   You can specify the conditions for 'if,' etc.  by taking a
conditional branch and leaving away the 'b' at the start and the ',' at
the end.  E.g.,

     4 5 eq if,
       ... \ do something if $4 equals $5
     then,

   The calling conventions for 32-bit MIPS machines is to pass the first
4 arguments in registers '$4'..'$7', and to use '$v0'-'$v1' for return
values.  In addition to these registers, it is ok to clobber registers
'$t0'-'$t8' without saving and restoring them.

   If you use 'jalr,' to call into dynamic library routines, you must
first load the called function's address into '$t9', which is used by
position-indirect code to do relative memory accesses.

   Here is an example of a MIPS32 'abi-code' word:

     abi-code my+  ( n1 n2 -- n3 )
       \ SP passed in $4, returned in $v0
       $t0  4 $4  lw,         \ load n1, n2 from stack
       $t1  0 $4  lw,
       $t0  $t0  $t1  addu,   \ add n1+n2, result in $t0
       $t0  4 $4  sw,         \ store result (overwriting n1)
       $ra  jr,               \ return to caller
       $v0  $4  4  addiu,     \ (delay slot) return uptated SP in $v0
     end-code

5.27.8 PowerPC assembler
------------------------

The PowerPC assembler and disassembler were contributed by Michal
Revucky.

   This assembler does not follow the convention of ending mnemonic
names with a ",", so some mnemonic names shadow regular Forth words (in
particular: 'and or xor fabs'); so if you want to use the Forth words,
you have to make them visible first, e.g., with 'also forth'.

   Registers are referred to by their number, e.g., '9' means the
integer register 9 or the FP register 9 (depending on the instruction).

   Because there is no way to distinguish registers from immediate
values, you have to explicitly use the immediate forms of instructions,
i.e., 'addi,', not just 'add,'.

   The assembler and disassembler usually support the most general form
of an instruction, but usually not the shorter forms (especially for
branches).

5.27.9 ARM Assembler
--------------------

The ARM assembler includes all instruction of ARM architecture version
4, and the BLX instruction from architecture 5.  It does not (yet) have
support for Thumb instructions.  It also lacks support for any
co-processors.

   The assembler uses a postfix syntax with the same operand order as
used in the ARM Architecture Reference Manual.  Mnemonics are suffixed
by a comma.

   Registers are specified by their names 'r0' through 'r15', with the
aliases 'pc', 'lr', 'sp', 'ip' and 'fp' provided for convenience.  Note
that 'ip' refers to the"intra procedure call scratch register" ('r12')
and does not refer to an instruction pointer.  'sp' refers to the ARM
ABI stack pointer ('r13') and not the Forth stack pointer.

   Condition codes can be specified anywhere in the instruction, but
will be most readable if specified just in front of the mnemonic.  The
'S' flag is not a separate word, but encoded into instruction mnemonics,
ie.  just use 'adds,' instead of 'add,' if you want the status register
to be updated.

   The following table lists the syntax of operands for general
instructions:

     Gforth          normal assembler      description
     123 #           #123                  immediate
     r12             r12                   register
     r12 4 #LSL      r12, LSL #4           shift left by immediate
     r12 r1 LSL      r12, LSL r1           shift left by register
     r12 4 #LSR      r12, LSR #4           shift right by immediate
     r12 r1 LSR      r12, LSR r1           shift right by register
     r12 4 #ASR      r12, ASR #4           arithmetic shift right
     r12 r1 ASR      r12, ASR r1           ... by register
     r12 4 #ROR      r12, ROR #4           rotate right by immediate
     r12 r1 ROR      r12, ROR r1           ... by register
     r12 RRX         r12, RRX              rotate right with extend by 1

   Memory operand syntax is listed in this table:

     Gforth            normal assembler      description
     r4 ]              [r4]                  register
     r4 4 #]           [r4, #+4]             register with immediate offset
     r4 -4 #]          [r4, #-4]             with negative offset
     r4 r1 +]          [r4, +r1]             register with register offset
     r4 r1 -]          [r4, -r1]             with negated register offset
     r4 r1 2 #LSL -]   [r4, -r1, LSL #2]     with negated and shifted offset
     r4 4 #]!          [r4, #+4]!            immediate preincrement
     r4 r1 +]!         [r4, +r1]!            register preincrement
     r4 r1 -]!         [r4, +r1]!            register predecrement
     r4 r1 2 #LSL +]!  [r4, +r1, LSL #2]!    shifted preincrement
     r4 -4 ]#          [r4], #-4             immediate postdecrement
     r4 r1 ]+          [r4], r1              register postincrement
     r4 r1 ]-          [r4], -r1             register postdecrement
     r4 r1 2 #LSL ]-   [r4], -r1, LSL #2     shifted postdecrement
     ' xyz >body [#]   xyz                   PC-relative addressing

   Register lists for load/store multiple instructions are started and
terminated by using the words '{' and '}' respectively.  Between braces,
register names can be listed one by one or register ranges can be formed
by using the postfix operator 'r-r'.  The '^' flag is not encoded in the
register list operand, but instead directly encoded into the instruction
mnemonic, ie.  use '^ldm,' and '^stm,'.

   Addressing modes for load/store multiple are not encoded as
instruction suffixes, but instead specified like an addressing mode, Use
one of 'DA', 'IA', 'DB', 'IB', 'DA!', 'IA!', 'DB!' or 'IB!'.

   The following table gives some examples:

     Gforth                           normal assembler
     r4 ia  { r0 r7 r8 }  stm,        stmia    r4, {r0,r7,r8}
     r4 db!  { r0 r7 r8 }  ldm,       ldmdb    r4!, {r0,r7,r8}
     sp ia!  { r0 r15 r-r }  ^ldm,    ldmfd    sp!, {r0-r15}^

   Control structure words typical for Forth assemblers are available:
'if,' 'ahead,' 'then,' 'else,' 'begin,' 'until,' 'again,' 'while,'
'repeat,' 'repeat-until,'.  Conditions are specified in front of these
words:

     r1 r2 cmp,    \ compare r1 and r2
     eq if,        \ equal?
        ...          \ code executed if r1 == r2
     then,

   Example of a definition using the ARM assembler:

     abi-code my+ ( n1 n2 --  n3 )
        \ arm abi: r0=SP, r1=&FP, r2,r3,r12 saved by caller
        r0 IA!  { r2 r3 }  ldm,     \ pop r2 = n2, r3 = n1
        r3  r2  r3         add,     \ r3 = n1+n1
        r3  r0 -4 #]!      str,     \ push r3
        pc  lr             mov,     \ return to caller, new SP in r0
     end-code

5.27.10 Other assemblers
------------------------

If you want to contribute another assembler/disassembler, please contact
us (<anton@mips.complang.tuwien.ac.at>) to check if we have such an
assembler already.  If you are writing them from scratch, please use a
similar syntax style as the one we use (i.e., postfix, commas at the end
of the instruction names, *note Common Assembler::); make the output of
the disassembler be valid input for the assembler, and keep the style
similar to the style we used.

   Hints on implementation: The most important part is to have a good
test suite that contains all instructions.  Once you have that, the rest
is easy.  For actual coding you can take a look at 'arch/mips/disasm.fs'
to get some ideas on how to use data for both the assembler and
disassembler, avoiding redundancy and some potential bugs.  You can also
look at that file (and *note Advanced does> usage example::) to get
ideas how to factor a disassembler.

   Start with the disassembler, because it's easier to reuse data from
the disassembler for the assembler than the other way round.

   For the assembler, take a look at 'arch/alpha/asm.fs', which shows
how simple it can be.

5.28 Threading Words
====================

These words provide access to code addresses and other threading stuff
in Gforth (and, possibly, other interpretive Forths).  It more or less
abstracts away the differences between direct and indirect threading
(and, for direct threading, the machine dependences).  However, at
present this wordset is still incomplete.  It is also pretty low-level;
some day it will hopefully be made unnecessary by an internals wordset
that abstracts implementation details away completely.

   The terminology used here stems from indirect threaded Forth systems;
in such a system, the XT of a word is represented by the CFA (code field
address) of a word; the CFA points to a cell that contains the code
address.  The code address is the address of some machine code that
performs the run-time action of invoking the word (e.g., the 'dovar:'
routine pushes the address of the body of the word (a variable) on the
stack ).

   In an indirect threaded Forth, you can get the code address of name
with '' name @'; in Gforth you can get it with '' name >code-address',
independent of the threading method.

'threading-method'       -- n        gforth       "threading-method"
   0 if the engine is direct threaded.  Note that this may change during
the lifetime of an image.

'>code-address'       xt -- c_addr         gforth       ">code-address"
   c-addr is the code address of the word xt.

'code-address!'       c_addr xt --         gforth       "code-address!"
   Create a code field with code address c-addr at xt.

   For a word defined with 'DOES>', the code address usually points to a
jump instruction (the "does-handler") that jumps to the dodoes routine
(in Gforth on some platforms, it can also point to the dodoes routine
itself).  What you are typically interested in, though, is whether a
word is a 'DOES>'-defined word, and what Forth code it executes;
'>does-code' tells you that.

'>does-code'       xt -- a_addr         gforth       ">does-code"
   If xt is the execution token of a child of a 'DOES>' word, a-addr is
the start of the Forth code after the 'DOES>'; Otherwise a-addr is 0.

   To create a 'DOES>'-defined word with the following basic words, you
have to set up a 'DOES>'-handler with 'does-handler!'; '/does-handler'
aus behind you have to place your executable Forth code.  Finally you
have to create a word and modify its behaviour with 'does-handler!'.

'does-code!'       xt1 xt2 --         gforth       "does-code!"
   Create a code field at xt2 for a child of a 'DOES>'-word; xt1 is the
execution token of the assigned Forth code.

   doc-does-handler!
'/does-handler'       -- n         gforth       "/does-handler"
   The size of a 'DOES>'-handler (includes possible padding).

   The code addresses produced by various defining words are produced by
the following words:

'docol:'       -- addr         gforth       "docol:"
   The code address of a colon definition.

'docon:'       -- addr         gforth       "docon:"
   The code address of a 'CONSTANT'.

'dovar:'       -- addr         gforth       "dovar:"
   The code address of a 'CREATE'd word.

'douser:'       -- addr         gforth       "douser:"
   The code address of a 'USER' variable.

'dodefer:'       -- addr         gforth       "dodefer:"
   The code address of a 'defer'ed word.

'dofield:'       -- addr         gforth       "dofield:"
   The code address of a 'field'.

   The following two words generalize '>code-address', '>does-code',
'code-address!', and 'does-code!':

'>definer'       xt -- definer         gforth       ">definer"
   DEFINER is a unique identifier for the way the XT was defined.  Words
defined with different 'does>'-codes have different definers.  The
definer can be used for comparison and in 'definer!'.

'definer!'       definer xt --         gforth       "definer!"
   The word represented by XT changes its behaviour to the behaviour
associated with DEFINER.

5.29 Passing Commands to the Operating System
=============================================

Gforth allows you to pass an arbitrary string to the host operating
system shell (if such a thing exists) for execution.

'sh'       "..." --         gforth       "sh"
   Parse a string and use 'system' to pass it to the host operating
system for execution in a sub-shell.

'system'       c-addr u --         gforth       "system"
   Pass the string specified by C-ADDR U to the host operating system
for execution in a sub-shell.  The value of the environment variable
'GFORTHSYSTEMPREFIX' (or its default value) is prepended to the string
(mainly to support using 'command.com' as shell in Windows instead of
whatever shell Cygwin uses by default; *note Environment variables::).

'$?'       -- n         gforth       "dollar-question"
   'Value' -- the exit status returned by the most recently executed
'system' command.

'getenv'       c-addr1 u1 -- c-addr2 u2        gforth       "getenv"
   The string c-addr1 u1 specifies an environment variable.  The string
c-addr2 u2 is the host operating system's expansion of that environment
variable.  If the environment variable does not exist, c-addr2 u2
specifies a string 0 characters in length.

5.30 Keeping track of Time
==========================

'ms'       n --         unknown       "ms"

'time&date'       -- nsec nmin nhour nday nmonth nyear        facility-ext       "time-and-date"
   Report the current time of day.  Seconds, minutes and hours are
numbered from 0.  Months are numbered from 1.

'utime'       -- dtime        gforth       "utime"
   Report the current time in microseconds since some epoch.

'cputime'       -- duser dsystem        gforth       "cputime"
   duser and dsystem are the respective user- and system-level CPU times
used since the start of the Forth system (excluding child processes), in
microseconds (the granularity may be much larger, however).  On
platforms without the getrusage call, it reports elapsed time (since
some epoch) for duser and 0 for dsystem.

5.31 Miscellaneous Words
========================

This section lists the Standard Forth words that are not documented
elsewhere in this manual.  Ultimately, they all need proper homes.

'quit'       ?? -- ??         core       "quit"
   Empty the return stack, make the user input device the input source,
enter interpret state and start the text interpreter.

   The following Standard Forth words are not currently supported by
Gforth (*note Standard conformance::):

   'EDITOR' 'EMIT?' 'FORGET'

6 Error messages
****************

A typical Gforth error message looks like this:

     in file included from \evaluated string/:-1
     in file included from ./yyy.fs:1
     ./xxx.fs:4: Invalid memory address
     >>>bar<<<
     Backtrace:
     $400E664C @
     $400E6664 foo

   The message identifying the error is 'Invalid memory address'.  The
error happened when text-interpreting line 4 of the file './xxx.fs'.
This line is given (it contains 'bar'), and the word on the line where
the error happened, is pointed out (with '>>>' and '<<<').

   The file containing the error was included in line 1 of './yyy.fs',
and 'yyy.fs' was included from a non-file (in this case, by giving
'yyy.fs' as command-line parameter to Gforth).

   At the end of the error message you find a return stack dump that can
be interpreted as a backtrace (possibly empty).  On top you find the top
of the return stack when the 'throw' happened, and at the bottom you
find the return stack entry just above the return stack of the topmost
text interpreter.

   To the right of most return stack entries you see a guess for the
word that pushed that return stack entry as its return address.  This
gives a backtrace.  In our case we see that 'bar' called 'foo', and
'foo' called '@' (and '@' had an _Invalid memory address_ exception).

   Note that the backtrace is not perfect: We don't know which return
stack entries are return addresses (so we may get false positives); and
in some cases (e.g., for 'abort"') we cannot determine from the return
address the word that pushed the return address, so for some return
addresses you see no names in the return stack dump.

   The return stack dump represents the return stack at the time when a
specific 'throw' was executed.  In programs that make use of 'catch', it
is not necessarily clear which 'throw' should be used for the return
stack dump (e.g., consider one 'throw' that indicates an error, which is
caught, and during recovery another error happens; which 'throw' should
be used for the stack dump?).  Gforth presents the return stack dump for
the first 'throw' after the last executed (not returned-to) 'catch' or
'nothrow'; this works well in the usual case.  To get the right
backtrace, you usually want to insert 'nothrow' or '['] false catch
2drop' after a 'catch' if the error is not rethrown.

   'Gforth' is able to do a return stack dump for throws generated from
primitives (e.g., invalid memory address, stack empty etc.);
'gforth-fast' is only able to do a return stack dump from a directly
called 'throw' (including 'abort' etc.).  Given an exception caused by a
primitive in 'gforth-fast', you will typically see no return stack dump
at all; however, if the exception is caught by 'catch' (e.g., for
restoring some state), and then 'throw'n again, the return stack dump
will be for the first such 'throw'.

7 Tools
*******

See also *note Emacs and Gforth::.

7.1 'ans-report.fs': Report the words used, sorted by wordset
=============================================================

If you want to label a Forth program as Standard Program, you must
document which wordsets the program uses.

   The 'ans-report.fs' tool makes it easy for you to determine which
words from which wordset and which non-standard words your application
uses.  You simply have to include 'ans-report.fs' before loading the
program you want to check.  After loading your program, you can get the
report with 'print-ans-report'.  A typical use is to run this as batch
job like this:
     gforth ans-report.fs myprog.fs -e "print-ans-report bye"

   The output looks like this (for 'compat/control.fs'):
     The program uses the following words
     from CORE :
     : POSTPONE THEN ; immediate ?dup IF 0=
     from BLOCK-EXT :
     \
     from FILE :
     (

   'ans-report.fs' reports both Forth-94 and Forth-2012 wordsets.  For
words that are in both standards, it reports the wordset without suffix
(e.g., 'CORE-EXT').  For Forth-2012-only words, it reports the wordset
with a '-2012' suffix (e.g., 'CORE-EXT-2012'); and likewise for the
words that are Forth-94-only (i.e., that have been removed in
Forth-2012).

7.1.1 Caveats
-------------

Note that 'ans-report.fs' just checks which words are used, not whether
they are used in a standard-conforming way!

   Some words are defined in several wordsets in the standard.
'ans-report.fs' reports them for only one of the wordsets, and not
necessarily the one you expect.  It depends on usage which wordset is
the right one to specify.  E.g., if you only use the compilation
semantics of 'S"', it is a Core word; if you also use its interpretation
semantics, it is a File word.

7.2 Stack depth changes during interpretation
=============================================

Sometimes you notice that, after loading a file, there are items left on
the stack.  The tool 'depth-changes.fs' helps you find out quickly where
in the file these stack items are coming from.

   The simplest way of using 'depth-changes.fs' is to include it before
the file(s) you want to check, e.g.:

     gforth depth-changes.fs my-file.fs

   This will compare the stack depths of the data and FP stack at every
empty line (in interpretation state) against these depths at the last
empty line (in interpretation state).  If the depths are not equal, the
position in the file and the stack contents are printed with '~~' (*note
Debugging::).  This indicates that a stack depth change has occured in
the paragraph of non-empty lines before the indicated line.  It is a
good idea to leave an empty line at the end of the file, so the last
paragraph is checked, too.

   Checking only at empty lines usually works well, but sometimes you
have big blocks of non-empty lines (e.g., when building a big table),
and you want to know where in this block the stack depth changed.  You
can check all interpreted lines with

     gforth depth-changes.fs -e "' all-lines is depth-changes-filter" my-file.fs

   This checks the stack depth at every end-of-line.  So the depth
change occured in the line reported by the '~~' (not in the line
before).

   Note that, while this offers better accuracy in indicating where the
stack depth changes, it will often report many intentional stack depth
changes (e.g., when an interpreted computation stretches across several
lines).  You can suppress the checking of some lines by putting
backslashes at the end of these lines (not followed by white space), and
using

     gforth depth-changes.fs -e "' most-lines is depth-changes-filter" my-file.fs

8 Standard conformance
**********************

To the best of our knowledge, Gforth is a

   ANS Forth System and a Forth-2012 System
   * providing the Core Extensions word set
   * providing the Block word set
   * providing the Block Extensions word set
   * providing the Double-Number word set
   * providing the Double-Number Extensions word set
   * providing the Exception word set
   * providing the Exception Extensions word set
   * providing the Facility word set
   * providing the Facility Extensions word set, except 'EMIT?'
   * providing the File Access word set
   * providing the File Access Extensions word set
   * providing the Floating-Point word set
   * providing the Floating-Point Extensions word set
   * providing the Locals word set
   * providing the Locals Extensions word set
   * providing the Memory-Allocation word set
   * providing the Memory-Allocation Extensions word set
   * providing the Programming-Tools word set
   * providing the Programming-Tools Extensions word set, except
     'EDITOR' and 'FORGET'
   * providing the Search-Order word set
   * providing the Search-Order Extensions word set
   * providing the String word set
   * providing the String Extensions word set
   * providing the Extended-Character wordset

   Gforth has the following environmental restrictions:

   * While processing the OS command line, if an exception is not
     caught, Gforth exits with a non-zero exit code instead of
     performing QUIT.

   * When an 'throw' is performed after a 'query', Gforth does not
     always restore the input source specification in effect at the
     corresponding catch.

   In addition, Standard Forth systems are required to document certain
implementation choices.  This chapter tries to meet these requirements
for the Forth-94 standard.  For the Forth-2012 standard, we decided to
produce the additional documentation only if there is demand.  So if you
are really missing this documentation, please let us know.

   In many cases, the following documentation gives a way to ask the
system for the information instead of providing the information
directly, in particular, if the information depends on the processor,
the operating system or the installation options chosen, or if they are
likely to change during the maintenance of Gforth.

8.1 The Core Words
==================

8.1.1 Implementation Defined Options
------------------------------------

(Cell) aligned addresses:
     processor-dependent.  Gforth's alignment words perform natural
     alignment (e.g., an address aligned for a datum of size 8 is
     divisible by 8).  Unaligned accesses usually result in a '-23
     THROW'.

'EMIT' and non-graphic characters:
     The character is output using the C library function (actually,
     macro) 'putc'.

character editing of 'ACCEPT' and 'EXPECT':
     This is modeled on the GNU readline library (*note Command Line
     Editing: (readline)Readline Interaction.) with Emacs-like key
     bindings.  'Tab' deviates a little by producing a full word
     completion every time you type it (instead of producing the common
     prefix of all completions).  *Note Command-line editing::.

character set:
     The character set of your computer and display device.  Gforth is
     8-bit-clean (but some other component in your system may make
     trouble).

Character-aligned address requirements:
     installation-dependent.  Currently a character is represented by a
     C 'unsigned char'; in the future we might switch to 'wchar_t'
     (Comments on that requested).

character-set extensions and matching of names:
     Any character except the ASCII NUL character can be used in a name.
     Matching is case-insensitive (except in 'TABLE's).  The matching is
     performed using the C library function 'strncasecmp', whose
     function is probably influenced by the locale.  E.g., the 'C'
     locale does not know about accents and umlauts, so they are matched
     case-sensitively in that locale.  For portability reasons it is
     best to write programs such that they work in the 'C' locale.  Then
     one can use libraries written by a Polish programmer (who might use
     words containing ISO Latin-2 encoded characters) and by a French
     programmer (ISO Latin-1) in the same program (of course, 'WORDS'
     will produce funny results for some of the words (which ones,
     depends on the font you are using)).  Also, the locale you prefer
     may not be available in other operating systems.  Hopefully,
     Unicode will solve these problems one day.

conditions under which control characters match a space delimiter:
     If 'word' is called with the space character as a delimiter, all
     white-space characters (as identified by the C macro 'isspace()')
     are delimiters.  'Parse', on the other hand, treats space like
     other delimiters.  'Parse-name', which is used by the outer
     interpreter (aka text interpreter) by default, treats all
     white-space characters as delimiters.

format of the control-flow stack:
     The data stack is used as control-flow stack.  The size of a
     control-flow stack item in cells is given by the constant
     'cs-item-size'.  At the time of this writing, an item consists of a
     (pointer to a) locals list (third), an address in the code
     (second), and a tag for identifying the item (TOS). The following
     tags are used: 'defstart', 'live-orig', 'dead-orig', 'dest',
     'do-dest', 'scopestart'.

conversion of digits > 35
     The characters '[\]^_'' are the digits with the decimal value
     36-41.  There is no way to input many of the larger digits.

display after input terminates in 'ACCEPT' and 'EXPECT':
     The cursor is moved to the end of the entered string.  If the input
     is terminated using the 'Return' key, a space is typed.

exception abort sequence of 'ABORT"':
     The error string is stored into the variable '"error' and a '-2
     throw' is performed.

input line terminator:
     For interactive input, 'C-m' (CR) and 'C-j' (LF) terminate lines.
     One of these characters is typically produced when you type the
     'Enter' or 'Return' key.

maximum size of a counted string:
     's" /counted-string" environment? drop .'.  Currently 255
     characters on all platforms, but this may change.

maximum size of a parsed string:
     Given by the constant '/line'.  Currently 255 characters.

maximum size of a definition name, in characters:
     MAXU/8

maximum string length for 'ENVIRONMENT?', in characters:
     MAXU/8

method of selecting the user input device:
     The user input device is the standard input.  There is currently no
     way to change it from within Gforth.  However, the input can
     typically be redirected in the command line that starts Gforth.

method of selecting the user output device:
     'EMIT' and 'TYPE' output to the file-id stored in the value
     'outfile-id' ('stdout' by default).  Gforth uses unbuffered output
     when the user output device is a terminal, otherwise the output is
     buffered.

methods of dictionary compilation:
     What are we expected to document here?

number of bits in one address unit:
     's" address-units-bits" environment? drop .'.  8 in all current
     platforms.

number representation and arithmetic:
     Processor-dependent.  Binary two's complement on all current
     platforms.

ranges for integer types:
     Installation-dependent.  Make environmental queries for 'MAX-N',
     'MAX-U', 'MAX-D' and 'MAX-UD'.  The lower bounds for unsigned (and
     positive) types is 0.  The lower bound for signed types on two's
     complement and one's complement machines machines can be computed
     by adding 1 to the upper bound.

read-only data space regions:
     The whole Forth data space is writable.

size of buffer at 'WORD':
     'PAD HERE - .'.  104 characters on 32-bit machines.  The buffer is
     shared with the pictured numeric output string.  If overwriting
     'PAD' is acceptable, it is as large as the remaining dictionary
     space, although only as much can be sensibly used as fits in a
     counted string.

size of one cell in address units:
     '1 cells .'.

size of one character in address units:
     '1 chars .'.  1 on all current platforms.

size of the keyboard terminal buffer:
     Varies.  You can determine the size at a specific time using 'lp@
     tib - .'.  It is shared with the locals stack and TIBs of files
     that include the current file.  You can change the amount of space
     for TIBs and locals stack at Gforth startup with the command line
     option '-l'.

size of the pictured numeric output buffer:
     'PAD HERE - .'.  104 characters on 32-bit machines.  The buffer is
     shared with 'WORD'.

size of the scratch area returned by 'PAD':
     The remainder of dictionary space.  'unused pad here - - .'.

system case-sensitivity characteristics:
     Dictionary searches are case-insensitive (except in 'TABLE's).
     However, as explained above under character-set extensions, the
     matching for non-ASCII characters is determined by the locale you
     are using.  In the default 'C' locale all non-ASCII characters are
     matched case-sensitively.

system prompt:
     ' ok' in interpret state, ' compiled' in compile state.

division rounding:
     The ordinary division words '/ mod /mod */ */mod' perform floored
     division (with the default installation of Gforth).  You can check
     this with 's" floored" environment? drop .'.  If you write programs
     that need a specific division rounding, best use 'fm/mod' or
     'sm/rem' for portability.

values of 'STATE' when true:
     -1.

values returned after arithmetic overflow:
     On two's complement machines, arithmetic is performed modulo
     2**bits-per-cell for single arithmetic and 4**bits-per-cell for
     double arithmetic (with appropriate mapping for signed types).
     Division by zero typically results in a '-55 throw' (Floating-point
     unidentified fault) or '-10 throw' (divide by zero).  Integer
     division overflow can result in these throws, or in '-11 throw'; in
     'gforth-fast' division overflow and divide by zero may also result
     in returning bogus results without producing an exception.

whether the current definition can be found after DOES>:
     No.

8.1.2 Ambiguous conditions
--------------------------

a name is neither a word nor a number:
     '-13 throw' (Undefined word).

a definition name exceeds the maximum length allowed:
     '-19 throw' (Word name too long)

addressing a region not inside the various data spaces of the forth system:
     The stacks, code space and header space are accessible.  Machine
     code space is typically readable.  Accessing other addresses gives
     results dependent on the operating system.  On decent systems: '-9
     throw' (Invalid memory address).

argument type incompatible with parameter:
     This is usually not caught.  Some words perform checks, e.g., the
     control flow words, and issue a 'ABORT"' or '-12 THROW' (Argument
     type mismatch).

attempting to obtain the execution token of a word with undefined execution semantics:
     The execution token represents the interpretation semantics of the
     word.  Gforth defines interpretation semantics for all words; for
     words where the standard does not define interpretation semantics,
     but defines the execution semantics (except 'LEAVE'), the
     interpretation semantics are to perform the execution semantics.
     For words where the standard defines no interprtation semantics,
     but defined compilation semantics (plus 'LEAVE'), the
     interpretation semantics are to perform the compilation semantics.
     Some words are marked as compile-only, and ''' gives a warning for
     these words.

dividing by zero:
     On some platforms, this produces a '-10 throw' (Division by zero);
     on other systems, this typically results in a '-55 throw'
     (Floating-point unidentified fault).

insufficient data stack or return stack space:
     Depending on the operating system, the installation, and the
     invocation of Gforth, this is either checked by the memory
     management hardware, or it is not checked.  If it is checked, you
     typically get a '-3 throw' (Stack overflow), '-5 throw' (Return
     stack overflow), or '-9 throw' (Invalid memory address) (depending
     on the platform and how you achieved the overflow) as soon as the
     overflow happens.  If it is not checked, overflows typically result
     in mysterious illegal memory accesses, producing '-9 throw'
     (Invalid memory address) or '-23 throw' (Address alignment
     exception); they might also destroy the internal data structure of
     'ALLOCATE' and friends, resulting in various errors in these words.

insufficient space for loop control parameters:
     Like other return stack overflows.

insufficient space in the dictionary:
     If you try to allot (either directly with 'allot', or indirectly
     with ',', 'create' etc.)  more memory than available in the
     dictionary, you get a '-8 throw' (Dictionary overflow).  If you try
     to access memory beyond the end of the dictionary, the results are
     similar to stack overflows.

interpreting a word with undefined interpretation semantics:
     Gforth defines interpretation semantics for all words; for words
     where the standard defines execution semantics (except 'LEAVE'),
     the interpretation semantics are to perform the execution
     semantics.  For words where the standard defines no interprtation
     semantics, but defined compilation semantics (plus 'LEAVE'), the
     interpretation semantics are to perform the compilation semantics.
     Some words are marked as compile-only, and text-interpreting them
     gives a warning.

modifying the contents of the input buffer or a string literal:
     These are located in writable memory and can be modified.

overflow of the pictured numeric output string:
     '-17 throw' (Pictured numeric ouput string overflow).

parsed string overflow:
     'PARSE' cannot overflow.  'WORD' does not check for overflow.

producing a result out of range:
     On two's complement machines, arithmetic is performed modulo
     2**bits-per-cell for single arithmetic and 4**bits-per-cell for
     double arithmetic (with appropriate mapping for signed types).
     Division by zero typically results in a '-10 throw' (divide by
     zero) or '-55 throw' (floating point unidentified fault).  Overflow
     on division may result in these errors or in '-11 throw' (result
     out of range).  'Gforth-fast' may silently produce bogus results on
     division overflow or division by zero.  'Convert' and '>number'
     currently overflow silently.

reading from an empty data or return stack:
     The data stack is checked by the outer (aka text) interpreter after
     every word executed.  If it has underflowed, a '-4 throw' (Stack
     underflow) is performed.  Apart from that, stacks may be checked or
     not, depending on operating system, installation, and invocation.
     If they are caught by a check, they typically result in '-4 throw'
     (Stack underflow), '-6 throw' (Return stack underflow) or '-9
     throw' (Invalid memory address), depending on the platform and
     which stack underflows and by how much.  Note that even if the
     system uses checking (through the MMU), your program may have to
     underflow by a significant number of stack items to trigger the
     reaction (the reason for this is that the MMU, and therefore the
     checking, works with a page-size granularity).  If there is no
     checking, the symptoms resulting from an underflow are similar to
     those from an overflow.  Unbalanced return stack errors can result
     in a variety of symptoms, including '-9 throw' (Invalid memory
     address) and Illegal Instruction (typically '-260 throw').

unexpected end of the input buffer, resulting in an attempt to use a zero-length string as a name:
     'Create' and its descendants perform a '-16 throw' (Attempt to use
     zero-length string as a name).  Words like ''' probably will not
     find what they search.  Note that it is possible to create
     zero-length names with 'nextname' (should it not?).

'>IN' greater than input buffer:
     The next invocation of a parsing word returns a string with length
     0.

'RECURSE' appears after 'DOES>':
     Compiles a recursive call to the code after 'DOES>'.

argument input source different than current input source for 'RESTORE-INPUT':
     '-12 THROW'.  Note that, once an input file is closed (e.g.,
     because the end of the file was reached), its source-id may be
     reused.  Therefore, restoring an input source specification
     referencing a closed file may lead to unpredictable results instead
     of a '-12 THROW'.

     In the future, Gforth may be able to restore input source
     specifications from other than the current input source.

data space containing definitions gets de-allocated:
     Deallocation with 'allot' is not checked.  This typically results
     in memory access faults or execution of illegal instructions.

data space read/write with incorrect alignment:
     Processor-dependent.  Typically results in a '-23 throw' (Address
     alignment exception).  Under Linux-Intel on a 486 or later
     processor with alignment turned on, incorrect alignment results in
     a '-9 throw' (Invalid memory address).  There are reportedly some
     processors with alignment restrictions that do not report
     violations.

data space pointer not properly aligned, ',', 'C,':
     Like other alignment errors.

less than u+2 stack items ('PICK' and 'ROLL'):
     Like other stack underflows.

loop control parameters not available:
     Not checked.  The counted loop words simply assume that the top of
     return stack items are loop control parameters and behave
     accordingly.

most recent definition does not have a name ('IMMEDIATE'):
     'abort" last word was headerless"'.

name not defined by 'VALUE' used by 'TO':
     '-32 throw' (Invalid name argument) (unless name is a local or was
     defined by 'CONSTANT'; in the latter case it just changes the
     constant).

name not found (''', 'POSTPONE', '[']', '[COMPILE]'):
     '-13 throw' (Undefined word)

parameters are not of the same type ('DO', '?DO', 'WITHIN'):
     Gforth behaves as if they were of the same type.  I.e., you can
     predict the behaviour by interpreting all parameters as, e.g.,
     signed.

'POSTPONE' or '[COMPILE]' applied to 'TO':
     Assume ': X POSTPONE TO ; IMMEDIATE'.  'X' performs the compilation
     semantics of 'TO'.

String longer than a counted string returned by 'WORD':
     Not checked.  The string will be ok, but the count will, of course,
     contain only the least significant bits of the length.

u greater than or equal to the number of bits in a cell ('LSHIFT', 'RSHIFT'):
     Processor-dependent.  Typical behaviours are returning 0 and using
     only the low bits of the shift count.

word not defined via 'CREATE':
     '>BODY' produces the PFA of the word no matter how it was defined.

     'DOES>' changes the execution semantics of the last defined word no
     matter how it was defined.  E.g., 'CONSTANT DOES>' is equivalent to
     'CREATE , DOES>'.

words improperly used outside '<#' and '#>':
     Not checked.  As usual, you can expect memory faults.

8.1.3 Other system documentation
--------------------------------

nonstandard words using 'PAD':
     None.

operator's terminal facilities available:
     After processing the OS's command line, Gforth goes into
     interactive mode, and you can give commands to Gforth
     interactively.  The actual facilities available depend on how you
     invoke Gforth.

program data space available:
     'UNUSED .' gives the remaining dictionary space.  The total
     dictionary space can be specified with the '-m' switch (*note
     Invoking Gforth::) when Gforth starts up.

return stack space available:
     You can compute the total return stack space in cells with 's"
     RETURN-STACK-CELLS" environment? drop .'.  You can specify it at
     startup time with the '-r' switch (*note Invoking Gforth::).

stack space available:
     You can compute the total data stack space in cells with 's"
     STACK-CELLS" environment? drop .'.  You can specify it at startup
     time with the '-d' switch (*note Invoking Gforth::).

system dictionary space required, in address units:
     Type 'here forthstart - .' after startup.  At the time of this
     writing, this gives 80080 (bytes) on a 32-bit system.

8.2 The optional Block word set
===============================

8.2.1 Implementation Defined Options
------------------------------------

the format for display by 'LIST':
     First the screen number is displayed, then 16 lines of 64
     characters, each line preceded by the line number.

the length of a line affected by '\':
     64 characters.

8.2.2 Ambiguous conditions
--------------------------

correct block read was not possible:
     Typically results in a 'throw' of some OS-derived value (between
     -512 and -2048).  If the blocks file was just not long enough,
     blanks are supplied for the missing portion.

I/O exception in block transfer:
     Typically results in a 'throw' of some OS-derived value (between
     -512 and -2048).

invalid block number:
     '-35 throw' (Invalid block number)

a program directly alters the contents of 'BLK':
     The input stream is switched to that other block, at the same
     position.  If the storing to 'BLK' happens when interpreting
     non-block input, the system will get quite confused when the block
     ends.

no current block buffer for 'UPDATE':
     'UPDATE' has no effect.

8.2.3 Other system documentation
--------------------------------

any restrictions a multiprogramming system places on the use of buffer addresses:
     No restrictions (yet).

the number of blocks available for source and data:
     depends on your disk space.

8.3 The optional Double Number word set
=======================================

8.3.1 Ambiguous conditions
--------------------------

d outside of range of n in 'D>S':
     The least significant cell of d is produced.

8.4 The optional Exception word set
===================================

8.4.1 Implementation Defined Options
------------------------------------

'THROW'-codes used in the system:
     The codes -256--511 are used for reporting signals.  The mapping
     from OS signal numbers to throw codes is -256-signal.  The codes
     -512--2047 are used for OS errors (for file and memory allocation
     operations).  The mapping from OS error numbers to throw codes is
     -512-'errno'.  One side effect of this mapping is that undefined OS
     errors produce a message with a strange number; e.g., '-1000 THROW'
     results in 'Unknown error 488' on my system.

8.5 The optional Facility word set
==================================

8.5.1 Implementation Defined Options
------------------------------------

encoding of keyboard events ('EKEY'):
     Keys corresponding to ASCII characters are encoded as ASCII
     characters.  Other keys are encoded with the constants 'k-left',
     'k-right', 'k-up', 'k-down', 'k-home', 'k-end', 'k1', 'k2', 'k3',
     'k4', 'k5', 'k6', 'k7', 'k8', 'k9', 'k10', 'k11', 'k12', 'k-winch',
     'k-eof'.

duration of a system clock tick:
     System dependent.  With respect to 'MS', the time is specified in
     microseconds.  How well the OS and the hardware implement this, is
     another question.

repeatability to be expected from the execution of 'MS':
     System dependent.  On Unix, a lot depends on load.  If the system
     is lightly loaded, and the delay is short enough that Gforth does
     not get swapped out, the performance should be acceptable.  Under
     MS-DOS and other single-tasking systems, it should be good.

8.5.2 Ambiguous conditions
--------------------------

'AT-XY' can't be performed on user output device:
     Largely terminal dependent.  No range checks are done on the
     arguments.  No errors are reported.  You may see some garbage
     appearing, you may see simply nothing happen.

8.6 The optional File-Access word set
=====================================

8.6.1 Implementation Defined Options
------------------------------------

file access methods used:
     'R/O', 'R/W' and 'BIN' work as you would expect.  'W/O' translates
     into the C file opening mode 'w' (or 'wb'): The file is cleared, if
     it exists, and created, if it does not (with both 'open-file' and
     'create-file').  Under Unix 'create-file' creates a file with 666
     permissions modified by your umask.

file exceptions:
     The file words do not raise exceptions (except, perhaps, memory
     access faults when you pass illegal addresses or file-ids).

file line terminator:
     System-dependent.  Gforth uses C's newline character as line
     terminator.  What the actual character code(s) of this are is
     system-dependent.

file name format:
     System dependent.  Gforth just uses the file name format of your
     OS.

information returned by 'FILE-STATUS':
     'FILE-STATUS' returns the most powerful file access mode allowed
     for the file: Either 'R/O', 'W/O' or 'R/W'.  If the file cannot be
     accessed, 'R/O BIN' is returned.  'BIN' is applicable along with
     the returned mode.

input file state after an exception when including source:
     All files that are left via the exception are closed.

ior values and meaning:
     The iors returned by the file and memory allocation words are
     intended as throw codes.  They typically are in the range
     -512--2047 of OS errors.  The mapping from OS error numbers to iors
     is -512-errno.

maximum depth of file input nesting:
     limited by the amount of return stack, locals/TIB stack, and the
     number of open files available.  This should not give you troubles.

maximum size of input line:
     '/line'.  Currently 255.

methods of mapping block ranges to files:
     By default, blocks are accessed in the file 'blocks.fb' in the
     current working directory.  The file can be switched with 'USE'.

number of string buffers provided by 'S"':
     As many as memory available; the strings are stored in memory
     blocks allocated with ALLOCATE indefinitely.

size of string buffer used by 'S"':
     '/line'.  currently 255.

8.6.2 Ambiguous conditions
--------------------------

attempting to position a file outside its boundaries:
     'REPOSITION-FILE' is performed as usual: Afterwards,
     'FILE-POSITION' returns the value given to 'REPOSITION-FILE'.

attempting to read from file positions not yet written:
     End-of-file, i.e., zero characters are read and no error is
     reported.

file-id is invalid ('INCLUDE-FILE'):
     An appropriate exception may be thrown, but a memory fault or other
     problem is more probable.

I/O exception reading or closing file-id ('INCLUDE-FILE', 'INCLUDED'):
     The ior produced by the operation, that discovered the problem, is
     thrown.

named file cannot be opened ('INCLUDED'):
     The ior produced by 'open-file' is thrown.

requesting an unmapped block number:
     There are no unmapped legal block numbers.  On some operating
     systems, writing a block with a large number may overflow the file
     system and have an error message as consequence.

using 'source-id' when 'blk' is non-zero:
     'source-id' performs its function.  Typically it will give the id
     of the source which loaded the block.  (Better ideas?)

8.7 The optional Floating-Point word set
========================================

8.7.1 Implementation Defined Options
------------------------------------

format and range of floating point numbers:
     System-dependent; the 'double' type of C.

results of 'REPRESENT' when float is out of range:
     System dependent; 'REPRESENT' is implemented using the C library
     function 'ecvt()' and inherits its behaviour in this respect.

rounding or truncation of floating-point numbers:
     System dependent; the rounding behaviour is inherited from the
     hosting C compiler.  IEEE-FP-based (i.e., most) systems by default
     round to nearest, and break ties by rounding to even (i.e., such
     that the last bit of the mantissa is 0).

size of floating-point stack:
     's" FLOATING-STACK" environment? drop .' gives the total size of
     the floating-point stack (in floats).  You can specify this on
     startup with the command-line option '-f' (*note Invoking
     Gforth::).

width of floating-point stack:
     '1 floats'.

8.7.2 Ambiguous conditions
--------------------------

'df@' or 'df!' used with an address that is not double-float aligned:
     System-dependent.  Typically results in a '-23 THROW' like other
     alignment violations.

'f@' or 'f!' used with an address that is not float aligned:
     System-dependent.  Typically results in a '-23 THROW' like other
     alignment violations.

floating-point result out of range:
     System-dependent.  Can result in a '-43 throw' (floating point
     overflow), '-54 throw' (floating point underflow), '-41 throw'
     (floating point inexact result), '-55 THROW' (Floating-point
     unidentified fault), or can produce a special value representing,
     e.g., Infinity.

'sf@' or 'sf!' used with an address that is not single-float aligned:
     System-dependent.  Typically results in an alignment fault like
     other alignment violations.

'base' is not decimal ('REPRESENT', 'F.', 'FE.', 'FS.'):
     The floating-point number is converted into decimal nonetheless.

Both arguments are equal to zero ('FATAN2'):
     System-dependent.  'FATAN2' is implemented using the C library
     function 'atan2()'.

Using 'FTAN' on an argument r1 where cos(r1) is zero:
     System-dependent.  Anyway, typically the cos of r1 will not be zero
     because of small errors and the tan will be a very large (or very
     small) but finite number.

d cannot be presented precisely as a float in 'D>F':
     The result is rounded to the nearest float.

dividing by zero:
     Platform-dependent; can produce an Infinity, NaN, '-42 throw'
     (floating point divide by zero) or '-55 throw' (Floating-point
     unidentified fault).

exponent too big for conversion ('DF!', 'DF@', 'SF!', 'SF@'):
     System dependent.  On IEEE-FP based systems the number is converted
     into an infinity.

float<1 ('FACOSH'):
     Platform-dependent; on IEEE-FP systems typically produces a NaN.

float<=-1 ('FLNP1'):
     Platform-dependent; on IEEE-FP systems typically produces a NaN (or
     a negative infinity for float=-1).

float<=0 ('FLN', 'FLOG'):
     Platform-dependent; on IEEE-FP systems typically produces a NaN (or
     a negative infinity for float=0).

float<0 ('FASINH', 'FSQRT'):
     Platform-dependent; for 'fsqrt' this typically gives a NaN, for
     'fasinh' some platforms produce a NaN, others a number (bug in the
     C library?).

|float|>1 ('FACOS', 'FASIN', 'FATANH'):
     Platform-dependent; IEEE-FP systems typically produce a NaN.

integer part of float cannot be represented by d in 'F>D':
     Platform-dependent; typically, some double number is produced and
     no error is reported.

string larger than pictured numeric output area ('f.', 'fe.', 'fs.'):
     'Precision' characters of the numeric output area are used.  If
     'precision' is too high, these words will smash the data or code
     close to 'here'.

8.8 The optional Locals word set
================================

8.8.1 Implementation Defined Options
------------------------------------

maximum number of locals in a definition:
     's" #locals" environment? drop .'.  Currently 15.  This is a lower
     bound, e.g., on a 32-bit machine there can be 41 locals of up to 8
     characters.  The number of locals in a definition is bounded by the
     size of locals-buffer, which contains the names of the locals.

8.8.2 Ambiguous conditions
--------------------------

executing a named local in interpretation state:
     Compiles the local into the current definition (just as in compile
     state); in addition text-interpreting a local in interpretation
     state gives an "is compile-only" warning.

name not defined by 'VALUE' or '(LOCAL)' ('TO'):
     '-32 throw' (Invalid name argument)

8.9 The optional Memory-Allocation word set
===========================================

8.9.1 Implementation Defined Options
------------------------------------

values and meaning of ior:
     The iors returned by the file and memory allocation words are
     intended as throw codes.  They typically are in the range
     -512--2047 of OS errors.  The mapping from OS error numbers to iors
     is -512-errno.

8.10 The optional Programming-Tools word set
============================================

8.10.1 Implementation Defined Options
-------------------------------------

ending sequence for input following ';CODE' and 'CODE':
     'END-CODE'

manner of processing input following ';CODE' and 'CODE':
     The 'ASSEMBLER' vocabulary is pushed on the search order stack, and
     the input is processed by the text interpreter, (starting) in
     interpret state.

search order capability for 'EDITOR' and 'ASSEMBLER':
     The Search-Order word set.

source and format of display by 'SEE':
     The source for 'see' is the executable code used by the inner
     interpreter.  The current 'see' tries to output Forth source code
     (and on some platforms, assembly code for primitives) as well as
     possible.

8.10.2 Ambiguous conditions
---------------------------

deleting the compilation word list ('FORGET'):
     Not implemented (yet).

fewer than u+1 items on the control-flow stack ('CS-PICK', 'CS-ROLL'):
     This typically results in an 'abort"' with a descriptive error
     message (may change into a '-22 throw' (Control structure mismatch)
     in the future).  You may also get a memory access error.  If you
     are unlucky, this ambiguous condition is not caught.

name can't be found ('FORGET'):
     Not implemented (yet).

name not defined via 'CREATE':
     ';CODE' behaves like 'DOES>' in this respect, i.e., it changes the
     execution semantics of the last defined word no matter how it was
     defined.

'POSTPONE' applied to '[IF]':
     After defining ': X POSTPONE [IF] ; IMMEDIATE'.  'X' is equivalent
     to '[IF]'.

reaching the end of the input source before matching '[ELSE]' or '[THEN]':
     Continue in the same state of conditional compilation in the next
     outer input source.  Currently there is no warning to the user
     about this.

removing a needed definition ('FORGET'):
     Not implemented (yet).

8.11 The optional Search-Order word set
=======================================

8.11.1 Implementation Defined Options
-------------------------------------

maximum number of word lists in search order:
     's" wordlists" environment? drop .'.  Currently 16.

minimum search order:
     'root root'.

8.11.2 Ambiguous conditions
---------------------------

changing the compilation word list (during compilation):
     The word is entered into the word list that was the compilation
     word list at the start of the definition.  Any changes to the name
     field (e.g., 'immediate') or the code field (e.g., when executing
     'DOES>') are applied to the latest defined word (as reported by
     'latest' or 'latestxt'), if possible, irrespective of the
     compilation word list.

search order empty ('previous'):
     'abort" Vocstack empty"'.

too many word lists in search order ('also'):
     'abort" Vocstack full"'.

9 Should I use Gforth extensions?
*********************************

As you read through the rest of this manual, you will see documentation
for Standard words, and documentation for some appealing Gforth
extensions.  You might ask yourself the question: "Should I restrict
myself to the standard, or should I use the extensions?"

   The answer depends on the goals you have for the program you are
working on:

   * Is it just for yourself or do you want to share it with others?

   * If you want to share it, do the others all use Gforth?

   * If it is just for yourself, do you want to restrict yourself to
     Gforth?

   If restricting the program to Gforth is ok, then there is no reason
not to use extensions.  It is still a good idea to keep to the standard
where it is easy, in case you want to reuse these parts in another
program that you want to be portable.

   If you want to be able to port the program to other Forth systems,
there are the following points to consider:

   * Most Forth systems that are being maintained support Standard
     Forth.  So if your program complies with the standard, it will be
     portable among many systems.

   * A number of the Gforth extensions can be implemented in Standard
     Forth using public-domain files provided in the 'compat/'
     directory.  These are mentioned in the text in passing.  There is
     no reason not to use these extensions, your program will still be
     Standard Forth compliant; just include the appropriate compat files
     with your program.

   * The tool 'ans-report.fs' (*note Standard Report::) makes it easy to
     analyse your program and determine what non-Standard words it
     relies upon.  However, it does not check whether you use standard
     words in a non-standard way.

   * Some techniques are not standardized by Standard Forth, and are
     hard or impossible to implement in a standard way, but can be
     implemented in most Forth systems easily, and usually in similar
     ways (e.g., accessing word headers).  Forth has a rich historical
     precedent for programmers taking advantage of
     implementation-dependent features of their tools (for example,
     relying on a knowledge of the dictionary structure).  Sometimes
     these techniques are necessary to extract every last bit of
     performance from the hardware, sometimes they are just a
     programming shorthand.

   * Does using a Gforth extension save more work than the porting this
     part to other Forth systems (if any) will cost?

   * Is the additional functionality worth the reduction in portability
     and the additional porting problems?

   In order to perform these considerations, you need to know what's
standard and what's not.  This manual generally states if something is
non-standard, but the authoritative source is the standard document
(http://www.taygeta.com/forth/dpans.html).  Appendix A of the Standard
(RATIONALE) provides a valuable insight into the thought processes of
the technical committee.

   Note also that portability between Forth systems is not the only
portability issue; there is also the issue of portability between
different platforms (processor/OS combinations).

10 Model
********

This chapter has yet to be written.  It will contain information, on
which internal structures you can rely.

11 Integrating Gforth into C programs
*************************************

Several people like to use Forth as scripting language for applications
that are otherwise written in C, C++, or some other language.

   The Forth system ATLAST provides facilities for embedding it into
applications; unfortunately it has several disadvantages: most
importantly, it is not based on Standard Forth, and it is apparently
dead (i.e., not developed further and not supported).  The facilities
provided by Gforth in this area are inspired by ATLAST's facilities, so
making the switch should not be hard.

   We also tried to design the interface such that it can easily be
implemented by other Forth systems, so that we may one day arrive at a
standardized interface.  Such a standard interface would allow you to
replace the Forth system without having to rewrite C code.

   You embed the Gforth interpreter by linking with the library
'libgforth.a' or 'libgforth.so' (give the compiler the option
'-lgforth', or for one of the other engines '-lgforth-fast',
'-lgforth-itc', or '-lgforth-ditc').  All global symbols in this library
that belong to the interface, have the prefix 'gforth_'; if a common
interface emerges, the functions may also be available through
'#define's with the prefix 'forth_'.

   You can include the declarations of Forth types, the functions and
variables of the interface with '#include <gforth.h>'.

   You can now run a Gforth session by either calling 'gforth_main' or
using the components:

     Cell gforth_main(int argc, char **argv, char **env)
     {
       Cell retvalue=gforth_start(argc, argv);

       if(retvalue == -56) { /* throw-code for quit */
         gforth_setwinch();        // set winch signal handler
         gforth_bootmessage();     // show boot message
         retvalue = gforth_quit(); // run quit loop
       }
       gforth_cleanup();
       gforth_printmetrics();
       // gforth_free_dict(); // if you want to restart, do this

       return retvalue;
     }

   To interact with the Forth interpreter, there's 'Xt gforth_find(Char
* name)' and 'Cell gforth_execute(Xt xt)'.

   More documentation needs to be put here.

11.1 Types
==========

'Cell', 'UCell': data stack elements.

   'Float': float stack element.

   'Address', 'Xt', 'Label': pointer typies to memory, Forth words, and
Forth instructions inside the VM.

11.2 Variables
==============

Data and FP Stack pointer.  Area sizes.  Accessing the Stacks

   'gforth_SP', 'gforth_FP'.

11.3 Functions
==============

     void *gforth_engine(Xt *, stackpointers *);
     Cell gforth_main(int argc, char **argv, char **env);
     int gforth_args(int argc, char **argv, char **path, char **imagename);
     ImageHeader* gforth_loader(char* imagename, char* path);
     user_area* gforth_stacks(Cell dsize, Cell rsize, Cell fsize, Cell lsize);
     void gforth_free_stacks(user_area* t);
     void gforth_setstacks(user_area * t);
     void gforth_free_dict();
     Cell gforth_go(Xt* ip0);
     Cell gforth_boot(int argc, char** argv, char* path);
     void gforth_bootmessage();
     Cell gforth_start(int argc, char ** argv);
     Cell gforth_quit();
     Xt gforth_find(Char * name);
     Cell gforth_execute(Xt xt);
     void gforth_cleanup();
     void gforth_printmetrics();
     void gforth_setwinch();

11.4 Signals
============

Gforth sets up signal handlers to catch exceptions and window size
changes.  This may interfere with your C program.

12 Emacs and Gforth
*******************

Gforth comes with 'gforth.el', an improved version of 'forth.el' by
Goran Rydqvist (included in the TILE package).  The improvements are:

   * A better handling of indentation.
   * A custom hilighting engine for Forth-code.
   * Comment paragraph filling ('M-q')
   * Commenting ('C-x \') and uncommenting ('C-u C-x \') of regions
   * Removal of debugging tracers ('C-x ~', *note Debugging::).
   * Support of the 'info-lookup' feature for looking up the
     documentation of a word.
   * Support for reading and writing blocks files.

   To get a basic description of these features, enter Forth mode and
type 'C-h m'.

   In addition, Gforth supports Emacs quite well: The source code
locations given in error messages, debugging output (from '~~') and
failed assertion messages are in the right format for Emacs' compilation
mode (*note Running Compilations under Emacs: (emacs)Compilation.) so
the source location corresponding to an error or other message is only a
few keystrokes away ('C-x `' for the next error, 'C-c C-c' for the error
under the cursor).

   Moreover, for words documented in this manual, you can look up the
glossary entry quickly by using 'C-h TAB' ('info-lookup-symbol', *note
Documentation Commands: (emacs)Documentation.).  This feature requires
Emacs 20.3 or later and does not work for words containing ':'.

12.1 Installing gforth.el
=========================

To make the features from 'gforth.el' available in Emacs, add the
following lines to your '.emacs' file:

     (autoload 'forth-mode "gforth.el")
     (setq auto-mode-alist (cons '("\\.fs\\'" . forth-mode)
     			    auto-mode-alist))
     (autoload 'forth-block-mode "gforth.el")
     (setq auto-mode-alist (cons '("\\.fb\\'" . forth-block-mode)
     			    auto-mode-alist))
     (add-hook 'forth-mode-hook (function (lambda ()
        ;; customize variables here:
        (setq forth-indent-level 4)
        (setq forth-minor-indent-level 2)
        (setq forth-hilight-level 3)
        ;;; ...
     )))

12.2 Emacs Tags
===============

If you 'require' 'etags.fs', a new 'TAGS' file will be produced (*note
Tags Tables: (emacs)Tags.) that contains the definitions of all words
defined afterwards.  You can then find the source for a word using
'M-.'.  Note that Emacs can use several tags files at the same time
(e.g., one for the Gforth sources and one for your program, *note
Selecting a Tags Table: (emacs)Select Tags Table.).  The TAGS file for
the preloaded words is '$(datadir)/gforth/$(VERSION)/TAGS' (e.g.,
'/usr/local/share/gforth/0.2.0/TAGS').  To get the best behaviour with
'etags.fs', you should avoid putting definitions both before and after
'require' etc., otherwise you will see the same file visited several
times by commands like 'tags-search'.

12.3 Hilighting
===============

'gforth.el' comes with a custom source hilighting engine.  When you open
a file in 'forth-mode', it will be completely parsed, assigning faces to
keywords, comments, strings etc.  While you edit the file, modified
regions get parsed and updated on-the-fly.

   Use the variable 'forth-hilight-level' to change the level of
decoration from 0 (no hilighting at all) to 3 (the default).  Even if
you set the hilighting level to 0, the parser will still work in the
background, collecting information about whether regions of text are
"compiled" or "interpreted".  Those information are required for
auto-indentation to work properly.  Set 'forth-disable-parser' to
non-nil if your computer is too slow to handle parsing.  This will have
an impact on the smartness of the auto-indentation engine, though.

   Sometimes Forth sources define new features that should be hilighted,
new control structures, defining-words etc.  You can use the variable
'forth-custom-words' to make 'forth-mode' hilight additional words and
constructs.  See the docstring of 'forth-words' for details (in Emacs,
type 'C-h v forth-words').

   'forth-custom-words' is meant to be customized in your '.emacs' file.
To customize hilighing in a file-specific manner, set
'forth-local-words' in a local-variables section at the end of your
source file (*note Variables: (emacs)Local Variables in Files.).

   Example:
     0 [IF]
        Local Variables:
        forth-local-words:
           ((("t:") definition-starter (font-lock-keyword-face . 1)
             "[ \t\n]" t name (font-lock-function-name-face . 3))
            ((";t") definition-ender (font-lock-keyword-face . 1)))
        End:
     [THEN]

12.4 Auto-Indentation
=====================

'forth-mode' automatically tries to indent lines in a smart way,
whenever you type <TAB> or break a line with 'C-m'.

   Simple customization can be achieved by setting 'forth-indent-level'
and 'forth-minor-indent-level' in your '.emacs' file.  For historical
reasons 'gforth.el' indents per default by multiples of 4 columns.  To
use the more traditional 3-column indentation, add the following lines
to your '.emacs':

     (add-hook 'forth-mode-hook (function (lambda ()
        ;; customize variables here:
        (setq forth-indent-level 3)
        (setq forth-minor-indent-level 1)
     )))

   If you want indentation to recognize non-default words, customize it
by setting 'forth-custom-indent-words' in your '.emacs'.  See the
docstring of 'forth-indent-words' for details (in Emacs, type 'C-h v
forth-indent-words').

   To customize indentation in a file-specific manner, set
'forth-local-indent-words' in a local-variables section at the end of
your source file (*note Variables: (emacs)Local Variables in Files.).

   Example:
     0 [IF]
        Local Variables:
        forth-local-indent-words:
           ((("t:") (0 . 2) (0 . 2))
            ((";t") (-2 . 0) (0 . -2)))
        End:
     [THEN]

12.5 Blocks Files
=================

'forth-mode' Autodetects blocks files by checking whether the length of
the first line exceeds 1023 characters.  It then tries to convert the
file into normal text format.  When you save the file, it will be
written to disk as normal stream-source file.

   If you want to write blocks files, use 'forth-blocks-mode'.  It
inherits all the features from 'forth-mode', plus some additions:

   * Files are written to disk in blocks file format.
   * Screen numbers are displayed in the mode line (enumerated beginning
     with the value of 'forth-block-base')
   * Warnings are displayed when lines exceed 64 characters.
   * The beginning of the currently edited block is marked with an
     overlay-arrow.

   There are some restrictions you should be aware of.  When you open a
blocks file that contains tabulator or newline characters, these
characters will be translated into spaces when the file is written back
to disk.  If tabs or newlines are encountered during blocks file
reading, an error is output to the echo area.  So have a look at the
'*Messages*' buffer, when Emacs' bell rings during reading.

   Please consult the docstring of 'forth-blocks-mode' for more
information by typing 'C-h v forth-blocks-mode').

13 Image Files
**************

An image file is a file containing an image of the Forth dictionary,
i.e., compiled Forth code and data residing in the dictionary.  By
convention, we use the extension '.fi' for image files.

13.1 Image Licensing Issues
===========================

An image created with 'gforthmi' (*note gforthmi::) or 'savesystem'
(*note Non-Relocatable Image Files::) includes the original image; i.e.,
according to copyright law it is a derived work of the original image.

   Since Gforth is distributed under the GNU GPL, the newly created
image falls under the GNU GPL, too.  In particular, this means that if
you distribute the image, you have to make all of the sources for the
image available, including those you wrote.  For details see *note GNU
General Public License (Section 3): Copying.

   If you create an image with 'cross' (*note cross.fs::), the image
contains only code compiled from the sources you gave it; if none of
these sources is under the GPL, the terms discussed above do not apply
to the image.  However, if your image needs an engine (a gforth binary)
that is under the GPL, you should make sure that you distribute both in
a way that is at most a _mere aggregation_, if you don't want the terms
of the GPL to apply to the image.

13.2 Image File Background
==========================

Gforth consists not only of primitives (in the engine), but also of
definitions written in Forth.  Since the Forth compiler itself belongs
to those definitions, it is not possible to start the system with the
engine and the Forth source alone.  Therefore we provide the Forth code
as an image file in nearly executable form.  When Gforth starts up, a C
routine loads the image file into memory, optionally relocates the
addresses, then sets up the memory (stacks etc.)  according to
information in the image file, and (finally) starts executing Forth
code.

   The default image file is 'gforth.fi' (in the 'GFORTHPATH').  You can
use a different image by using the '-i', '--image-file' or
'--appl-image' options (*note Invoking Gforth::), e.g.:

     gforth-fast -i myimage.fi

   There are different variants of image files, and they represent
different compromises between the goals of making it easy to generate
image files and making them portable.

   Win32Forth 3.4 and Mitch Bradley's 'cforth' use relocation at
run-time.  This avoids many of the complications discussed below (image
files are data relocatable without further ado), but costs performance
(one addition per memory access) and makes it difficult to pass
addresses between Forth and library calls or other programs.

   By contrast, the Gforth loader performs relocation at image load
time.  The loader also has to replace tokens that represent primitive
calls with the appropriate code-field addresses (or code addresses in
the case of direct threading).

   There are three kinds of image files, with different degrees of
relocatability: non-relocatable, data-relocatable, and fully relocatable
image files.

   These image file variants have several restrictions in common; they
are caused by the design of the image file loader:

   * There is only one segment; in particular, this means, that an image
     file cannot represent 'ALLOCATE'd memory chunks (and pointers to
     them).  The contents of the stacks are not represented, either.

   * The only kinds of relocation supported are: adding the same offset
     to all cells that represent data addresses; and replacing special
     tokens with code addresses or with pieces of machine code.

     If any complex computations involving addresses are performed, the
     results cannot be represented in the image file.  Several
     applications that use such computations come to mind:

        - Hashing addresses (or data structures which contain addresses)
          for table lookup.  If you use Gforth's 'table's or 'wordlist's
          for this purpose, you will have no problem, because the hash
          tables are recomputed automatically when the system is
          started.  If you use your own hash tables, you will have to do
          something similar.

        - There's a cute implementation of doubly-linked lists that uses
          'XOR'ed addresses.  You could represent such lists as
          singly-linked in the image file, and restore the doubly-linked
          representation on startup.(1)

        - The code addresses of run-time routines like 'docol:' cannot
          be represented in the image file (because their tokens would
          be replaced by machine code in direct threaded
          implementations).  As a workaround, compute these addresses at
          run-time with '>code-address' from the executions tokens of
          appropriate words (see the definitions of 'docol:' and friends
          in 'kernel/getdoers.fs').

        - On many architectures addresses are represented in machine
          code in some shifted or mangled form.  You cannot put 'CODE'
          words that contain absolute addresses in this form in a
          relocatable image file.  Workarounds are representing the
          address in some relative form (e.g., relative to the CFA,
          which is present in some register), or loading the address
          from a place where it is stored in a non-mangled form.

   ---------- Footnotes ----------

   (1) In my opinion, though, you should think thrice before using a
doubly-linked list (whatever implementation).

13.3 Non-Relocatable Image Files
================================

These files are simple memory dumps of the dictionary.  They are
specific to the executable (i.e., 'gforth' file) they were created with.
What's worse, they are specific to the place on which the dictionary
resided when the image was created.  Now, there is no guarantee that the
dictionary will reside at the same place the next time you start Gforth,
so there's no guarantee that a non-relocatable image will work the next
time (Gforth will complain instead of crashing, though).  Indeed, on OSs
with (enabled) address-space randomization non-relocatable images are
unlikely to work.

   You can create a non-relocatable image file with 'savesystem', e.g.:

     gforth app.fs -e "savesystem app.fi bye"

'savesystem'       "name" --         gforth       "savesystem"

13.4 Data-Relocatable Image Files
=================================

These files contain relocatable data addresses, but fixed code addresses
(instead of tokens).  They are specific to the executable (i.e.,
'gforth' file) they were created with.  Also, they disable dynamic
native code generation (typically a factor of 2 in speed).  You get a
data-relocatable image, if you pass the engine you want to use through
the 'GFORTHD' environment variable to 'gforthmi' (*note gforthmi::),
e.g.

     GFORTHD="/usr/bin/gforth-fast --no-dynamic" gforthmi myimage.fi source.fs

   Note that the '--no-dynamic' is required here for the image to work
(otherwise it will contain references to dynamically generated code that
is not saved in the image).

13.5 Fully Relocatable Image Files
==================================

These image files have relocatable data addresses, and tokens for code
addresses.  They can be used with different binaries (e.g., with and
without debugging) on the same machine, and even across machines with
the same data formats (byte order, cell size, floating point format),
and they work with dynamic native code generation.  However, they are
usually specific to the version of Gforth they were created with.  The
files 'gforth.fi' and 'kernl*.fi' are fully relocatable.

   There are two ways to create a fully relocatable image file:

13.5.1 'gforthmi'
-----------------

You will usually use 'gforthmi'.  If you want to create an image file
that contains everything you would load by invoking Gforth with 'gforth
options', you simply say:
     gforthmi file options

   E.g., if you want to create an image 'asm.fi' that has the file
'asm.fs' loaded in addition to the usual stuff, you could do it like
this:

     gforthmi asm.fi asm.fs

   'gforthmi' is implemented as a sh script and works like this: It
produces two non-relocatable images for different addresses and then
compares them.  Its output reflects this: first you see the output (if
any) of the two Gforth invocations that produce the non-relocatable
image files, then you see the output of the comparing program: It
displays the offset used for data addresses and the offset used for code
addresses; moreover, for each cell that cannot be represented correctly
in the image files, it displays a line like this:

          78DC         BFFFFA50         BFFFFA40

   This means that at offset $78dc from 'forthstart', one input image
contains $bffffa50, and the other contains $bffffa40.  Since these cells
cannot be represented correctly in the output image, you should examine
these places in the dictionary and verify that these cells are dead
(i.e., not read before they are written).

   If you insert the option '--application' in front of the image file
name, you will get an image that uses the '--appl-image' option instead
of the '--image-file' option (*note Invoking Gforth::).  When you
execute such an image on Unix (by typing the image name as command), the
Gforth engine will pass all options to the image instead of trying to
interpret them as engine options.

   If you type 'gforthmi' with no arguments, it prints some usage
instructions.

   There are a few wrinkles: After processing the passed options, the
words 'savesystem' and 'bye' must be visible.  A special doubly indirect
threaded version of the 'gforth' executable is used for creating the
non-relocatable images; you can pass the exact filename of this
executable through the environment variable 'GFORTHD' (default:
'gforth-ditc'); if you pass a version that is not doubly indirect
threaded, you will not get a fully relocatable image, but a
data-relocatable image (*note Data-Relocatable Image Files::), because
there is no code address offset).  The normal 'gforth' executable is
used for creating the relocatable image; you can pass the exact filename
of this executable through the environment variable 'GFORTH'.

13.5.2 'cross.fs'
-----------------

You can also use 'cross', a batch compiler that accepts a Forth-like
programming language (*note Cross Compiler::).

   'cross' allows you to create image files for machines with different
data sizes and data formats than the one used for generating the image
file.  You can also use it to create an application image that does not
contain a Forth compiler.  These features are bought with restrictions
and inconveniences in programming.  E.g., addresses have to be stored in
memory with special words ('A!', 'A,', etc.)  in order to make the code
relocatable.

13.6 Stack and Dictionary Sizes
===============================

If you invoke Gforth with a command line flag for the size (*note
Invoking Gforth::), the size you specify is stored in the dictionary.
If you save the dictionary with 'savesystem' or create an image with
'gforthmi', this size will become the default for the resulting image
file.  E.g., the following will create a fully relocatable version of
'gforth.fi' with a 1MB dictionary:

     gforthmi gforth.fi -m 1M

   In other words, if you want to set the default size for the
dictionary and the stacks of an image, just invoke 'gforthmi' with the
appropriate options when creating the image.

   Note: For cache-friendly behaviour (i.e., good performance), you
should make the sizes of the stacks modulo, say, 2K, somewhat different.
E.g., the default stack sizes are: data: 16k (mod 2k=0); fp: 15.5k (mod
2k=1.5k); return: 15k(mod 2k=1k); locals: 14.5k (mod 2k=0.5k).

13.7 Running Image Files
========================

You can invoke Gforth with an image file image instead of the default
'gforth.fi' with the '-i' flag (*note Invoking Gforth::):
     gforth -i image

   If your operating system supports starting scripts with a line of the
form '#! ...', you just have to type the image file name to start Gforth
with this image file (note that the file extension '.fi' is just a
convention).  I.e., to run Gforth with the image file image, you can
just type image instead of 'gforth -i image'.  This works because every
'.fi' file starts with a line of this format:

     #! /usr/local/bin/gforth-0.4.0 -i

   The file and pathname for the Gforth engine specified on this line is
the specific Gforth executable that it was built against; i.e.  the
value of the environment variable 'GFORTH' at the time that 'gforthmi'
was executed.

   You can make use of the same shell capability to make a Forth source
file into an executable.  For example, if you place this text in a file:

     #! /usr/local/bin/gforth

     ." Hello, world" CR
     bye

and then make the file executable (chmod +x in Unix), you can run it
directly from the command line.  The sequence '#!' is used in two ways;
firstly, it is recognised as a "magic sequence" by the operating
system(1) secondly it is treated as a comment character by Gforth.
Because of the second usage, a space is required between '#!' and the
path to the executable (moreover, some Unixes require the sequence '#!
/').

   Most Unix systems (including Linux) support exactly one option after
the binary name.  If that is not enough, you can use the following
trick:

     #! /bin/sh
     : ## ; 0 [if]
     exec gforth -m 10M -d 1M $0 "$@"
     [then]
     ." Hello, world" cr
     bye \ caution: this prevents (further) processing of "$@"

   First this script is interpreted as shell script, which treats the
first two lines as (mostly) comments, then performs the third line,
which invokes gforth with this script ('$0') as parameter and its
parameters as additional parameters ('"$@"').  Then this script is
interpreted as Forth script, which first defines a colon definition
'##', then ignores everything up to '[then]' and finally processes the
following Forth code.  You can also use

     #0 [if]

   in the second line, but this works only in Gforth-0.7.0 and later.

   The 'gforthmi' approach is the fastest one, the shell-based one is
slowest (needs to start an additional shell).  An additional advantage
of the shell approach is that it is unnecessary to know where the Gforth
binary resides, as long as it is in the '$PATH'.

'#!'       --         gforth       "hash-bang"
   An alias for '\'

   ---------- Footnotes ----------

   (1) The Unix kernel actually recognises two types of files:
executable files and files of data, where the data is processed by an
interpreter that is specified on the "interpreter line" -- the first line
of the file, starting with the sequence #!.  There may be a small limit
(e.g., 32) on the number of characters that may be specified on the
interpreter line.

13.8 Modifying the Startup Sequence
===================================

You can add your own initialization to the startup sequence of an image
through the deferred word ''cold'.  ''cold' is invoked just before the
image-specific command line processing (i.e., loading files and
evaluating ('-e') strings) starts.

   A sequence for adding your initialization usually looks like this:

     :noname
         Defers 'cold \ do other initialization stuff (e.g., rehashing wordlists)
         ... \ your stuff
     ; IS 'cold

   After ''cold', Gforth processes the image options (*note Invoking
Gforth::), and then it performs 'bootmessage', another deferred word.
This normally prints Gforth's startup message and does nothing else.

   So, if you want to make a turnkey image (i.e., an image for an
application instead of an extended Forth system), you can do this in two
ways:

   * If you want to do your interpretation of the OS command-line
     arguments, hook into ''cold'.  In that case you probably also want
     to build the image with 'gforthmi --application' (*note gforthmi::)
     to keep the engine from processing OS command line options.  You
     can then do your own command-line processing with 'next-arg'

   * If you want to have the normal Gforth processing of OS command-line
     arguments, hook into 'bootmessage'.

   In either case, you probably do not want the word that you execute in
these hooks to exit normally, but use 'bye' or 'throw'.  Otherwise the
Gforth startup process would continue and eventually present the Forth
command line to the user.

''cold'       --         gforth       "tick-cold"
   Hook (deferred word) for things to do right before interpreting the
OS command-line arguments.  Normally does some initializations that you
also want to perform.

'bootmessage'       --         gforth       "bootmessage"
   Hook (deferred word) executed right after interpreting the OS
command-line arguments.  Normally prints the Gforth startup message.

14 Engine
*********

Reading this chapter is not necessary for programming with Gforth.  It
may be helpful for finding your way in the Gforth sources.

   The ideas in this section have also been published in the following
papers: Bernd Paysan, 'ANS fig/GNU/??? Forth' (in German), Forth-Tagung
'93; M. Anton Ertl, 'A Portable Forth Engine
(http://www.complang.tuwien.ac.at/papers/ertl93.ps.Z)', EuroForth '93;
M. Anton Ertl, 'Threaded code variations and optimizations (extended
version) (http://www.complang.tuwien.ac.at/papers/ertl02.ps.gz)',
Forth-Tagung '02.

14.1 Portability
================

An important goal of the Gforth Project is availability across a wide
range of personal machines.  fig-Forth, and, to a lesser extent, F83,
achieved this goal by manually coding the engine in assembly language
for several then-popular processors.  This approach is very
labor-intensive and the results are short-lived due to progress in
computer architecture.

   Others have avoided this problem by coding in C, e.g., Mitch Bradley
(cforth), Mikael Patel (TILE) and Dirk Zoller (pfe).  This approach is
particularly popular for UNIX-based Forths due to the large variety of
architectures of UNIX machines.  Unfortunately an implementation in C
does not mix well with the goals of efficiency and with using
traditional techniques: Indirect or direct threading cannot be expressed
in C, and switch threading, the fastest technique available in C, is
significantly slower.  Another problem with C is that it is very
cumbersome to express double integer arithmetic.

   Fortunately, there is a portable language that does not have these
limitations: GNU C, the version of C processed by the GNU C compiler
(*note Extensions to the C Language Family: (gcc)C Extensions.).  Its
labels as values feature (*note Labels as Values: (gcc)Labels as
Values.) makes direct and indirect threading possible, its 'long long'
type (*note Double-Word Integers: (gcc)Long Long.) corresponds to
Forth's double numbers on many systems.  GNU C is freely available on
all important (and many unimportant) UNIX machines, VMS, 80386s running
MS-DOS, the Amiga, and the Atari ST, so a Forth written in GNU C can run
on all these machines.

   Writing in a portable language has the reputation of producing code
that is slower than assembly.  For our Forth engine we repeatedly looked
at the code produced by the compiler and eliminated most
compiler-induced inefficiencies by appropriate changes in the source
code.

   However, register allocation cannot be portably influenced by the
programmer, leading to some inefficiencies on register-starved machines.
We use explicit register declarations (*note Variables in Specified
Registers: (gcc)Explicit Reg Vars.) to improve the speed on some
machines.  They are turned on by using the configuration flag
'--enable-force-reg' ('gcc' switch '-DFORCE_REG').  Unfortunately, this
feature not only depends on the machine, but also on the compiler
version: On some machines some compiler versions produce incorrect code
when certain explicit register declarations are used.  So by default
'-DFORCE_REG' is not used.

14.2 Threading
==============

GNU C's labels as values extension (available since 'gcc-2.0', *note
Labels as Values: (gcc)Labels as Values.) makes it possible to take the
address of label by writing '&&label'.  This address can then be used in
a statement like 'goto *address'.  I.e., 'goto *&&x' is the same as
'goto x'.

   With this feature an indirect threaded 'NEXT' looks like:
     cfa = *ip++;
     ca = *cfa;
     goto *ca;
   For those unfamiliar with the names: 'ip' is the Forth instruction
pointer; the 'cfa' (code-field address) corresponds to Standard Forth's
execution token and points to the code field of the next word to be
executed; The 'ca' (code address) fetched from there points to some
executable code, e.g., a primitive or the colon definition handler
'docol'.

   Direct threading is even simpler:
     ca = *ip++;
     goto *ca;

   Of course we have packaged the whole thing neatly in macros called
'NEXT' and 'NEXT1' (the part of 'NEXT' after fetching the cfa).

14.2.1 Scheduling
-----------------

There is a little complication: Pipelined and superscalar processors,
i.e., RISC and some modern CISC machines can process independent
instructions while waiting for the results of an instruction.  The
compiler usually reorders (schedules) the instructions in a way that
achieves good usage of these delay slots.  However, on our first tries
the compiler did not do well on scheduling primitives.  E.g., for '+'
implemented as
     n=sp[0]+sp[1];
     sp++;
     sp[0]=n;
     NEXT;
   the 'NEXT' comes strictly after the other code, i.e., there is nearly
no scheduling.  After a little thought the problem becomes clear: The
compiler cannot know that 'sp' and 'ip' point to different addresses
(and the version of 'gcc' we used would not know it even if it was
possible), so it could not move the load of the cfa above the store to
the TOS. Indeed the pointers could be the same, if code on or very near
the top of stack were executed.  In the interest of speed we chose to
forbid this probably unused "feature" and helped the compiler in
scheduling: 'NEXT' is divided into several parts: 'NEXT_P0', 'NEXT_P1'
and 'NEXT_P2').  '+' now looks like:
     NEXT_P0;
     n=sp[0]+sp[1];
     sp++;
     NEXT_P1;
     sp[0]=n;
     NEXT_P2;

   There are various schemes that distribute the different operations of
NEXT between these parts in several ways; in general, different schemes
perform best on different processors.  We use a scheme for most
architectures that performs well for most processors of this
architecture; in the future we may switch to benchmarking and chosing
the scheme on installation time.

14.2.2 Direct or Indirect Threaded?
-----------------------------------

Threaded forth code consists of references to primitives (simple machine
code routines like '+') and to non-primitives (e.g., colon definitions,
variables, constants); for a specific class of non-primitives (e.g.,
variables) there is one code routine (e.g., 'dovar'), but each variable
needs a separate reference to its data.

   Traditionally Forth has been implemented as indirect threaded code,
because this allows to use only one cell to reference a non-primitive
(basically you point to the data, and find the code address there).

   However, threaded code in Gforth (since 0.6.0) uses two cells for
non-primitives, one for the code address, and one for the data address;
the data pointer is an immediate argument for the virtual machine
instruction represented by the code address.  We call this
_primitive-centric_ threaded code, because all code addresses point to
simple primitives.  E.g., for a variable, the code address is for 'lit'
(also used for integer literals like '99').

   Primitive-centric threaded code allows us to use (faster) direct
threading as dispatch method, completely portably (direct threaded code
in Gforth before 0.6.0 required architecture-specific code).  It also
eliminates the performance problems related to I-cache consistency that
386 implementations have with direct threaded code, and allows
additional optimizations.

   There is a catch, however: the XT parameter of 'execute' can occupy
only one cell, so how do we pass non-primitives with their code _and_
data addresses to them?  Our answer is to use indirect threaded dispatch
for 'execute' and other words that use a single-cell xt.  So, normal
threaded code in colon definitions uses direct threading, and 'execute'
and similar words, which dispatch to xts on the data stack, use indirect
threaded code.  We call this _hybrid direct/indirect_ threaded code.

   The engines 'gforth' and 'gforth-fast' use hybrid direct/indirect
threaded code.  This means that with these engines you cannot use ',' to
compile an xt.  Instead, you have to use 'compile,'.

   If you want to compile xts with ',', use 'gforth-itc'.  This engine
uses plain old indirect threaded code.  It still compiles in a
primitive-centric style, so you cannot use 'compile,' instead of ','
(e.g., for producing tables of xts with '] word1 word2 ... [').  If you
want to do that, you have to use 'gforth-itc' and execute '' , is
compile,'.  Your program can check if it is running on a hybrid
direct/indirect threaded engine or a pure indirect threaded engine with
'threading-method' (*note Threading Words::).

14.2.3 Dynamic Superinstructions
--------------------------------

The engines 'gforth' and 'gforth-fast' use another optimization: Dynamic
superinstructions with replication.  As an example, consider the
following colon definition:

     : squared ( n1 -- n2 )
       dup * ;

   Gforth compiles this into the threaded code sequence

     dup
     *
     ;s

   In normal direct threaded code there is a code address occupying one
cell for each of these primitives.  Each code address points to a
machine code routine, and the interpreter jumps to this machine code in
order to execute the primitive.  The routines for these three primitives
are (in 'gforth-fast' on the 386):

     Code dup
     ( $804B950 )  add     esi , # -4  \ $83 $C6 $FC
     ( $804B953 )  add     ebx , # 4  \ $83 $C3 $4
     ( $804B956 )  mov     dword ptr 4 [esi] , ecx  \ $89 $4E $4
     ( $804B959 )  jmp     dword ptr FC [ebx]  \ $FF $63 $FC
     end-code
     Code *
     ( $804ACC4 )  mov     eax , dword ptr 4 [esi]  \ $8B $46 $4
     ( $804ACC7 )  add     esi , # 4  \ $83 $C6 $4
     ( $804ACCA )  add     ebx , # 4  \ $83 $C3 $4
     ( $804ACCD )  imul    ecx , eax  \ $F $AF $C8
     ( $804ACD0 )  jmp     dword ptr FC [ebx]  \ $FF $63 $FC
     end-code
     Code ;s
     ( $804A693 )  mov     eax , dword ptr [edi]  \ $8B $7
     ( $804A695 )  add     edi , # 4  \ $83 $C7 $4
     ( $804A698 )  lea     ebx , dword ptr 4 [eax]  \ $8D $58 $4
     ( $804A69B )  jmp     dword ptr FC [ebx]  \ $FF $63 $FC
     end-code

   With dynamic superinstructions and replication the compiler does not
just lay down the threaded code, but also copies the machine code
fragments, usually without the jump at the end.

     ( $4057D27D )  add     esi , # -4  \ $83 $C6 $FC
     ( $4057D280 )  add     ebx , # 4  \ $83 $C3 $4
     ( $4057D283 )  mov     dword ptr 4 [esi] , ecx  \ $89 $4E $4
     ( $4057D286 )  mov     eax , dword ptr 4 [esi]  \ $8B $46 $4
     ( $4057D289 )  add     esi , # 4  \ $83 $C6 $4
     ( $4057D28C )  add     ebx , # 4  \ $83 $C3 $4
     ( $4057D28F )  imul    ecx , eax  \ $F $AF $C8
     ( $4057D292 )  mov     eax , dword ptr [edi]  \ $8B $7
     ( $4057D294 )  add     edi , # 4  \ $83 $C7 $4
     ( $4057D297 )  lea     ebx , dword ptr 4 [eax]  \ $8D $58 $4
     ( $4057D29A )  jmp     dword ptr FC [ebx]  \ $FF $63 $FC

   Only when a threaded-code control-flow change happens (e.g., in
';s'), the jump is appended.  This optimization eliminates many of these
jumps and makes the rest much more predictable.  The speedup depends on
the processor and the application; on the Athlon and Pentium III this
optimization typically produces a speedup by a factor of 2.

   The code addresses in the direct-threaded code are set to point to
the appropriate points in the copied machine code, in this example like
this:

     primitive  code address
        dup       $4057D27D
        *         $4057D286
        ;s        $4057D292

   Thus there can be threaded-code jumps to any place in this piece of
code.  This also simplifies decompilation quite a bit.

   You can disable this optimization with '--no-dynamic'.  You can use
the copying without eliminating the jumps (i.e., dynamic replication,
but without superinstructions) with '--no-super'; this gives the branch
prediction benefit alone; the effect on performance depends on the CPU;
on the Athlon and Pentium III the speedup is a little less than for
dynamic superinstructions with replication.

   One use of these options is if you want to patch the threaded code.
With superinstructions, many of the dispatch jumps are eliminated, so
patching often has no effect.  These options preserve all the dispatch
jumps.

   On some machines dynamic superinstructions are disabled by default,
because it is unsafe on these machines.  However, if you feel
adventurous, you can enable it with '--dynamic'.

14.2.4 DOES>
------------

One of the most complex parts of a Forth engine is 'dodoes', i.e., the
chunk of code executed by every word defined by a 'CREATE'...'DOES>'
pair; actually with primitive-centric code, this is only needed if the
xt of the word is 'execute'd.  The main problem here is: How to find the
Forth code to be executed, i.e.  the code after the 'DOES>' (the
'DOES>'-code)?  There are two solutions:

   In fig-Forth the code field points directly to the 'dodoes' and the
'DOES>'-code address is stored in the cell after the code address (i.e.
at 'CFA cell+').  It may seem that this solution is illegal in the
Forth-79 and all later standards, because in fig-Forth this address lies
in the body (which is illegal in these standards).  However, by making
the code field larger for all words this solution becomes legal again.
We use this approach.  Leaving a cell unused in most words is a bit
wasteful, but on the machines we are targeting this is hardly a problem.

14.3 Primitives
===============

14.3.1 Automatic Generation
---------------------------

Since the primitives are implemented in a portable language, there is no
longer any need to minimize the number of primitives.  On the contrary,
having many primitives has an advantage: speed.  In order to reduce the
number of errors in primitives and to make programming them easier, we
provide a tool, the primitive generator ('prims2x.fs' aka Vmgen, *note
Vmgen: (vmgen)Top.), that automatically generates most (and sometimes
all) of the C code for a primitive from the stack effect notation.  The
source for a primitive has the following form:

Forth-name  ( stack-effect )        category    [pronounc.]
['""'glossary entry'""']
C code
[':'
Forth code]

   The items in brackets are optional.  The category and glossary fields
are there for generating the documentation, the Forth code is there for
manual implementations on machines without GNU C. E.g., the source for
the primitive '+' is:
     +    ( n1 n2 -- n )   core    plus
     n = n1+n2;

   This looks like a specification, but in fact 'n = n1+n2' is C code.
Our primitive generation tool extracts a lot of information from the
stack effect notations(1): The number of items popped from and pushed on
the stack, their type, and by what name they are referred to in the C
code.  It then generates a C code prelude and postlude for each
primitive.  The final C code for '+' looks like this:

     I_plus: /* + ( n1 n2 -- n ) */  /* label, stack effect */
     /*  */                          /* documentation */
     NAME("+")                       /* debugging output (with -DDEBUG) */
     {
     DEF_CA                          /* definition of variable ca (indirect threading) */
     Cell n1;                        /* definitions of variables */
     Cell n2;
     Cell n;
     NEXT_P0;                        /* NEXT part 0 */
     n1 = (Cell) sp[1];              /* input */
     n2 = (Cell) TOS;
     sp += 1;                        /* stack adjustment */
     {
     n = n1+n2;                      /* C code taken from the source */
     }
     NEXT_P1;                        /* NEXT part 1 */
     TOS = (Cell)n;                  /* output */
     NEXT_P2;                        /* NEXT part 2 */
     }

   This looks long and inefficient, but the GNU C compiler optimizes
quite well and produces optimal code for '+' on, e.g., the R3000 and the
HP RISC machines: Defining the 'n's does not produce any code, and using
them as intermediate storage also adds no cost.

   There are also other optimizations that are not illustrated by this
example: assignments between simple variables are usually for free (copy
propagation).  If one of the stack items is not used by the primitive
(e.g.  in 'drop'), the compiler eliminates the load from the stack (dead
code elimination).  On the other hand, there are some things that the
compiler does not do, therefore they are performed by 'prims2x.fs': The
compiler does not optimize code away that stores a stack item to the
place where it just came from (e.g., 'over').

   While programming a primitive is usually easy, there are a few cases
where the programmer has to take the actions of the generator into
account, most notably '?dup', but also words that do not (always) fall
through to 'NEXT'.

   For more information

   ---------- Footnotes ----------

   (1) We use a one-stack notation, even though we have separate data
and floating-point stacks; The separate notation can be generated easily
from the unified notation.

14.3.2 TOS Optimization
-----------------------

An important optimization for stack machine emulators, e.g., Forth
engines, is keeping one or more of the top stack items in registers.  If
a word has the stack effect in1...inx '--' out1...outy, keeping the top
n items in registers
   * is better than keeping n-1 items, if x>=n and y>=n, due to fewer
     loads from and stores to the stack.
   * is slower than keeping n-1 items, if x<>y and x<n and y<n, due to
     additional moves between registers.

   In particular, keeping one item in a register is never a
disadvantage, if there are enough registers.  Keeping two items in
registers is a disadvantage for frequent words like '?branch',
constants, variables, literals and 'i'.  Therefore our generator only
produces code that keeps zero or one items in registers.  The generated
C code covers both cases; the selection between these alternatives is
made at C-compile time using the switch '-DUSE_TOS'.  'TOS' in the C
code for '+' is just a simple variable name in the one-item case,
otherwise it is a macro that expands into 'sp[0]'.  Note that the GNU C
compiler tries to keep simple variables like 'TOS' in registers, and it
usually succeeds, if there are enough registers.

   The primitive generator performs the TOS optimization for the
floating-point stack, too ('-DUSE_FTOS').  For floating-point operations
the benefit of this optimization is even larger: floating-point
operations take quite long on most processors, but can be performed in
parallel with other operations as long as their results are not used.
If the FP-TOS is kept in a register, this works.  If it is kept on the
stack, i.e., in memory, the store into memory has to wait for the result
of the floating-point operation, lengthening the execution time of the
primitive considerably.

   The TOS optimization makes the automatic generation of primitives a
bit more complicated.  Just replacing all occurrences of 'sp[0]' by
'TOS' is not sufficient.  There are some special cases to consider:
   * In the case of 'dup ( w -- w w )' the generator must not eliminate
     the store to the original location of the item on the stack, if the
     TOS optimization is turned on.
   * Primitives with stack effects of the form '--' out1...outy must
     store the TOS to the stack at the start.  Likewise, primitives with
     the stack effect in1...inx '--' must load the TOS from the stack at
     the end.  But for the null stack effect '--' no stores or loads
     should be generated.

14.3.3 Produced code
--------------------

To see what assembly code is produced for the primitives on your machine
with your compiler and your flag settings, type 'make engine.s' and look
at the resulting file 'engine.s'.  Alternatively, you can also
disassemble the code of primitives with 'see' on some architectures.

14.4 Performance
================

On RISCs the Gforth engine is very close to optimal; i.e., it is usually
impossible to write a significantly faster threaded-code engine.

   On register-starved machines like the 386 architecture processors
improvements are possible, because 'gcc' does not utilize the registers
as well as a human, even with explicit register declarations; e.g.,
Bernd Beuster wrote a Forth system fragment in assembly language and
hand-tuned it for the 486; this system is 1.19 times faster on the Sieve
benchmark on a 486DX2/66 than Gforth compiled with 'gcc-2.6.3' with
'-DFORCE_REG'.  The situation has improved with gcc-2.95 and
gforth-0.4.9; now the most important virtual machine registers fit in
real registers (and we can even afford to use the TOS optimization),
resulting in a speedup of 1.14 on the sieve over the earlier results.
And dynamic superinstructions provide another speedup (but only around a
factor 1.2 on the 486).

   The potential advantage of assembly language implementations is not
necessarily realized in complete Forth systems: We compared Gforth-0.5.9
(direct threaded, compiled with 'gcc-2.95.1' and '-DFORCE_REG') with
Win32Forth 1.2093 (newer versions are reportedly much faster), LMI's NT
Forth (Beta, May 1994) and Eforth (with and without peephole (aka
pinhole) optimization of the threaded code); all these systems were
written in assembly language.  We also compared Gforth with three
systems written in C: PFE-0.9.14 (compiled with 'gcc-2.6.3' with the
default configuration for Linux: '-O2 -fomit-frame-pointer -DUSE_REGS
-DUNROLL_NEXT'), ThisForth Beta (compiled with 'gcc-2.6.3 -O3
-fomit-frame-pointer'; ThisForth employs peephole optimization of the
threaded code) and TILE (compiled with 'make opt').  We benchmarked
Gforth, PFE, ThisForth and TILE on a 486DX2/66 under Linux.  Kenneth
O'Heskin kindly provided the results for Win32Forth and NT Forth on a
486DX2/66 with similar memory performance under Windows NT. Marcel
Hendrix ported Eforth to Linux, then extended it to run the benchmarks,
added the peephole optimizer, ran the benchmarks and reported the
results.

   We used four small benchmarks: the ubiquitous Sieve; bubble-sorting
and matrix multiplication come from the Stanford integer benchmarks and
have been translated into Forth by Martin Fraeman; we used the versions
included in the TILE Forth package, but with bigger data set sizes; and
a recursive Fibonacci number computation for benchmarking calling
performance.  The following table shows the time taken for the
benchmarks scaled by the time taken by Gforth (in other words, it shows
the speedup factor that Gforth achieved over the other systems).

     relative       Win32-    NT       eforth       This-
     time     Gforth Forth Forth eforth  +opt   PFE Forth  TILE
     sieve      1.00  2.16  1.78   2.16  1.32  2.46  4.96 13.37
     bubble     1.00  1.93  2.07   2.18  1.29  2.21        5.70
     matmul     1.00  1.92  1.76   1.90  0.96  2.06        5.32
     fib        1.00  2.32  2.03   1.86  1.31  2.64  4.55  6.54

   You may be quite surprised by the good performance of Gforth when
compared with systems written in assembly language.  One important
reason for the disappointing performance of these other systems is
probably that they are not written optimally for the 486 (e.g., they use
the 'lods' instruction).  In addition, Win32Forth uses a comfortable,
but costly method for relocating the Forth image: like 'cforth', it
computes the actual addresses at run time, resulting in two address
computations per 'NEXT' (*note Image File Background::).

   The speedup of Gforth over PFE, ThisForth and TILE can be easily
explained with the self-imposed restriction of the latter systems to
standard C, which makes efficient threading impossible (however, the
measured implementation of PFE uses a GNU C extension: *note Defining
Global Register Variables: (gcc)Global Reg Vars.).  Moreover, current C
compilers have a hard time optimizing other aspects of the ThisForth and
the TILE source.

   The performance of Gforth on 386 architecture processors varies
widely with the version of 'gcc' used.  E.g., 'gcc-2.5.8' failed to
allocate any of the virtual machine registers into real machine
registers by itself and would not work correctly with explicit register
declarations, giving a significantly slower engine (on a 486DX2/66
running the Sieve) than the one measured above.

   Note that there have been several releases of Win32Forth since the
release presented here, so the results presented above may have little
predictive value for the performance of Win32Forth today (results for
the current release on an i486DX2/66 are welcome).

   In 'Translating Forth to Efficient C
(http://www.complang.tuwien.ac.at/papers/ertl&maierhofer95.ps.gz)' by M.
Anton Ertl and Martin Maierhofer (presented at EuroForth '95), an
indirect threaded version of Gforth is compared with Win32Forth, NT
Forth, PFE, ThisForth, and several native code systems; that version of
Gforth is slower on a 486 than the version used here.  You can find a
newer version of these measurements at
<http://www.complang.tuwien.ac.at/forth/performance.html>.  You can find
numbers for Gforth on various machines in 'Benchres'.

15 Cross Compiler
*****************

The cross compiler is used to bootstrap a Forth kernel.  Since Gforth is
mostly written in Forth, including crucial parts like the outer
interpreter and compiler, it needs compiled Forth code to get started.
The cross compiler allows to create new images for other architectures,
even running under another Forth system.

15.1 Using the Cross Compiler
=============================

The cross compiler uses a language that resembles Forth, but isn't.  The
main difference is that you can execute Forth code after definition,
while you usually can't execute the code compiled by cross, because the
code you are compiling is typically for a different computer than the
one you are compiling on.

   The Makefile is already set up to allow you to create kernels for new
architectures with a simple make command.  The generic kernels using the
GCC compiled virtual machine are created in the normal build process
with 'make'.  To create a embedded Gforth executable for e.g.  the 8086
processor (running on a DOS machine), type

     make kernl-8086.fi

   This will use the machine description from the 'arch/8086' directory
to create a new kernel.  A machine file may look like that:

     \ Parameter for target systems                         06oct92py

         4 Constant cell             \ cell size in bytes
         2 Constant cell<<           \ cell shift to bytes
         5 Constant cell>bit         \ cell shift to bits
         8 Constant bits/char        \ bits per character
         8 Constant bits/byte        \ bits per byte [default: 8]
         8 Constant float            \ bytes per float
         8 Constant /maxalign        \ maximum alignment in bytes
     false Constant bigendian        \ byte order
     ( true=big, false=little )

     include machpc.fs               \ feature list

   This part is obligatory for the cross compiler itself, the feature
list is used by the kernel to conditionally compile some features in and
out, depending on whether the target supports these features.

   There are some optional features, if you define your own primitives,
have an assembler, or need special, nonstandard preparation to make the
boot process work.  'asm-include' includes an assembler, 'prims-include'
includes primitives, and '>boot' prepares for booting.

     : asm-include    ." Include assembler" cr
       s" arch/8086/asm.fs" included ;

     : prims-include  ." Include primitives" cr
       s" arch/8086/prim.fs" included ;

     : >boot          ." Prepare booting" cr
       s" ' boot >body into-forth 1+ !" evaluate ;

   These words are used as sort of macro during the cross compilation in
the file 'kernel/main.fs'.  Instead of using these macros, it would be
possible --- but more complicated --- to write a new kernel project file,
too.

   'kernel/main.fs' expects the machine description file name on the
stack; the cross compiler itself ('cross.fs') assumes that either
'mach-file' leaves a counted string on the stack, or 'machine-file'
leaves an address, count pair of the filename on the stack.

   The feature list is typically controlled using 'SetValue', generic
files that are used by several projects can use 'DefaultValue' instead.
Both functions work like 'Value', when the value isn't defined, but
'SetValue' works like 'to' if the value is defined, and 'DefaultValue'
doesn't set anything, if the value is defined.

     \ generic mach file for pc gforth                       03sep97jaw

     true DefaultValue NIL  \ relocating

     >ENVIRON

     true DefaultValue file          \ controls the presence of the
                                     \ file access wordset
     true DefaultValue OS            \ flag to indicate a operating system

     true DefaultValue prims         \ true: primitives are c-code

     true DefaultValue floating      \ floating point wordset is present

     true DefaultValue glocals       \ gforth locals are present
                                     \ will be loaded
     true DefaultValue dcomps        \ double number comparisons

     true DefaultValue hash          \ hashing primitives are loaded/present

     true DefaultValue xconds        \ used together with glocals,
                                     \ special conditionals supporting gforths'
                                     \ local variables
     true DefaultValue header        \ save a header information

     true DefaultValue backtrace     \ enables backtrace code

     false DefaultValue ec
     false DefaultValue crlf

     cell 2 = [IF] &32 [ELSE] &256 [THEN] KB DefaultValue kernel-size

     &16 KB          DefaultValue stack-size
     &15 KB &512 +   DefaultValue fstack-size
     &15 KB          DefaultValue rstack-size
     &14 KB &512 +   DefaultValue lstack-size

15.2 How the Cross Compiler Works
=================================

Appendix A Bugs
***************

Known bugs are described in the file 'BUGS' in the Gforth distribution.

   If you find a bug, please submit a bug report through
<https://savannah.gnu.org/bugs/?func=addbug&group=gforth>.

   * A program (or a sequence of keyboard commands) that reproduces the
     bug.
   * A description of what you think constitutes the buggy behaviour.
   * The Gforth version used (it is announced at the start of an
     interactive Gforth session).
   * The machine and operating system (on Unix systems 'uname -a' will
     report this information).
   * The installation options (you can find the configure options at the
     start of 'config.status') and configuration ('configure' output or
     'config.cache').
   * A complete list of changes (if any) you (or your installer) have
     made to the Gforth sources.

   For a thorough guide on reporting bugs read *note How to Report Bugs:
(gcc)Bug Reporting.

Appendix B Authors and Ancestors of Gforth
******************************************

B.1 Authors and Contributors
============================

The Gforth project was started in mid-1992 by Bernd Paysan and Anton
Ertl.  The third major author was Jens Wilke.  Neal Crook contributed a
lot to the manual.  Assemblers and disassemblers were contributed by
Andrew McKewan, Christian Pirker, Bernd Thallner, and Michal Revucky.
Lennart Benschop (who was one of Gforth's first users, in mid-1993) and
Stuart Ramsden inspired us with their continuous feedback.  Lennart
Benshop contributed 'glosgen.fs', while Stuart Ramsden has been working
on automatic support for calling C libraries.  Helpful comments also
came from Paul Kleinrubatscher, Christian Pirker, Dirk Zoller, Marcel
Hendrix, John Wavrik, Barrie Stott, Marc de Groot, Jorge Acerada, Bruce
Hoyt, Robert Epprecht, Dennis Ruffer and David N. Williams.  Since the
release of Gforth-0.2.1 there were also helpful comments from many
others; thank you all, sorry for not listing you here (but digging
through my mailbox to extract your names is on my to-do list).

   Gforth also owes a lot to the authors of the tools we used (GCC, CVS,
and autoconf, among others), and to the creators of the Internet: Gforth
was developed across the Internet, and its authors did not meet
physically for the first 4 years of development.

B.2 Pedigree
============

Gforth descends from bigFORTH (1993) and fig-Forth.  Of course, a
significant part of the design of Gforth was prescribed by Standard
Forth.

   Bernd Paysan wrote bigFORTH, a descendent from TurboForth, an
unreleased 32 bit native code version of VolksForth for the Atari ST,
written mostly by Dietrich Weineck.

   VolksForth was written by Klaus Schleisiek, Bernd Pennemann, Georg
Rehfeld and Dietrich Weineck for the C64 (called UltraForth there) in
the mid-80s and ported to the Atari ST in 1986.  It descends from
fig-Forth.

   A team led by Bill Ragsdale implemented fig-Forth on many processors
in 1979.  Robert Selzer and Bill Ragsdale developed the original
implementation of fig-Forth for the 6502 based on microForth.

   The principal architect of microForth was Dean Sanderson.  microForth
was FORTH, Inc.'s first off-the-shelf product.  It was developed in 1976
for the 1802, and subsequently implemented on the 8080, the 6800 and the
Z80.

   All earlier Forth systems were custom-made, usually by Charles Moore,
who discovered (as he puts it) Forth during the late 60s.  The first
full Forth existed in 1971.

   A part of the information in this section comes from 'The Evolution
of Forth (http://www.forth.com/resources/evolution/index.html)' by
Elizabeth D. Rather, Donald R. Colburn and Charles H. Moore, presented
at the HOPL-II conference and preprinted in SIGPLAN Notices 28(3), 1993.
You can find more historical and genealogical information about Forth
there.  For a more general (and graphical) Forth family tree look see
'<http://www.complang.tuwien.ac.at/forth/family-tree/>, Forth Family
Tree and Timeline'.

Appendix C Other Forth-related information
******************************************

There is an active news group (comp.lang.forth) discussing Forth
(including Gforth) and Forth-related issues.  Its FAQs
(http://www.complang.tuwien.ac.at/forth/faq/faq-general-2.html)
(frequently asked questions and their answers) contains a lot of
information on Forth.  You should read it before posting to
comp.lang.forth.

   The Forth standard is most usable in its HTML form
(http://forth-standard.org/).

Appendix D Licenses
*******************

D.1 GNU Free Documentation License
==================================

                      Version 1.2, November 2002

     Copyright © 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties---for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses terminated
     so long as such parties remain in full compliance.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.

D.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

D.2 GNU GENERAL PUBLIC LICENSE
==============================

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program---to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.

Word Index
**********

This index is a list of Forth words that have "glossary" entries within
this manual.  Each word is listed with its stack effect and wordset.

* Menu:

* ! W A-ADDR -- core:                    Memory Access.     (line  4462)
* !!FIXME!! -- unknown:                  Debugging.         (line 11854)
* !@ U1 A-ADDR -- U2 gforth-experimental: Pthreads.         (line 12197)
* # UD1 -- UD2 core:                     Formatted numeric output.
                                                            (line  8573)
* #! -- gforth:                          Running Image Files.
                                                            (line 15102)
* #> XD -- ADDR U core:                  Formatted numeric output.
                                                            (line  8597)
* #>> -- gforth:                         Formatted numeric output.
                                                            (line  8602)
* #loc NLINE NCHAR "FILE" -- unknown:    Debugging.         (line 11881)
* #s UD -- 0 0 core:                     Formatted numeric output.
                                                            (line  8581)
* #tib -- ADDR core-ext-obsolescent:     The Text Interpreter.
                                                            (line  7132)
* $! ADDR1 U $ADDR -- gforth-string:     String words.      (line  8865)
* $!len U $ADDR -- gforth-string:        String words.      (line  8875)
* $+! ADDR1 U $ADDR -- gforth-string:    String words.      (line  8889)
* $+!len U $ADDR -- ADDR unknown:        String words.      (line  8879)
* $. ADDR -- unknown:                    String words.      (line  8920)
* $? -- N gforth:                        Passing Commands to the OS.
                                                            (line 13374)
* $@ $ADDR -- ADDR2 U gforth-string:     String words.      (line  8869)
* $@len $ADDR -- U gforth-string:        String words.      (line  8872)
* $boot $ADDR -- unknown:                String words.      (line  8970)
* $del ADDR OFF U -- gforth-string:      String words.      (line  8883)
* $exec XT ADDR -- unknown:              String words.      (line  8913)
* $free $ADDR -- gforth-string:          String words.      (line  8895)
* $init $ADDR -- unknown:                String words.      (line  8898)
* $ins ADDR1 U $ADDR OFF -- gforth-string: String words.    (line  8886)
* $iter .. $ADDR CHAR XT -- .. gforth-string: String words. (line  8905)
* $over ADDR U $ADDR OFF -- unknown:     String words.      (line  8910)
* $save $ADDR -- unknown:                String words.      (line  8964)
* $saved ADDR -- unknown:                String words.      (line  8977)
* $slurp FID ADDR -- unknown:            String words.      (line  8923)
* $slurp-file ADDR1 U1 ADDR2 -- unknown: String words.      (line  8926)
* $split ADDR U CHAR -- ADDR1 U1 ADDR2 U2 gforth-string: String words.
                                                            (line  8901)
* $tmp XT -- ADDR U unknown:             String words.      (line  8917)
* $Variable -- unknown:                  String words.      (line  8981)
* $[] U $[]ADDR -- ADDR' unknown:        String words.      (line  8929)
* $[]! ADDR U N $[]ADDR -- gforth:       String words.      (line  8933)
* $[]# ADDR -- LEN gforth:               String words.      (line  8943)
* $[]+! ADDR U N $[]ADDR -- gforth:      String words.      (line  8936)
* $[]. ADDR -- unknown:                  String words.      (line  8956)
* $[]@ N $[]ADDR -- ADDR U gforth:       String words.      (line  8939)
* $[]boot ADDR -- unknown:               String words.      (line  8974)
* $[]free ADDR -- unknown:               String words.      (line  8959)
* $[]map ADDR XT -- unknown:             String words.      (line  8946)
* $[]save ADDR -- unknown:               String words.      (line  8967)
* $[]saved ADDR -- unknown:              String words.      (line  8979)
* $[]slurp FID ADDR -- unknown:          String words.      (line  8950)
* $[]slurp-file ADDR U $ADDR -- unknown: String words.      (line  8953)
* $[]Variable -- unknown:                String words.      (line  8984)
* %align ALIGN SIZE -- gforth:           Structure Glossary.
                                                            (line 10242)
* %alignment ALIGN SIZE -- ALIGN gforth: Structure Glossary.
                                                            (line 10245)
* %alloc ALIGN SIZE -- ADDR gforth:      Structure Glossary.
                                                            (line 10248)
* %allocate ALIGN SIZE -- ADDR IOR gforth: Structure Glossary.
                                                            (line 10252)
* %allot ALIGN SIZE -- ADDR gforth:      Structure Glossary.
                                                            (line 10256)
* %size ALIGN SIZE -- SIZE gforth:       Structure Glossary.
                                                            (line 10288)
* ' "NAME" -- XT core:                   Execution token.   (line  6579)
* ' "NAME" -- XT oof:                    The OOF base class.
                                                            (line 11235)
* 'cold -- gforth:                       Modifying the Startup Sequence.
                                                            (line 15151)
* 's USER TASK -- USER' gforth-experimental: Pthreads.      (line 12163)
* ( ( COMPILATION 'CCC<CLOSE-PAREN>' -- ; RUN-TIME -- core,file: Comments.
                                                            (line  3501)
* (local) ADDR U -- local:               Standard Forth locals.
                                                            (line 10000)
* ) -- gforth:                           Assertions.        (line 11927)
* * N1 N2 -- N core:                     Single precision.  (line  3570)
* */ ( N1 N2 N3 -- N4 core:              Integer division.  (line  3711)
* */f N1 N2 N3 -- N4 gforth:             Integer division.  (line  3717)
* */mod N1 N2 N3 -- N4 N5 core:          Integer division.  (line  3723)
* */modf N1 N2 N3 -- N4 N5 gforth:       Integer division.  (line  3731)
* */mods N1 N2 N3 -- N4 N5 gforth:       Integer division.  (line  3727)
* */s N1 N2 N3 -- N4 gforth:             Integer division.  (line  3714)
* + N1 N2 -- N core:                     Single precision.  (line  3559)
* +! N A-ADDR -- core:                   Memory Access.     (line  4465)
* +!@ U1 A-ADDR -- U2 gforth-experimental: Pthreads.        (line 12200)
* +DO COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                            (line  5164)
* +field UNKNOWN unknown:                Forth200x Structures.
                                                            (line 10320)
* +load I*X N -- J*X gforth:             Blocks.            (line  8383)
* +LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 N -- | LOOP-SYS2 core: Arbitrary control structures.
                                                            (line  5185)
* +ltrace -- unknown:                    Debugging.         (line 11866)
* +thru I*X N1 N2 -- J*X gforth:         Blocks.            (line  8387)
* +TO VALUE "NAME" -- gforth:            Values.            (line  5743)
* +x/string XC-ADDR1 U1 -- XC-ADDR2 U2 xchar: Xchars and Unicode.
                                                            (line  9334)
* , W -- core:                           Dictionary allocation.
                                                            (line  4382)
* - N1 N2 -- N core:                     Single precision.  (line  3566)
* --> -- gforth:                         Blocks.            (line  8391)
* -DO COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                            (line  5170)
* -LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 U -- | LOOP-SYS2 gforth: Arbitrary control structures.
                                                            (line  5188)
* -ltrace UNKNOWN unknown:               Debugging.         (line 11869)
* -rot W1 W2 W3 -- W3 W1 W2 gforth:      Data stack.        (line  4195)
* -trailing C_ADDR U1 -- C_ADDR U2 string: Memory Blocks.   (line  4688)
* -trailing-garbage XC-ADDR U1 -- ADDR U2 xchar-ext: Xchars and Unicode.
                                                            (line  9345)
* . N -- core:                           Simple numeric output.
                                                            (line  8425)
* ." COMPILATION 'CCC"' -- ; RUN-TIME -- core: Displaying characters and strings.
                                                            (line  8733)
* .( COMPILATION&INTERPRETATION "CCC<PAREN>" -- core-ext: Displaying characters and strings.
                                                            (line  8740)
* ... UNKNOWN varargs:                   Examining data.    (line 11723)
* .cover-raw -- gforth-exp:              Code Coverage.     (line 12053)
* .coverage -- gforth-exp:               Code Coverage.     (line 12040)
* .debugline NFILE NLINE -- gforth:      Debugging.         (line 11827)
* .id NT -- F83:                         Name token.        (line  6730)
* .name NT -- gforth-obsolete:           Name token.        (line  6727)
* .path PATH-ADDR -- gforth:             General Search Paths.
                                                            (line  8184)
* .r N1 N2 -- core-ext:                  Simple numeric output.
                                                            (line  8440)
* .s -- tools:                           Examining data.    (line 11725)
* .\" COMPILATION 'CCC"' -- ; RUN-TIME -- gforth: Displaying characters and strings.
                                                            (line  8746)
* / N1 N2 -- N core:                     Integer division.  (line  3664)
* /does-handler -- N gforth:             Threading Words.   (line 13320)
* /f N1 N2 -- N gforth:                  Integer division.  (line  3669)
* /f-stage1m N ADDR-RECI -- gforth:      Two-stage integer division.
                                                            (line  3816)
* /f-stage2m N1 A-RECI -- NQUOTIENT gforth: Two-stage integer division.
                                                            (line  3820)
* /l -- U gforth:                        Address arithmetic.
                                                            (line  4627)
* /mod N1 N2 -- N3 N4 core:              Integer division.  (line  3682)
* /modf N1 N2 -- N3 N4 gforth:           Integer division.  (line  3688)
* /modf-stage2m N1 A-RECI -- UMODULUS NQUOTIENT gforth: Two-stage integer division.
                                                            (line  3828)
* /mods N1 N2 -- N3 N4 gforth:           Integer division.  (line  3685)
* /s N1 N2 -- N gforth:                  Integer division.  (line  3667)
* /string C-ADDR1 U1 N -- C-ADDR2 U2 string: Memory Blocks. (line  4692)
* /w -- U gforth:                        Address arithmetic.
                                                            (line  4624)
* 0< N -- F core:                        Numeric comparison.
                                                            (line  3931)
* 0<= N -- F gforth:                     Numeric comparison.
                                                            (line  3933)
* 0<> N -- F core-ext:                   Numeric comparison.
                                                            (line  3935)
* 0= N -- F core:                        Numeric comparison.
                                                            (line  3937)
* 0> N -- F core-ext:                    Numeric comparison.
                                                            (line  3939)
* 0>= N -- F gforth:                     Numeric comparison.
                                                            (line  3941)
* 1+ N1 -- N2 core:                      Single precision.  (line  3561)
* 1- N1 -- N2 core:                      Single precision.  (line  3568)
* 1/f R1 -- R2 gforth:                   Floating Point.    (line  4073)
* 2! W1 W2 A-ADDR -- core:               Memory Access.     (line  4478)
* 2* N1 -- N2 core:                      Bitwise operations.
                                                            (line  3899)
* 2, W1 W2 -- gforth:                    Dictionary allocation.
                                                            (line  4385)
* 2/ N1 -- N2 core:                      Bitwise operations.
                                                            (line  3905)
* 2>r W1 W2 -- R:W1 R:W2 core-ext:       Return stack.      (line  4259)
* 2@ A-ADDR -- W1 W2 core:               Memory Access.     (line  4474)
* 2Constant W1 W2 "NAME" -- double:      Constants.         (line  5681)
* 2drop W1 W2 -- core:                   Data stack.        (line  4203)
* 2dup W1 W2 -- W1 W2 W1 W2 core:        Data stack.        (line  4207)
* 2field: U1 "NAME" -- U2 gforth:        Forth200x Structures.
                                                            (line 10326)
* 2Literal COMPILATION W1 W2 -- ; RUN-TIME -- W1 W2 double: Literals.
                                                            (line  6794)
* 2nip W1 W2 W3 W4 -- W3 W4 gforth:      Data stack.        (line  4205)
* 2over W1 W2 W3 W4 -- W1 W2 W3 W4 W1 W2 core: Data stack.  (line  4209)
* 2r> R:W1 R:W2 -- W1 W2 core-ext:       Return stack.      (line  4261)
* 2r@ R:W1 R:W2 -- R:W1 R:W2 W1 W2 core-ext: Return stack.  (line  4263)
* 2rdrop R:W1 R:W2 -- gforth:            Return stack.      (line  4265)
* 2rot W1 W2 W3 W4 W5 W6 -- W3 W4 W5 W6 W1 W2 double-ext: Data stack.
                                                            (line  4215)
* 2swap W1 W2 W3 W4 -- W3 W4 W1 W2 core: Data stack.        (line  4213)
* 2tuck W1 W2 W3 W4 -- W3 W4 W1 W2 W3 W4 gforth: Data stack.
                                                            (line  4211)
* 2Variable "NAME" -- double:            Variables.         (line  5644)
* : "NAME" -- oof:                       The OOF base class.
                                                            (line 11201)
* : "NAME" -- COLON-SYS core:            Colon Definitions. (line  5763)
* :: "NAME" -- oof:                      The OOF base class.
                                                            (line 11213)
* :: CLASS "NAME" -- mini-oof:           Basic Mini-OOF Usage.
                                                            (line 11330)
* :m "NAME" -- XT; RUN-TIME: OBJECT -- objects: Objects Glossary.
                                                            (line 11008)
* :noname -- XT COLON-SYS core-ext:      Anonymous Definitions.
                                                            (line  5773)
* :}d VTADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- gforth: Closures.
                                                            (line  9905)
* :}h VTADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- gforth: Closures.
                                                            (line  9909)
* :}l VTADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- gforth: Closures.
                                                            (line  9901)
* ; COMPILATION COLON-SYS -- ; RUN-TIME NEST-SYS core: Colon Definitions.
                                                            (line  5765)
* ;> -- gforth-experimental:             Closures.          (line  9957)
* ;code COMPILATION. COLON-SYS1 -- COLON-SYS2 tools-ext: Assembler Definitions.
                                                            (line 12708)
* ;m COLON-SYS --; RUN-TIME: -- objects: Objects Glossary.  (line 11012)
* ;s R:W -- gforth:                      Calls and returns. (line  5325)
* ;] COMPILE-TIME: QUOTATION-SYS -- ; RUN-TIME: -- XT gforth: Quotations.
                                                            (line  5840)
* < N1 N2 -- F core:                     Numeric comparison.
                                                            (line  3919)
* <# -- core:                            Formatted numeric output.
                                                            (line  8564)
* <<# -- gforth:                         Formatted numeric output.
                                                            (line  8567)
* <= N1 N2 -- F gforth:                  Numeric comparison.
                                                            (line  3921)
* <> N1 N2 -- F core-ext:                Numeric comparison.
                                                            (line  3923)
* <bind> CLASS SELECTOR-XT -- XT objects: Objects Glossary. (line 10914)
* <event -- gforth-experimental:         Pthreads.          (line 12225)
* <to-inst> W XT -- objects:             Objects Glossary.  (line 11053)
* <{: -- VTADDR U LATEST LATESTNT WID 0 gforth-experimental: Closures.
                                                            (line  9954)
* = N1 N2 -- F core:                     Numeric comparison.
                                                            (line  3925)
* =mkdir C-ADDR U WMODE -- WIOR gforth:  Directories.       (line  8114)
* > N1 N2 -- F core:                     Numeric comparison.
                                                            (line  3927)
* >= N1 N2 -- F gforth:                  Numeric comparison.
                                                            (line  3929)
* >addr XT -- ADDR gforth-experimental:  Closures.          (line  9913)
* >body XT -- A_ADDR core:               CREATE..DOES> details.
                                                            (line  6113)
* >code-address XT -- C_ADDR gforth:     Threading Words.   (line 13294)
* >definer XT -- DEFINER gforth:         Threading Words.   (line 13348)
* >does-code XT -- A_ADDR gforth:        Threading Words.   (line 13307)
* >float C-ADDR U -- F:... FLAG float:   Line input and conversion.
                                                            (line  9225)
* >float1 C-ADDR U C -- F:... FLAG gforth: Line input and conversion.
                                                            (line  9233)
* >in -- ADDR core:                      The Text Interpreter.
                                                            (line  7122)
* >l W -- gforth:                        Locals implementation.
                                                            (line  9775)
* >name XT -- NT|0 gforth:               Name token.        (line  6697)
* >number UD1 C-ADDR1 U1 -- UD2 C-ADDR2 U2 core: Line input and conversion.
                                                            (line  9212)
* >order WID -- gforth:                  Word Lists.        (line  7611)
* >r W -- R:W core:                      Return stack.      (line  4251)
* ? A-ADDR -- tools:                     Examining data.    (line 11756)
* ?!@ UNEW UOLD A-ADDR -- UPREV gforth-experimental: Pthreads.
                                                            (line 12204)
* ??? -- unknown:                        Debugging.         (line 11848)
* ?DO COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- | LOOP-SYS core-ext: Arbitrary control structures.
                                                            (line  5161)
* ?dup W -- S:... W core:                Data stack.        (line  4197)
* ?DUP-0=-IF COMPILATION -- ORIG ; RUN-TIME N -- N| gforth: Arbitrary control structures.
                                                            (line  5157)
* ?dup-IF COMPILATION -- ORIG ; RUN-TIME N -- N| gforth: Arbitrary control structures.
                                                            (line  5152)
* ?events -- gforth-experimental:        Pthreads.          (line 12237)
* ?LEAVE COMPILATION -- ; RUN-TIME F | F LOOP-SYS -- gforth: Arbitrary control structures.
                                                            (line  5197)
* ?of COMPILATION -- OF-SYS ; RUN-TIME F -- gforth: Arbitrary control structures.
                                                            (line  5231)
* @ A-ADDR -- W core:                    Memory Access.     (line  4459)
* @local# #NOFFSET -- W gforth:          Locals implementation.
                                                            (line  9763)
* [ -- core:                             Literals.          (line  6777)
* ['] COMPILATION. "NAME" -- ; RUN-TIME. -- XT core: Execution token.
                                                            (line  6591)
* [+LOOP] N -- gforth:                   Interpreter Directives.
                                                            (line  7416)
* [: COMPILE-TIME: -- QUOTATION-SYS FLAG COLON-SYS gforth: Quotations.
                                                            (line  5837)
* [?DO] N-LIMIT N-INDEX -- gforth:       Interpreter Directives.
                                                            (line  7408)
* [AGAIN] -- gforth:                     Interpreter Directives.
                                                            (line  7424)
* [BEGIN] -- gforth:                     Interpreter Directives.
                                                            (line  7420)
* [bind] COMPILE-TIME: "CLASS" "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                            (line 10920)
* [char] COMPILATION '<SPACES>CCC' -- ; RUN-TIME -- C core: Displaying characters and strings.
                                                            (line  8798)
* [COMP'] COMPILATION "NAME" -- ; RUN-TIME -- W XT gforth: Compilation token.
                                                            (line  6651)
* [current] COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                            (line 10953)
* [DO] N-LIMIT N-INDEX -- gforth:        Interpreter Directives.
                                                            (line  7410)
* [ELSE] -- tools-ext:                   Interpreter Directives.
                                                            (line  7382)
* [ENDIF] -- gforth:                     Interpreter Directives.
                                                            (line  7395)
* [FOR] N -- gforth:                     Interpreter Directives.
                                                            (line  7412)
* [IFDEF] "<SPACES>NAME" -- gforth:      Interpreter Directives.
                                                            (line  7398)
* [IFUNDEF] "<SPACES>NAME" -- gforth:    Interpreter Directives.
                                                            (line  7403)
* [IF] FLAG -- tools-ext:                Interpreter Directives.
                                                            (line  7374)
* [LOOP] -- gforth:                      Interpreter Directives.
                                                            (line  7414)
* [NEXT] N -- gforth:                    Interpreter Directives.
                                                            (line  7418)
* [parent] COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                            (line 11031)
* [REPEAT] -- gforth:                    Interpreter Directives.
                                                            (line  7428)
* [THEN] -- tools-ext:                   Interpreter Directives.
                                                            (line  7391)
* [to-inst] COMPILE-TIME: "NAME" -- ; RUN-TIME: W -- objects: Objects Glossary.
                                                            (line 11056)
* [UNTIL] FLAG -- gforth:                Interpreter Directives.
                                                            (line  7422)
* [WHILE] FLAG -- gforth:                Interpreter Directives.
                                                            (line  7426)
* [[ -- gforth:                          Macros.            (line  6866)
* [] N "NAME" -- oof:                    The OOF base class.
                                                            (line 11207)
* [{: -- VTADDR U LATEST LATESTNT WID 0 gforth-experimental: Closures.
                                                            (line  9890)
* \ COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- core-ext,block-ext: Comments.
                                                            (line  3508)
* \c "REST-OF-LINE" -- gforth:           Declaring C Functions.
                                                            (line 12414)
* \G COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- gforth: Comments.
                                                            (line  3514)
* ] -- core:                             Literals.          (line  6780)
* ]L COMPILATION: N -- ; RUN-TIME: -- N gforth: Literals.   (line  6788)
* ]] -- gforth:                          Macros.            (line  6863)
* {: -- VTADDR U LATEST LATESTNT WID 0 forth-2012: Standard Forth locals.
                                                            (line 10002)
* ~~ -- gforth:                          Debugging.         (line 11821)
* ~~1bt -- unknown:                      Debugging.         (line 11845)
* ~~bt -- unknown:                       Debugging.         (line 11842)
* ~~Value N "NAME" -- unknown:           Debugging.         (line 11863)
* ~~Variable "NAME" -- unknown:          Debugging.         (line 11860)
* abi-code "NAME" -- COLON-SYS gforth:   Assembler Definitions.
                                                            (line 12688)
* abort ?? -- ?? core,exception-ext:     Exception Handling.
                                                            (line  5535)
* ABORT" COMPILATION 'CCC"' -- ; RUN-TIME F -- core,exception-ext: Exception Handling.
                                                            (line  5530)
* abs N -- U core:                       Single precision.  (line  3574)
* accept C-ADDR +N1 -- +N2 core:         Line input and conversion.
                                                            (line  9193)
* action-of INTERPRETATION "NAME" -- XT; COMPILATION "NAME" -- ; RUN-TIME -- XT core-ext: Deferred Words.
                                                            (line  6346)
* activate TASK -- gforth-experimental:  Pthreads.          (line 12113)
* add-cflags C-ADDR U -- gforth:         Declaring OS-level libraries.
                                                            (line 12563)
* add-incdir C-ADDR U -- gforth:         Declaring OS-level libraries.
                                                            (line 12560)
* add-ldflags C-ADDR U -- gforth:        Declaring OS-level libraries.
                                                            (line 12566)
* add-lib C-ADDR U -- gforth:            Declaring OS-level libraries.
                                                            (line 12552)
* add-libpath C-ADDR U -- gforth:        Declaring OS-level libraries.
                                                            (line 12556)
* addr "NAME" -- ADDR gforth:            Values.            (line  5746)
* ADDRESS-UNIT-BITS -- N environment:    Address arithmetic.
                                                            (line  4621)
* after-locate -- U gforth:              Locating source code definitions.
                                                            (line 11623)
* AGAIN COMPILATION DEST -- ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                            (line  5111)
* AHEAD COMPILATION -- ORIG ; RUN-TIME -- tools-ext: Arbitrary control structures.
                                                            (line  5095)
* Alias XT "NAME" -- gforth:             Aliases.           (line  6397)
* align -- core:                         Dictionary allocation.
                                                            (line  4399)
* aligned C-ADDR -- A-ADDR core:         Address arithmetic.
                                                            (line  4574)
* allocate U -- A_ADDR WIOR memory:      Heap Allocation.   (line  4435)
* allot N -- core:                       Dictionary allocation.
                                                            (line  4368)
* also -- search-ext:                    Word Lists.        (line  7617)
* also-path C-ADDR LEN PATH-ADDR -- gforth: General Search Paths.
                                                            (line  8181)
* and W1 W2 -- W core:                   Bitwise operations.
                                                            (line  3886)
* annotate-cov -- gforth-exp:            Code Coverage.     (line 12043)
* arg U -- ADDR COUNT gforth:            OS command line arguments.
                                                            (line  9410)
* argc -- ADDR gforth:                   OS command line arguments.
                                                            (line  9424)
* argv -- ADDR gforth:                   OS command line arguments.
                                                            (line  9428)
* asptr CLASS -- oof:                    Class Declaration. (line 11261)
* asptr O "NAME" -- oof:                 The OOF base class.
                                                            (line 11205)
* assembler -- tools-ext:                Assembler Definitions.
                                                            (line 12681)
* assert( -- gforth:                     Assertions.        (line 11924)
* assert-level -- A-ADDR gforth:         Assertions.        (line 11943)
* assert0( -- gforth:                    Assertions.        (line 11911)
* assert1( -- gforth:                    Assertions.        (line 11914)
* assert2( -- gforth:                    Assertions.        (line 11917)
* assert3( -- gforth:                    Assertions.        (line 11920)
* ASSUME-LIVE ORIG -- ORIG gforth:       Where are locals visible by name?.
                                                            (line  9644)
* at-xy X Y -- unknown:                  Terminal output.   (line  8993)
* attr! ATTR -- gforth:                  Terminal output.   (line  9027)
* authors -- unknown:                    Help on Gforth.    (line   633)
* b -- gforth:                           Locating source code definitions.
                                                            (line 11609)
* barrier -- gforth-experimental:        Pthreads.          (line 12208)
* base -- A-ADDR core:                   Number Conversion. (line  7263)
* base-execute I*X XT U -- J*X gforth:   Number Conversion. (line  7259)
* before-locate -- U gforth:             Locating source code definitions.
                                                            (line 11620)
* BEGIN COMPILATION -- DEST ; RUN-TIME -- core: Arbitrary control structures.
                                                            (line  5103)
* begin-structure "NAME" -- STRUCT-SYS 0 X:structures: Forth200x Structures.
                                                            (line 10316)
* bin FAM1 -- FAM2 file:                 General files.     (line  7977)
* bind ... "CLASS" "SELECTOR" -- ... objects: Objects Glossary.
                                                            (line 10911)
* bind O "NAME" -- oof:                  The OOF base class.
                                                            (line 11224)
* bind' "CLASS" "SELECTOR" -- XT objects: Objects Glossary. (line 10917)
* bl -- C-CHAR core:                     Displaying characters and strings.
                                                            (line  8717)
* blank C-ADDR U -- string:              Memory Blocks.     (line  4665)
* blk -- ADDR block:                     Input Sources.     (line  7175)
* block U -- A-ADDR block:               Blocks.            (line  8339)
* block-included A-ADDR U -- gforth:     Blocks.            (line  8398)
* block-offset -- ADDR gforth:           Blocks.            (line  8318)
* block-position U -- block:             Blocks.            (line  8328)
* bootmessage -- gforth:                 Modifying the Startup Sequence.
                                                            (line 15156)
* bound CLASS ADDR "NAME" -- oof:        The OOF base class.
                                                            (line 11226)
* bounds ADDR U -- ADDR+U ADDR gforth:   Memory Blocks.     (line  4696)
* break" 'CCC"' -- gforth:               Singlestep Debugger.
                                                            (line 12024)
* break: -- gforth:                      Singlestep Debugger.
                                                            (line 12022)
* broken-pipe-error -- N gforth:         Pipes.             (line  9276)
* bt -- gforth:                          Locating exception source.
                                                            (line 11688)
* buffer U -- A-ADDR block:              Blocks.            (line  8346)
* bw -- gforth:                          Locating uses of a word.
                                                            (line 11661)
* bw-cover -- unknown:                   Code Coverage.     (line 12060)
* bye -- unknown:                        Leaving Gforth.    (line   619)
* c! C C-ADDR -- core:                   Memory Access.     (line  4471)
* C" COMPILATION "CCC<QUOTE>" -- ; RUN-TIME -- C-ADDR core-ext: Displaying characters and strings.
                                                            (line  8789)
* c$+! CHAR $ADDR -- gforth-string:      String words.      (line  8892)
* c, C -- core:                          Dictionary allocation.
                                                            (line  4375)
* c-callback "FORTH-NAME" "{TYPE}" "---" "TYPE" -- gforth: Callbacks.
                                                            (line 12582)
* c-function "FORTH-NAME" "C-NAME" "{TYPE}" "---" "TYPE" -- gforth: Declaring C Functions.
                                                            (line 12417)
* c-funptr "FORTH-NAME" <{>"C-TYPECAST"<}> "{TYPE}" "---" "TYPE" -- gforth: Calling C function pointers.
                                                            (line 12444)
* c-library "NAME" -- gforth:            Defining library interfaces.
                                                            (line 12516)
* c-library-name C-ADDR U -- gforth:     Defining library interfaces.
                                                            (line 12513)
* c-value "FORTH-NAME" "C-NAME" "---" "TYPE" -- gforth: Declaring C Functions.
                                                            (line 12421)
* c-variable "FORTH-NAME" "C-NAME" -- gforth: Declaring C Functions.
                                                            (line 12425)
* c@ C-ADDR -- C core:                   Memory Access.     (line  4468)
* call-c ... W -- ... gforth:            Low-Level C Interface Words.
                                                            (line 12631)
* case COMPILATION -- CASE-SYS ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                            (line  5214)
* catch ... XT -- ... N exception:       Exception Handling.
                                                            (line  5375)
* cell -- U gforth:                      Address arithmetic.
                                                            (line  4571)
* cell% -- ALIGN SIZE gforth:            Structure Glossary.
                                                            (line 10260)
* cell+ A-ADDR1 -- A-ADDR2 core:         Address arithmetic.
                                                            (line  4568)
* cells N1 -- N2 core:                   Address arithmetic.
                                                            (line  4565)
* cfalign -- gforth:                     Dictionary allocation.
                                                            (line  4418)
* cfaligned ADDR1 -- ADDR2 gforth:       Address arithmetic.
                                                            (line  4617)
* cfield: U1 "NAME" -- U2 X:structures:  Forth200x Structures.
                                                            (line 10322)
* char '<SPACES>CCC' -- C core:          Displaying characters and strings.
                                                            (line  8794)
* char% -- ALIGN SIZE gforth:            Structure Glossary.
                                                            (line 10262)
* char+ C-ADDR1 -- C-ADDR2 core:         Address arithmetic.
                                                            (line  4562)
* chars N1 -- N2 core:                   Address arithmetic.
                                                            (line  4559)
* class "NAME" -- oof:                   The OOF base class.
                                                            (line 11178)
* class CLASS -- CLASS SELECTORS VARS mini-oof: Basic Mini-OOF Usage.
                                                            (line 11318)
* class PARENT-CLASS -- ALIGN OFFSET objects: Objects Glossary.
                                                            (line 10923)
* class->map CLASS -- MAP objects:       Objects Glossary.  (line 10927)
* class-inst-size CLASS -- ADDR objects: Objects Glossary.  (line 10932)
* class-override! XT SEL-XT CLASS-MAP -- objects: Objects Glossary.
                                                            (line 10936)
* class-previous CLASS -- objects:       Objects Glossary.  (line 10939)
* class; -- oof:                         Class Declaration. (line 11287)
* class>order CLASS -- objects:          Objects Glossary.  (line 10943)
* class? O -- FLAG oof:                  The OOF base class.
                                                            (line 11182)
* clear-libs -- gforth:                  Declaring OS-level libraries.
                                                            (line 12549)
* clear-path PATH-ADDR -- gforth:        General Search Paths.
                                                            (line  8177)
* clearstack ... -- gforth:              Examining data.    (line 11748)
* clearstacks ... -- gforth:             Examining data.    (line 11751)
* close-dir WDIRID -- WIOR gforth:       Directories.       (line  8098)
* close-file WFILEID -- WIOR file:       General files.     (line  7988)
* close-pipe WFILEID -- WRETVAL WIOR gforth: Pipes.         (line  9267)
* cmove C-FROM C-TO U -- string:         Memory Blocks.     (line  4652)
* cmove> C-FROM C-TO U -- string:        Memory Blocks.     (line  4657)
* code "NAME" -- COLON-SYS tools-ext:    Assembler Definitions.
                                                            (line 12701)
* code-address! C_ADDR XT -- gforth:     Threading Words.   (line 13297)
* color-cover -- unknown:                Code Coverage.     (line 12063)
* color-execute XT X-COLOR -- ... gforth: Terminal output.  (line  9030)
* common-list LIST1 LIST2 -- LIST3 unknown: Locals implementation.
                                                            (line  9845)
* COMP' "NAME" -- W XT gforth:           Compilation token. (line  6654)
* compare C-ADDR1 U1 C-ADDR2 U2 -- N string: Memory Blocks. (line  4668)
* compile, XT -- unknown:                Macros.            (line  6953)
* compile-lp+! N -- gforth:              Locals implementation.
                                                            (line  9785)
* compile-only -- gforth:                Interpretation and Compilation Semantics.
                                                            (line  6432)
* cond "NAME" -- gforth-experimental:    Pthreads.          (line 12262)
* const-does> RUN-TIME: W*UW R*UR UW UR "NAME" -- gforth: Const-does>.
                                                            (line  6229)
* Constant W "NAME" -- core:             Constants.         (line  5676)
* construct ... OBJECT -- objects:       Objects Glossary.  (line 10946)
* context -- ADDR gforth:                Word Lists.        (line  7687)
* contof COMPILATION CASE-SYS1 OF-SYS -- CASE-SYS2 ; RUN-TIME -- gforth: Arbitrary control structures.
                                                            (line  5238)
* convert UD1 C-ADDR1 -- UD2 C-ADDR2 core-ext-obsolescent: Line input and conversion.
                                                            (line  9243)
* count C-ADDR1 -- C-ADDR2 U core:       String Formats.    (line  8703)
* cov% -- gforth-exp:                    Code Coverage.     (line 12049)
* cov+ -- gforth-exp:                    Code Coverage.     (line 12075)
* cputime -- DUSER DSYSTEM gforth:       Keeping track of Time.
                                                            (line 13396)
* cr -- core:                            Displaying characters and strings.
                                                            (line  8756)
* Create "NAME" -- core:                 CREATE.            (line  5580)
* create-file C-ADDR U WFAM -- WFILEID WIOR file: General files.
                                                            (line  7986)
* critical-section XT SEMAPHORE -- gforth-experimental: Pthreads.
                                                            (line 12187)
* CS-DROP DEST -- gforth:                Arbitrary control structures.
                                                            (line  5119)
* CS-PICK ORIG0/DEST0 ORIG1/DEST1 ... ORIGU/DESTU U -- ... ORIG0/DEST0 tools-ext: Arbitrary control structures.
                                                            (line  5115)
* CS-ROLL DESTU/ORIGU .. DEST0/ORIG0 U -- .. DEST0/ORIG0 DESTU/ORIGU tools-ext: Arbitrary control structures.
                                                            (line  5117)
* cs-vocabulary "NAME" -- gforth:        Word Lists.        (line  7608)
* cs-wordlist -- WID gforth:             Word Lists.        (line  7605)
* current -- ADDR gforth:                Word Lists.        (line  7684)
* current' "SELECTOR" -- XT objects:     Objects Glossary.  (line 10950)
* current-interface -- ADDR objects:     Objects Glossary.  (line 10956)
* d+ UD1 UD2 -- UD double:               Double precision.  (line  3602)
* d- D1 D2 -- D double:                  Double precision.  (line  3604)
* d. D -- double:                        Simple numeric output.
                                                            (line  8450)
* d.r D N -- double:                     Simple numeric output.
                                                            (line  8458)
* d0< D -- F double:                     Numeric comparison.
                                                            (line  3972)
* d0<= D -- F gforth:                    Numeric comparison.
                                                            (line  3974)
* d0<> D -- F gforth:                    Numeric comparison.
                                                            (line  3976)
* d0= D -- F double:                     Numeric comparison.
                                                            (line  3978)
* d0> D -- F gforth:                     Numeric comparison.
                                                            (line  3980)
* d0>= D -- F gforth:                    Numeric comparison.
                                                            (line  3982)
* d2* D1 -- D2 double:                   Bitwise operations.
                                                            (line  3902)
* d2/ D1 -- D2 double:                   Bitwise operations.
                                                            (line  3909)
* d< D1 D2 -- F double:                  Numeric comparison.
                                                            (line  3960)
* d<= D1 D2 -- F gforth:                 Numeric comparison.
                                                            (line  3962)
* d<> D1 D2 -- F gforth:                 Numeric comparison.
                                                            (line  3964)
* d= D1 D2 -- F double:                  Numeric comparison.
                                                            (line  3966)
* d> D1 D2 -- F gforth:                  Numeric comparison.
                                                            (line  3968)
* d>= D1 D2 -- F gforth:                 Numeric comparison.
                                                            (line  3970)
* d>f D -- R float:                      Floating Point.    (line  4015)
* d>s D -- N double:                     Double precision.  (line  3600)
* dabs D -- UD double:                   Double precision.  (line  3608)
* dbg "NAME" -- gforth:                  Singlestep Debugger.
                                                            (line 12020)
* debug-fid -- FILE-ID gforth:           Debugging.         (line 11832)
* dec. N -- gforth:                      Simple numeric output.
                                                            (line  8429)
* decimal -- core:                       Number Conversion. (line  7272)
* default-color -- X gforth:             Terminal output.   (line  9012)
* Defer "NAME" -- gforth:                Deferred Words.    (line  6332)
* defer -- oof:                          Class Declaration. (line 11266)
* defer! XT XT-DEFERRED -- gforth:       Deferred Words.    (line  6336)
* defer@ XT-DEFERRED -- XT gforth:       Deferred Words.    (line  6342)
* defers COMPILATION "NAME" -- ; RUN-TIME ... -- ... gforth: Deferred Words.
                                                            (line  6349)
* definer! DEFINER XT -- gforth:         Threading Words.   (line 13353)
* defines XT CLASS "NAME" -- mini-oof:   Basic Mini-OOF Usage.
                                                            (line 11324)
* definitions -- oof:                    The OOF base class.
                                                            (line 11180)
* definitions -- search:                 Word Lists.        (line  7575)
* delete BUFFER SIZE U -- gforth-string: String words.      (line  8857)
* delete-file C-ADDR U -- WIOR file:     General files.     (line  7990)
* Depth UNKNOWN unknown:                 Examining data.    (line 11742)
* df! R DF-ADDR -- float-ext:            Memory Access.     (line  4499)
* df@ DF-ADDR -- R float-ext:            Memory Access.     (line  4495)
* dfalign -- float-ext:                  Dictionary allocation.
                                                            (line  4411)
* dfaligned C-ADDR -- DF-ADDR float-ext: Address arithmetic.
                                                            (line  4609)
* dffield: U1 "NAME" -- U2 X:structures: Forth200x Structures.
                                                            (line 10332)
* dfloat% -- ALIGN SIZE gforth:          Structure Glossary.
                                                            (line 10264)
* dfloat+ DF-ADDR1 -- DF-ADDR2 float-ext: Address arithmetic.
                                                            (line  4606)
* dfloats N1 -- N2 float-ext:            Address arithmetic.
                                                            (line  4602)
* dict-new ... CLASS -- OBJECT objects:  Objects Glossary.  (line 10959)
* discode ADDR U -- gforth:              Common Disassembler.
                                                            (line 12846)
* dispose -- oof:                        The OOF base class.
                                                            (line 11192)
* dmax D1 D2 -- D double:                Double precision.  (line  3612)
* dmin D1 D2 -- D double:                Double precision.  (line  3610)
* dnegate D1 -- D2 double:               Double precision.  (line  3606)
* DO COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- LOOP-SYS core: Arbitrary control structures.
                                                            (line  5176)
* docol: -- ADDR gforth:                 Threading Words.   (line 13327)
* docon: -- ADDR gforth:                 Threading Words.   (line 13330)
* dodefer: -- ADDR gforth:               Threading Words.   (line 13339)
* does-code! XT1 XT2 -- gforth:          Threading Words.   (line 13316)
* DOES> COMPILATION COLON-SYS1 -- COLON-SYS2 unknown: CREATE..DOES> details.
                                                            (line  6070)
* dofield: -- ADDR gforth:               Threading Words.   (line 13342)
* DONE COMPILATION ORIG -- ; RUN-TIME -- gforth: Arbitrary control structures.
                                                            (line  5202)
* double% -- ALIGN SIZE gforth:          Structure Glossary.
                                                            (line 10266)
* douser: -- ADDR gforth:                Threading Words.   (line 13336)
* dovar: -- ADDR gforth:                 Threading Words.   (line 13333)
* dpl -- A-ADDR gforth:                  Number Conversion. (line  7252)
* drop W -- core:                        Data stack.        (line  4178)
* du/mod D U -- N U1 gforth:             Integer division.  (line  3708)
* du< UD1 UD2 -- F double-ext:           Numeric comparison.
                                                            (line  3984)
* du<= UD1 UD2 -- F gforth:              Numeric comparison.
                                                            (line  3986)
* du> UD1 UD2 -- F gforth:               Numeric comparison.
                                                            (line  3988)
* du>= UD1 UD2 -- F gforth:              Numeric comparison.
                                                            (line  3990)
* dump ADDR U -- unknown:                Examining data.    (line 11759)
* dup W -- W W core:                     Data stack.        (line  4182)
* e$, ADDR U -- gforth-experimental:     Pthreads.          (line 12247)
* early -- oof:                          Class Declaration. (line 11271)
* edit "NAME" -- gforth:                 Locating source code definitions.
                                                            (line 11629)
* edit "NAME" -- gforth <1>:             Debugging.         (line 11878)
* edit-line C-ADDR N1 N2 -- N3 gforth:   Line input and conversion.
                                                            (line  9200)
* eflit, X -- gforth-experimental:       Pthreads.          (line 12251)
* ekey -- U facility-ext:                Single-key input.  (line  9076)
* ekey>char U -- U FALSE | C TRUE facility-ext: Single-key input.
                                                            (line  9079)
* ekey>fkey U1 -- U2 F X:ekeys:          Single-key input.  (line  9082)
* ekey? -- FLAG facility-ext:            Single-key input.  (line  9086)
* elit, X -- gforth-experimental:        Pthreads.          (line 12244)
* ELSE COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- core: Arbitrary control structures.
                                                            (line  5132)
* emit C -- core:                        Displaying characters and strings.
                                                            (line  8726)
* emit-file C WFILEID -- WIOR gforth:    General files.     (line  8016)
* empty-buffer BUFFER -- gforth:         Blocks.            (line  8359)
* empty-buffers -- block-ext:            Blocks.            (line  8355)
* end-c-library -- gforth:               Defining library interfaces.
                                                            (line 12519)
* end-class ALIGN OFFSET "NAME" -- objects: Objects Glossary.
                                                            (line 10962)
* end-class CLASS SELECTORS VARS "NAME" -- mini-oof: Basic Mini-OOF Usage.
                                                            (line 11321)
* end-class-noname ALIGN OFFSET -- CLASS objects: Objects Glossary.
                                                            (line 10966)
* end-code COLON-SYS -- gforth:          Assembler Definitions.
                                                            (line 12696)
* end-interface "NAME" -- objects:       Objects Glossary.  (line 10969)
* end-interface-noname -- INTERFACE objects: Objects Glossary.
                                                            (line 10973)
* end-methods -- objects:                Objects Glossary.  (line 10976)
* end-struct ALIGN SIZE "NAME" -- gforth: Structure Glossary.
                                                            (line 10268)
* end-structure STRUCT-SYS +N -- X:structures: Forth200x Structures.
                                                            (line 10318)
* endcase COMPILATION CASE-SYS -- ; RUN-TIME X -- core-ext: Arbitrary control structures.
                                                            (line  5217)
* ENDIF COMPILATION ORIG -- ; RUN-TIME -- gforth: Arbitrary control structures.
                                                            (line  5149)
* endof COMPILATION CASE-SYS1 OF-SYS -- CASE-SYS2 ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                            (line  5234)
* endscope COMPILATION SCOPE -- ; RUN-TIME -- gforth: Where are locals visible by name?.
                                                            (line  9535)
* endtry COMPILATION -- ; RUN-TIME R:SYS1 -- gforth: Exception Handling.
                                                            (line  5420)
* endtry-iferror COMPILATION ORIG1 -- ORIG2 ; RUN-TIME R:SYS1 -- gforth: Exception Handling.
                                                            (line  5499)
* endwith -- oof:                        The OOF base class.
                                                            (line 11246)
* environment-wordlist -- WID gforth:    Environmental Queries.
                                                            (line  7815)
* environment? C-ADDR U -- FALSE / ... TRUE core: Environmental Queries.
                                                            (line  7810)
* erase ADDR U -- core-ext:              Memory Blocks.     (line  4649)
* error-color -- X gforth:               Terminal output.   (line  9015)
* evaluate ... ADDR U -- ... core,block: Input Sources.     (line  7193)
* event-loop -- gforth-experimental:     Pthreads.          (line 12240)
* event: "NAME" -- gforth-experimental:  Pthreads.          (line 12231)
* event> TASK -- gforth-experimental:    Pthreads.          (line 12228)
* exception ADDR U -- N gforth:          Exception Handling.
                                                            (line  5356)
* execute XT -- core:                    Execution token.   (line  6624)
* execute-parsing ... ADDR U XT -- ... gforth: The Input Stream.
                                                            (line  7524)
* execute-parsing-file I*X FILEID XT -- J*X gforth: The Input Stream.
                                                            (line  7540)
* execute-task XT -- TASK gforth-experimental: Pthreads.    (line 12101)
* EXIT COMPILATION -- ; RUN-TIME NEST-SYS -- core: Calls and returns.
                                                            (line  5319)
* exitm -- objects:                      Objects Glossary.  (line 10980)
* expect C-ADDR +N -- core-ext-obsolescent: Line input and conversion.
                                                            (line  9246)
* f! R F-ADDR -- float:                  Memory Access.     (line  4484)
* f* R1 R2 -- R3 float:                  Floating Point.    (line  4027)
* f** R1 R2 -- R3 float-ext:             Floating Point.    (line  4046)
* f+ R1 R2 -- R3 float:                  Floating Point.    (line  4023)
* f, F -- gforth:                        Dictionary allocation.
                                                            (line  4378)
* f- R1 R2 -- R3 float:                  Floating Point.    (line  4025)
* f. R -- float-ext:                     Simple numeric output.
                                                            (line  8467)
* f.rdp RF +NR +ND +NP -- gforth:        Simple numeric output.
                                                            (line  8499)
* f.s -- gforth:                         Examining data.    (line 11730)
* f/ R1 R2 -- R3 float:                  Floating Point.    (line  4029)
* f0< R -- F float:                      Floating Point.    (line  4142)
* f0<= R -- F gforth:                    Floating Point.    (line  4144)
* f0<> R -- F gforth:                    Floating Point.    (line  4146)
* f0= R -- F float:                      Floating Point.    (line  4148)
* f0> R -- F gforth:                     Floating Point.    (line  4150)
* f0>= R -- F gforth:                    Floating Point.    (line  4152)
* f2* R1 -- R2 gforth:                   Floating Point.    (line  4067)
* f2/ R1 -- R2 gforth:                   Floating Point.    (line  4070)
* f< R1 R2 -- F float:                   Floating Point.    (line  4134)
* f<= R1 R2 -- F gforth:                 Floating Point.    (line  4136)
* f<> R1 R2 -- F gforth:                 Floating Point.    (line  4132)
* f= R1 R2 -- F gforth:                  Floating Point.    (line  4130)
* f> R1 R2 -- F gforth:                  Floating Point.    (line  4138)
* f>= R1 R2 -- F gforth:                 Floating Point.    (line  4140)
* f>buf-rdp RF C-ADDR +NR +ND +NP -- gforth: Formatted numeric output.
                                                            (line  8613)
* f>d R -- D float:                      Floating Point.    (line  4019)
* f>l R -- gforth:                       Locals implementation.
                                                            (line  9777)
* f>s R -- N float:                      Floating Point.    (line  4017)
* f>str-rdp RF +NR +ND +NP -- C-ADDR NR gforth: Formatted numeric output.
                                                            (line  8607)
* f@ F-ADDR -- R float:                  Memory Access.     (line  4481)
* f@local# #NOFFSET -- R gforth:         Locals implementation.
                                                            (line  9765)
* fabs R1 -- R2 float-ext:               Floating Point.    (line  4033)
* facos R1 -- R2 float-ext:              Floating Point.    (line  4090)
* facosh R1 -- R2 float-ext:             Floating Point.    (line  4106)
* falign -- float:                       Dictionary allocation.
                                                            (line  4403)
* faligned C-ADDR -- F-ADDR float:       Address arithmetic.
                                                            (line  4587)
* falog R1 -- R2 float-ext:              Floating Point.    (line  4064)
* False UNKNOWN unknown:                 Boolean Flags.     (line  3528)
* fasin R1 -- R2 float-ext:              Floating Point.    (line  4088)
* fasinh R1 -- R2 float-ext:             Floating Point.    (line  4104)
* fatan R1 -- R2 float-ext:              Floating Point.    (line  4092)
* fatan2 R1 R2 -- R3 float-ext:          Floating Point.    (line  4094)
* fatanh R1 -- R2 float-ext:             Floating Point.    (line  4108)
* fconstant R "NAME" -- float:           Constants.         (line  5683)
* fcos R1 -- R2 float-ext:               Floating Point.    (line  4081)
* fcosh R1 -- R2 float-ext:              Floating Point.    (line  4100)
* fdepth -- +N float:                    Examining data.    (line 11744)
* fdrop R -- float:                      Floating point stack.
                                                            (line  4224)
* fdup R -- R R float:                   Floating point stack.
                                                            (line  4228)
* fe. R -- float-ext:                    Simple numeric output.
                                                            (line  8471)
* fexp R1 -- R2 float-ext:               Floating Point.    (line  4051)
* fexpm1 R1 -- R2 float-ext:             Floating Point.    (line  4053)
* ffield: U1 "NAME" -- U2 X:structures:  Forth200x Structures.
                                                            (line 10328)
* field ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 gforth: Structure Glossary.
                                                            (line 10273)
* field: U1 "NAME" -- U2 X:structures:   Forth200x Structures.
                                                            (line 10324)
* file-position WFILEID -- UD WIOR file: General files.     (line  8022)
* file-size WFILEID -- UD WIOR file:     General files.     (line  8026)
* file-status C-ADDR U -- WFAM WIOR file-ext: General files.
                                                            (line  8020)
* filename-match C-ADDR1 U1 C-ADDR2 U2 -- FLAG gforth: Directories.
                                                            (line  8101)
* fill C-ADDR U C -- core:               Memory Blocks.     (line  4662)
* find C-ADDR -- XT +-1 | C-ADDR 0 core,search: Word Lists. (line  7636)
* find-name C-ADDR U -- NT | 0 gforth:   Name token.        (line  6685)
* find-name-in C-ADDR U WID -- NT | 0 unknown: Name token.  (line  6689)
* fkey. U -- gforth:                     Single-key input.  (line  9175)
* FLiteral COMPILATION R -- ; RUN-TIME -- R float: Literals.
                                                            (line  6798)
* fln R1 -- R2 float-ext:                Floating Point.    (line  4056)
* flnp1 R1 -- R2 float-ext:              Floating Point.    (line  4058)
* float -- U gforth:                     Address arithmetic.
                                                            (line  4583)
* float% -- ALIGN SIZE gforth:           Structure Glossary.
                                                            (line 10280)
* float+ F-ADDR1 -- F-ADDR2 float:       Address arithmetic.
                                                            (line  4580)
* floating-stack -- N environment:       Floating point stack.
                                                            (line  4220)
* floats N1 -- N2 float:                 Address arithmetic.
                                                            (line  4577)
* flog R1 -- R2 float-ext:               Floating Point.    (line  4061)
* floor R1 -- R2 float:                  Floating Point.    (line  4039)
* FLOORED -- F environment:              Integer division.  (line  3752)
* flush -- block:                        Blocks.            (line  8374)
* flush-file WFILEID -- WIOR file-ext:   General files.     (line  8018)
* flush-icache C-ADDR U -- gforth:       Assembler Definitions.
                                                            (line 12713)
* fm/mod D1 N1 -- N2 N3 core:            Integer division.  (line  3699)
* fmax R1 R2 -- R3 float:                Floating Point.    (line  4035)
* fmin R1 R2 -- R3 float:                Floating Point.    (line  4037)
* fnegate R1 -- R2 float:                Floating Point.    (line  4031)
* fnip R1 R2 -- R2 gforth:               Floating point stack.
                                                            (line  4226)
* FOR COMPILATION -- DO-SYS ; RUN-TIME U -- LOOP-SYS gforth: Arbitrary control structures.
                                                            (line  5179)
* form unknown:                          Terminal output.   (line  8998)
* Forth -- search-ext:                   Word Lists.        (line  7622)
* forth-wordlist -- WID search:          Word Lists.        (line  7570)
* fover R1 R2 -- R1 R2 R1 float:         Floating point stack.
                                                            (line  4230)
* fp! F-ADDR -- F:... gforth:            Stack pointer manipulation.
                                                            (line  4288)
* fp. R -- float-ext:                    Simple numeric output.
                                                            (line  8479)
* fp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                            (line  4283)
* fp@ F:... -- F-ADDR gforth:            Stack pointer manipulation.
                                                            (line  4286)
* fpath -- PATH-ADDR gforth:             Source Search Paths.
                                                            (line  8156)
* fpick F:... U -- F:... R gforth:       Floating point stack.
                                                            (line  4236)
* free A_ADDR -- WIOR memory:            Heap Allocation.   (line  4442)
* frot R1 R2 R3 -- R2 R3 R1 float:       Floating point stack.
                                                            (line  4239)
* fround R1 -- R2 float:                 Floating Point.    (line  4043)
* fs. R -- gforth:                       Simple numeric output.
                                                            (line  8475)
* fsin R1 -- R2 float-ext:               Floating Point.    (line  4079)
* fsincos R1 -- R2 R3 float-ext:         Floating Point.    (line  4083)
* fsinh R1 -- R2 float-ext:              Floating Point.    (line  4098)
* fsqrt R1 -- R2 float-ext:              Floating Point.    (line  4049)
* fswap R1 R2 -- R2 R1 float:            Floating point stack.
                                                            (line  4234)
* ftan R1 -- R2 float-ext:               Floating Point.    (line  4086)
* ftanh R1 -- R2 float-ext:              Floating Point.    (line  4102)
* ftuck R1 R2 -- R2 R1 R2 gforth:        Floating point stack.
                                                            (line  4232)
* fvariable "NAME" -- float:             Variables.         (line  5646)
* f~ R1 R2 R3 -- FLAG float-ext:         Floating Point.    (line  4126)
* f~abs R1 R2 R3 -- FLAG gforth:         Floating Point.    (line  4123)
* f~rel R1 R2 R3 -- FLAG gforth:         Floating Point.    (line  4120)
* g -- gforth:                           Locating source code definitions.
                                                            (line 11613)
* get-block-fid -- WFILEID gforth:       Blocks.            (line  8324)
* get-current -- WID search:             Word Lists.        (line  7579)
* get-dir C-ADDR1 U1 -- C-ADDR2 U2 gforth: Directories.     (line  8106)
* get-order -- WIDN .. WID1 N search:    Word Lists.        (line  7585)
* get-recognizers -- XT1 .. XTN N unknown: Recognizers.     (line  7452)
* getenv C-ADDR1 U1 -- C-ADDR2 U2 gforth: Passing Commands to the OS.
                                                            (line 13378)
* gforth -- C-ADDR U gforth-environment: Environmental Queries.
                                                            (line  7819)
* gg -- gforth:                          Locating uses of a word.
                                                            (line 11666)
* halt TASK -- gforth-experimental:      Pthreads.          (line 12133)
* heap-new ... CLASS -- OBJECT objects:  Objects Glossary.  (line 10983)
* help "REST-OF-LINE" -- gforth:         Help on Gforth.    (line   626)
* help "REST-OF-LINE" -- gforth <1>:     Locating documentation.
                                                            (line 11635)
* here -- ADDR core:                     Dictionary allocation.
                                                            (line  4361)
* hex -- core-ext:                       Number Conversion. (line  7268)
* hex. U -- gforth:                      Simple numeric output.
                                                            (line  8432)
* hold CHAR -- core:                     Formatted numeric output.
                                                            (line  8587)
* how: -- oof:                           Class Declaration. (line 11284)
* i R:N -- R:N N core:                   Counted Loops.     (line  4851)
* id. NT -- gforth:                      Name token.        (line  6724)
* IF COMPILATION -- ORIG ; RUN-TIME F -- core: Arbitrary control structures.
                                                            (line  5090)
* iferror COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- gforth: Exception Handling.
                                                            (line  5423)
* immediate -- core:                     Interpretation and Compilation Semantics.
                                                            (line  6428)
* implementation INTERFACE -- objects:   Objects Glossary.  (line 10986)
* include ... "FILE" -- ... gforth:      Forth source files.
                                                            (line  7935)
* include-file I*X WFILEID -- J*X file:  Forth source files.
                                                            (line  7921)
* included I*X C-ADDR U -- J*X file:     Forth source files.
                                                            (line  7925)
* included? C-ADDR U -- F gforth:        Forth source files.
                                                            (line  7928)
* infile-execute ... XT FILE-ID -- ... gforth: Redirection. (line  8066)
* info-color -- X gforth:                Terminal output.   (line  9021)
* init ... -- oof:                       The OOF base class.
                                                            (line 11190)
* init-asm -- gforth:                    Assembler Definitions.
                                                            (line 12685)
* init-object ... CLASS OBJECT -- objects: Objects Glossary.
                                                            (line 10990)
* initiate XT TASK -- gforth-experimental: Pthreads.        (line 12120)
* insert STRING LENGTH BUFFER SIZE -- gforth-string: String words.
                                                            (line  8861)
* inst-value ALIGN1 OFFSET1 "NAME" -- ALIGN2 OFFSET2 objects: Objects Glossary.
                                                            (line 10994)
* inst-var ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 objects: Objects Glossary.
                                                            (line 10998)
* interface -- objects:                  Objects Glossary.  (line 11002)
* interpret/compile: INTERP-XT COMP-XT "NAME" -- gforth: Combined words.
                                                            (line  6461)
* invert W1 -- W2 core:                  Bitwise operations.
                                                            (line  3892)
* IS VALUE "NAME" -- core-ext:           Deferred Words.    (line  6339)
* is XT "NAME" -- oof:                   The OOF base class.
                                                            (line 11230)
* j R:W R:W1 R:W2 -- W R:W R:W1 R:W2 core: Counted Loops.   (line  4853)
* k R:W R:W1 R:W2 R:W3 R:W4 -- W R:W R:W1 R:W2 R:W3 R:W4 gforth: Counted Loops.
                                                            (line  4855)
* k-alt-mask -- U X:ekeys:               Single-key input.  (line  9149)
* k-ctrl-mask -- U X:ekeys:              Single-key input.  (line  9147)
* k-delete -- U X:ekeys:                 Single-key input.  (line  9112)
* k-down -- U X:ekeys:                   Single-key input.  (line  9097)
* k-end -- U X:ekeys:                    Single-key input.  (line  9102)
* k-f1 -- U X:ekeys:                     Single-key input.  (line  9116)
* k-f10 -- U X:ekeys:                    Single-key input.  (line  9134)
* k-f11 -- U X:ekeys:                    Single-key input.  (line  9136)
* k-f12 -- U X:ekeys:                    Single-key input.  (line  9138)
* k-f2 -- U X:ekeys:                     Single-key input.  (line  9118)
* k-f3 -- U X:ekeys:                     Single-key input.  (line  9120)
* k-f4 -- U X:ekeys:                     Single-key input.  (line  9122)
* k-f5 -- U X:ekeys:                     Single-key input.  (line  9124)
* k-f6 -- U X:ekeys:                     Single-key input.  (line  9126)
* k-f7 -- U X:ekeys:                     Single-key input.  (line  9128)
* k-f8 -- U X:ekeys:                     Single-key input.  (line  9130)
* k-f9 -- U X:ekeys:                     Single-key input.  (line  9132)
* k-home -- U X:ekeys:                   Single-key input.  (line  9099)
* k-insert -- U X:ekeys:                 Single-key input.  (line  9110)
* k-left -- U X:ekeys:                   Single-key input.  (line  9091)
* k-next -- U X:ekeys:                   Single-key input.  (line  9107)
* k-prior -- U X:ekeys:                  Single-key input.  (line  9104)
* k-right -- U X:ekeys:                  Single-key input.  (line  9093)
* k-shift-mask -- U X:ekeys:             Single-key input.  (line  9145)
* k-up -- U X:ekeys:                     Single-key input.  (line  9095)
* key -- CHAR unknown:                   Single-key input.  (line  9047)
* key-file FD -- KEY unknown:            General files.     (line  7999)
* key? -- FLAG facility:                 Single-key input.  (line  9050)
* key?-file WFILEID -- F gforth:         General files.     (line  8006)
* l -- unknown:                          Locating source code definitions.
                                                            (line 11602)
* l! W C-ADDR -- gforth:                 Memory Access.     (line  4518)
* laddr# #NOFFSET -- C-ADDR gforth:      Locals implementation.
                                                            (line  9767)
* latest -- NT gforth:                   Name token.        (line  6693)
* latestxt -- XT gforth:                 Anonymous Definitions.
                                                            (line  5792)
* LEAVE COMPILATION -- ; RUN-TIME LOOP-SYS -- core: Arbitrary control structures.
                                                            (line  5194)
* lib-error -- C-ADDR U gforth:          Low-Level C Interface Words.
                                                            (line 12628)
* lib-sym C-ADDR1 U1 U2 -- U3 gforth:    Low-Level C Interface Words.
                                                            (line 12626)
* license -- gforth:                     Help on Gforth.    (line   636)
* link "NAME" -- CLASS ADDR oof:         The OOF base class.
                                                            (line 11228)
* list U -- block-ext:                   Blocks.            (line  8331)
* list-size LIST -- U gforth-internal:   Locals implementation.
                                                            (line  9849)
* Literal COMPILATION N -- ; RUN-TIME -- N core: Literals.  (line  6783)
* ll -- gforth:                          Locating uses of a word.
                                                            (line 11671)
* load I*X U -- J*X block:               Blocks.            (line  8377)
* load-cov -- gforth-exp:                Code Coverage.     (line 12072)
* locate "NAME" -- gforth:               Locating source code definitions.
                                                            (line 11592)
* locate "NAME" -- gforth <1>:           Debugging.         (line 11874)
* lock SEMAPHORE -- gforth-experimental: Pthreads.          (line 12175)
* LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 core: Arbitrary control structures.
                                                            (line  5182)
* lp! C-ADDR -- gforth:                  Stack pointer manipulation.
                                                            (line  4302)
* lp! C-ADDR -- gforth <1>:              Locals implementation.
                                                            (line  9773)
* lp+!# #NOFFSET -- gforth:              Locals implementation.
                                                            (line  9769)
* lp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                            (line  4297)
* lp@ -- ADDR gforth:                    Stack pointer manipulation.
                                                            (line  4300)
* lshift U1 N -- U2 core:                Bitwise operations.
                                                            (line  3894)
* m* N1 N2 -- D core:                    Mixed precision.   (line  3619)
* m*/ D1 N2 U3 -- DQUOT double:          Integer division.  (line  3745)
* m+ D1 N -- D2 double:                  Mixed precision.   (line  3617)
* m: -- XT COLON-SYS; RUN-TIME: OBJECT -- objects: Objects Glossary.
                                                            (line 11005)
* marker "<SPACES> NAME" -- core-ext:    Forgetting words.  (line 11767)
* max N1 N2 -- N core:                   Single precision.  (line  3578)
* maxalign -- gforth:                    Dictionary allocation.
                                                            (line  4415)
* maxaligned ADDR1 -- ADDR2 gforth:      Address arithmetic.
                                                            (line  4613)
* maxdepth-.s -- ADDR gforth:            Examining data.    (line 11735)
* method -- oof:                         Class Declaration. (line 11274)
* method M V "NAME" -- M' V mini-oof:    Basic Mini-OOF Usage.
                                                            (line 11312)
* method XT "NAME" -- objects:           Objects Glossary.  (line 11015)
* methods CLASS -- objects:              Objects Glossary.  (line 11019)
* min N1 N2 -- N core:                   Single precision.  (line  3576)
* mkdir-parents C-ADDR U MODE -- IOR unknown: Directories.  (line  8117)
* mod N1 N2 -- N core:                   Integer division.  (line  3673)
* modf N1 N2 -- N gforth:                Integer division.  (line  3678)
* modf-stage2m N1 A-RECI -- UMODULUS gforth: Two-stage integer division.
                                                            (line  3824)
* mods N1 N2 -- N gforth:                Integer division.  (line  3676)
* move C-FROM C-TO UCOUNT -- core:       Memory Blocks.     (line  4645)
* ms N -- unknown:                       Keeping track of Time.
                                                            (line 13387)
* n -- gforth:                           Locating source code definitions.
                                                            (line 11605)
* naligned ADDR1 N -- ADDR2 gforth:      Structure Glossary.
                                                            (line 10282)
* name -- C-ADDR U gforth-obsolete:      The Input Stream.  (line  7495)
* name>comp NT -- W XT gforth:           Name token.        (line  6718)
* name>compile NT -- W XT unknown:       Name token.        (line  6708)
* name>int NT -- XT gforth:              Name token.        (line  6711)
* name>interpret NT -- XT|0 unknown:     Name token.        (line  6704)
* name>string NT -- ADDR U gforth:       Name token.        (line  6721)
* name?int NT -- XT gforth-obsolete:     Name token.        (line  6714)
* needs ... "NAME" -- ... gforth:        Forth source files.
                                                            (line  7947)
* negate N1 -- N2 core:                  Single precision.  (line  3572)
* new -- O oof:                          The OOF base class.
                                                            (line 11197)
* new CLASS -- O mini-oof:               Basic Mini-OOF Usage.
                                                            (line 11327)
* newtask STACKSIZE -- TASK gforth-experimental: Pthreads.  (line 12095)
* newtask4 DSIZE RSIZE FSIZE LSIZE -- TASK gforth-experimental: Pthreads.
                                                            (line 12107)
* new[] N -- O oof:                      The OOF base class.
                                                            (line 11199)
* NEXT COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 gforth: Arbitrary control structures.
                                                            (line  5191)
* next-arg -- ADDR U gforth:             OS command line arguments.
                                                            (line  9384)
* next-case COMPILATION CASE-SYS -- ; RUN-TIME -- gforth: Arbitrary control structures.
                                                            (line  5223)
* nextname C-ADDR U -- gforth:           Supplying names.   (line  5850)
* nip W1 W2 -- W2 core-ext:              Data stack.        (line  4180)
* noname -- gforth:                      Anonymous Definitions.
                                                            (line  5787)
* nothrow -- gforth:                     Exception Handling.
                                                            (line  5377)
* nt -- gforth:                          Locating exception source.
                                                            (line 11686)
* nw -- gforth:                          Locating uses of a word.
                                                            (line 11656)
* object -- A-ADDR mini-oof:             Basic Mini-OOF Usage.
                                                            (line 11309)
* object -- CLASS objects:               Objects Glossary.  (line 11024)
* of COMPILATION -- OF-SYS ; RUN-TIME X1 X2 -- |X1 core-ext: Arbitrary control structures.
                                                            (line  5227)
* off A-ADDR -- gforth:                  Boolean Flags.     (line  3533)
* on A-ADDR -- gforth:                   Boolean Flags.     (line  3530)
* once -- unknown:                       Debugging.         (line 11839)
* Only -- search-ext:                    Word Lists.        (line  7626)
* open-blocks C-ADDR U -- gforth:        Blocks.            (line  8312)
* open-dir C-ADDR U -- WDIRID WIOR gforth: Directories.     (line  8083)
* open-file C-ADDR U WFAM -- WFILEID WIOR file: General files.
                                                            (line  7984)
* open-lib C-ADDR1 U1 -- U2 gforth:      Low-Level C Interface Words.
                                                            (line 12624)
* open-path-file ADDR1 U1 PATH-ADDR -- WFILEID ADDR2 U2 0 | IOR gforth: General Search Paths.
                                                            (line  8171)
* open-pipe C-ADDR U WFAM -- WFILEID WIOR gforth: Pipes.    (line  9265)
* or W1 W2 -- W core:                    Bitwise operations.
                                                            (line  3888)
* order -- search-ext:                   Word Lists.        (line  7630)
* os-class -- C-ADDR U gforth-environment: Environmental Queries.
                                                            (line  7824)
* outfile-execute ... XT FILE-ID -- ... gforth: Redirection.
                                                            (line  8063)
* over W1 W2 -- W1 W2 W1 core:           Data stack.        (line  4184)
* overrides XT "SELECTOR" -- objects:    Objects Glossary.  (line 11027)
* pad -- C-ADDR core-ext:                Memory Blocks.     (line  4701)
* page -- unknown:                       Terminal output.   (line  9002)
* parse XCHAR "CCC<XCHAR>" -- C-ADDR U core-ext,xchar: The Input Stream.
                                                            (line  7483)
* parse-name "NAME" -- C-ADDR U gforth:  The Input Stream.  (line  7488)
* parse-word -- C-ADDR U gforth-obsolete: The Input Stream. (line  7491)
* pass X1 .. XN N TASK -- gforth-experimental: Pthreads.    (line 12117)
* path+ PATH-ADDR "DIR" -- gforth:       General Search Paths.
                                                            (line  8187)
* path= PATH-ADDR "DIR1|DIR2|DIR3" gforth: General Search Paths.
                                                            (line  8190)
* pause -- gforth-experimental:          Pthreads.          (line 12123)
* perform A-ADDR -- gforth:              Execution token.   (line  6627)
* pi -- R gforth:                        Floating Point.    (line  4110)
* pick S:... U -- S:... W core-ext:      Data stack.        (line  4190)
* postpone "NAME" -- core:               Macros.            (line  6840)
* postpone "NAME" -- oof:                The OOF base class.
                                                            (line 11237)
* postpone, W XT -- gforth:              Compilation token. (line  6657)
* precision -- U float-ext:              Simple numeric output.
                                                            (line  8491)
* previous -- search-ext:                Word Lists.        (line  7614)
* print OBJECT -- objects:               Objects Glossary.  (line 11034)
* printdebugdata -- gforth:              Debugging.         (line 11825)
* protected -- objects:                  Objects Glossary.  (line 11038)
* pthread_cond_broadcast COND -- R gforth-experimental: Pthreads.
                                                            (line 12267)
* pthread_cond_signal COND -- R gforth-experimental: Pthreads.
                                                            (line 12265)
* pthread_cond_timedwait COND MUTEX ABSTIME -- R gforth-experimental: Pthreads.
                                                            (line 12271)
* pthread_cond_wait COND MUTEX -- R gforth-experimental: Pthreads.
                                                            (line 12269)
* ptr "NAME" -- oof:                     The OOF base class.
                                                            (line 11203)
* ptr -- oof:                            Class Declaration. (line 11258)
* public -- objects:                     Objects Glossary.  (line 11041)
* query -- core-ext-obsolescent:         Input Sources.     (line  7199)
* quit ?? -- ?? core:                    Miscellaneous Words.
                                                            (line 13409)
* r/o -- FAM file:                       General files.     (line  7971)
* r/w -- FAM file:                       General files.     (line  7973)
* r> R:W -- W core:                      Return stack.      (line  4253)
* r@ -- W ; R: W -- W core:              Return stack.      (line  4255)
* rdrop R:W -- gforth:                   Return stack.      (line  4257)
* read-dir C-ADDR U1 WDIRID -- U2 FLAG WIOR gforth: Directories.
                                                            (line  8087)
* read-file C-ADDR U1 WFILEID -- U2 WIOR file: General files.
                                                            (line  7995)
* read-line C_ADDR U1 WFILEID -- U2 FLAG WIOR file: General files.
                                                            (line  7997)
* recurse unknown:                       Calls and returns. (line  5293)
* recursive COMPILATION -- ; RUN-TIME -- gforth: Calls and returns.
                                                            (line  5289)
* refill -- FLAG core-ext,block-ext,file-ext: The Input Stream.
                                                            (line  7507)
* rename-file C-ADDR1 U1 C-ADDR2 U2 -- WIOR file-ext: General files.
                                                            (line  7992)
* REPEAT COMPILATION ORIG DEST -- ; RUN-TIME -- core: Arbitrary control structures.
                                                            (line  5142)
* replace-word XT1 XT2 -- gforth:        Debugging.         (line 11857)
* reposition-file UD WFILEID -- WIOR file: General files.   (line  8024)
* represent R C-ADDR U -- N F1 F2 float: Formatted numeric output.
                                                            (line  8605)
* require ... "FILE" -- ... gforth:      Forth source files.
                                                            (line  7944)
* required I*X ADDR U -- I*X gforth:     Forth source files.
                                                            (line  7938)
* resize A_ADDR1 U -- A_ADDR2 WIOR memory: Heap Allocation. (line  4448)
* resize-file UD WFILEID -- WIOR file:   General files.     (line  8028)
* restart TASK -- gforth-experimental:   Pthreads.          (line 12130)
* restore COMPILATION ORIG1 -- ; RUN-TIME -- gforth: Exception Handling.
                                                            (line  5495)
* restore-input X1 .. XN N -- FLAG core-ext: Input Sources. (line  7184)
* restrict -- gforth:                    Interpretation and Compilation Semantics.
                                                            (line  6436)
* roll X0 X1 .. XN N -- X1 .. XN X0 core-ext: Data stack.   (line  4201)
* Root -- gforth:                        Word Lists.        (line  7667)
* rot W1 W2 W3 -- W2 W3 W1 core:         Data stack.        (line  4193)
* rp! A-ADDR -- gforth:                  Stack pointer manipulation.
                                                            (line  4295)
* rp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                            (line  4290)
* rp@ -- A-ADDR gforth:                  Stack pointer manipulation.
                                                            (line  4293)
* rshift U1 N -- U2 core:                Bitwise operations.
                                                            (line  3896)
* S" COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U core,file: Displaying characters and strings.
                                                            (line  8762)
* s>d N -- D core:                       Double precision.  (line  3598)
* s>f N -- R float:                      Floating Point.    (line  4013)
* s>number? ADDR U -- D F gforth:        Line input and conversion.
                                                            (line  9206)
* s>unumber? C-ADDR U -- UD FLAG gforth: Line input and conversion.
                                                            (line  9209)
* save-buffer BUFFER -- gforth:          Blocks.            (line  8372)
* save-buffers -- block:                 Blocks.            (line  8368)
* save-cov -- gforth-exp:                Code Coverage.     (line 12069)
* save-input -- X1 .. XN N core-ext:     Input Sources.     (line  7179)
* savesystem "NAME" -- gforth:           Non-Relocatable Image Files.
                                                            (line 14917)
* scope COMPILATION -- SCOPE ; RUN-TIME -- gforth: Where are locals visible by name?.
                                                            (line  9533)
* scr -- A-ADDR block-ext:               Blocks.            (line  8335)
* seal -- gforth:                        Word Lists.        (line  7677)
* search C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR3 U3 FLAG string: Memory Blocks.
                                                            (line  4682)
* search-wordlist C-ADDR COUNT WID -- 0 | XT +-1 search: Word Lists.
                                                            (line  7652)
* see "<SPACES>NAME" -- tools:           Examining compiled code.
                                                            (line 11698)
* see-code "NAME" -- gforth:             Examining compiled code.
                                                            (line 11712)
* see-code-range ADDR1 ADDR2 -- gforth:  Examining compiled code.
                                                            (line 11716)
* selector "NAME" -- objects:            Objects Glossary.  (line 11045)
* self -- O oof:                         The OOF base class.
                                                            (line 11219)
* semaphore "NAME" -- gforth-experimental: Pthreads.        (line 12172)
* set-current WID -- search:             Word Lists.        (line  7582)
* set-dir C-ADDR U -- WIOR gforth:       Directories.       (line  8110)
* set-order WIDN .. WID1 N -- search:    Word Lists.        (line  7591)
* set-precision U -- float-ext:          Simple numeric output.
                                                            (line  8495)
* set-recognizers XT1 .. XTN N unknown:  Recognizers.       (line  7456)
* sf! R SF-ADDR -- float-ext:            Memory Access.     (line  4491)
* sf@ SF-ADDR -- R float-ext:            Memory Access.     (line  4487)
* sfalign -- float-ext:                  Dictionary allocation.
                                                            (line  4407)
* sfaligned C-ADDR -- SF-ADDR float-ext: Address arithmetic.
                                                            (line  4598)
* sffield: U1 "NAME" -- U2 X:structures: Forth200x Structures.
                                                            (line 10330)
* sfloat% -- ALIGN SIZE gforth:          Structure Glossary.
                                                            (line 10286)
* sfloat+ SF-ADDR1 -- SF-ADDR2 float-ext: Address arithmetic.
                                                            (line  4595)
* sfloats N1 -- N2 float-ext:            Address arithmetic.
                                                            (line  4591)
* sh "..." -- gforth:                    Passing Commands to the OS.
                                                            (line 13363)
* shift-args -- gforth:                  OS command line arguments.
                                                            (line  9418)
* sign N -- core:                        Formatted numeric output.
                                                            (line  8591)
* simple-fkey-string U1 -- C-ADDR U gforth: Single-key input.
                                                            (line  9180)
* simple-see "NAME" -- gforth:           Examining compiled code.
                                                            (line 11707)
* simple-see-range ADDR1 ADDR2 -- gforth: Examining compiled code.
                                                            (line 11710)
* sl@ C-ADDR -- N gforth:                Memory Access.     (line  4512)
* SLiteral COMPILATION C-ADDR1 U ; RUN-TIME -- C-ADDR2 U string: Literals.
                                                            (line  6802)
* slurp-fid FID -- ADDR U gforth:        General files.     (line  8033)
* slurp-file C-ADDR1 U1 -- C-ADDR2 U2 gforth: General files.
                                                            (line  8030)
* sm/rem D1 N1 -- N2 N3 core:            Integer division.  (line  3702)
* source -- ADDR U core:                 The Text Interpreter.
                                                            (line  7127)
* source-id -- 0 | -1 | FILEID core-ext,file: Input Sources.
                                                            (line  7170)
* sourcefilename -- C-ADDR U gforth:     Forth source files.
                                                            (line  7950)
* sourceline# -- U gforth:               Forth source files.
                                                            (line  7957)
* sp! A-ADDR -- S:... gforth:            Stack pointer manipulation.
                                                            (line  4281)
* sp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                            (line  4276)
* sp@ S:... -- A-ADDR gforth:            Stack pointer manipulation.
                                                            (line  4279)
* space -- core:                         Displaying characters and strings.
                                                            (line  8720)
* spaces U -- core:                      Displaying characters and strings.
                                                            (line  8723)
* span -- C-ADDR core-ext-obsolescent:   Line input and conversion.
                                                            (line  9254)
* stacksize -- N gforth-experimental:    Pthreads.          (line 12104)
* stacksize4 -- DSIZE FSIZE RSIZE LSIZE gforth-experimental: Pthreads.
                                                            (line 12110)
* staged/-divisor ADDR1 -- ADDR2 gforth: Two-stage integer division.
                                                            (line  3855)
* staged/-size -- U gforth:              Two-stage integer division.
                                                            (line  3813)
* static -- oof:                         Class Declaration. (line 11279)
* stderr -- WFILEID gforth:              General files.     (line  8042)
* stdin -- WFILEID gforth:               General files.     (line  8036)
* stdout -- WFILEID gforth:              General files.     (line  8039)
* stop -- gforth-experimental:           Pthreads.          (line 12136)
* stop-ns TIMEOUT -- gforth-experimental: Pthreads.         (line 12139)
* str< C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.    (line  4677)
* str= C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.    (line  4675)
* string-prefix? C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.
                                                            (line  4679)
* struct -- ALIGN SIZE gforth:           Structure Glossary.
                                                            (line 10291)
* sub-list? LIST1 LIST2 -- F unknown:    Locals implementation.
                                                            (line  9847)
* success-color -- X gforth:             Terminal output.   (line  9024)
* super "NAME" -- oof:                   The OOF base class.
                                                            (line 11215)
* sw@ C-ADDR -- N gforth:                Memory Access.     (line  4503)
* swap W1 W2 -- W2 W1 core:              Data stack.        (line  4188)
* system C-ADDR U -- gforth:             Passing Commands to the OS.
                                                            (line 13367)
* s\" COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U gforth: Displaying characters and strings.
                                                            (line  8774)
* table -- WID gforth:                   Word Lists.        (line  7602)
* task STACKSIZE "NAME" -- gforth-experimental: Pthreads.   (line 12098)
* THEN COMPILATION ORIG -- ; RUN-TIME -- core: Arbitrary control structures.
                                                            (line  5099)
* this -- OBJECT objects:                Objects Glossary.  (line 11050)
* threading-method -- N gforth:          Threading Words.   (line 13290)
* throw Y1 .. YM NERROR -- Y1 .. YM / Z1 .. ZN ERROR exception: Exception Handling.
                                                            (line  5335)
* thru I*X N1 N2 -- J*X block-ext:       Blocks.            (line  8380)
* tib -- ADDR core-ext-obsolescent:      The Text Interpreter.
                                                            (line  7130)
* time&date -- NSEC NMIN NHOUR NDAY NMONTH NYEAR facility-ext: Keeping track of Time.
                                                            (line 13389)
* TO VALUE "NAME" -- core-ext:           Values.            (line  5740)
* to-this OBJECT -- objects:             Objects Glossary.  (line 11059)
* toupper C1 -- C2 gforth:               Displaying characters and strings.
                                                            (line  8729)
* True UNKNOWN unknown:                  Boolean Flags.     (line  3526)
* try COMPILATION -- ORIG ; RUN-TIME -- R:SYS1 gforth: Exception Handling.
                                                            (line  5417)
* tt U -- gforth:                        Locating exception source.
                                                            (line 11684)
* tuck W1 W2 -- W2 W1 W2 core-ext:       Data stack.        (line  4186)
* type C-ADDR U -- core:                 Displaying characters and strings.
                                                            (line  8749)
* typewhite ADDR N -- gforth:            Displaying characters and strings.
                                                            (line  8753)
* u*/ U1 U2 U3 -- U4 gforth:             Integer division.  (line  3720)
* u*/mod U1 U2 U3 -- U4 U5 gforth:       Integer division.  (line  3735)
* U+DO COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                            (line  5167)
* U-DO COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                            (line  5173)
* u. U -- core:                          Simple numeric output.
                                                            (line  8436)
* u.r U N -- core-ext:                   Simple numeric output.
                                                            (line  8446)
* u/ U1 U2 -- U gforth:                  Integer division.  (line  3671)
* u/-stage1m U ADDR-RECI -- gforth:      Two-stage integer division.
                                                            (line  3833)
* u/-stage2m U1 A-RECI -- UQUOTIENT gforth: Two-stage integer division.
                                                            (line  3837)
* u/mod U1 U2 -- U3 U4 gforth:           Integer division.  (line  3691)
* u/mod-stage2m U1 A-RECI -- UMODULUS UQUOTIENT gforth: Two-stage integer division.
                                                            (line  3845)
* u< U1 U2 -- F core:                    Numeric comparison.
                                                            (line  3943)
* u<= U1 U2 -- F gforth:                 Numeric comparison.
                                                            (line  3945)
* u> U1 U2 -- F core-ext:                Numeric comparison.
                                                            (line  3947)
* u>= U1 U2 -- F gforth:                 Numeric comparison.
                                                            (line  3949)
* ud. UD -- gforth:                      Simple numeric output.
                                                            (line  8454)
* ud.r UD N -- gforth:                   Simple numeric output.
                                                            (line  8463)
* ud/mod UD1 U2 -- UREM UDQUOT gforth:   Integer division.  (line  3741)
* UDefer "NAME" -- gforth-experimental:  Pthreads.          (line 12157)
* ul@ C-ADDR -- U gforth:                Memory Access.     (line  4515)
* um* U1 U2 -- UD core:                  Mixed precision.   (line  3621)
* um/mod UD U1 -- U2 U3 core:            Integer division.  (line  3705)
* umod U1 U2 -- U gforth:                Integer division.  (line  3680)
* umod-stage2m U1 A-RECI -- UMODULUS gforth: Two-stage integer division.
                                                            (line  3841)
* under+ N1 N2 N3 -- N N2 gforth:        Single precision.  (line  3563)
* unlock SEMAPHORE -- gforth-experimental: Pthreads.        (line 12178)
* unloop R:W1 R:W2 -- core:              Arbitrary control structures.
                                                            (line  5200)
* UNREACHABLE -- gforth:                 Where are locals visible by name?.
                                                            (line  9571)
* UNTIL COMPILATION DEST -- ; RUN-TIME F -- core: Arbitrary control structures.
                                                            (line  5107)
* unused -- U core-ext:                  Dictionary allocation.
                                                            (line  4364)
* update -- block:                       Blocks.            (line  8361)
* updated? N -- F gforth:                Blocks.            (line  8364)
* use "FILE" -- gforth:                  Blocks.            (line  8315)
* User "NAME" -- gforth:                 Variables.         (line  5653)
* user' 'USER' -- N gforth-experimental: Pthreads.          (line 12160)
* utime -- DTIME gforth:                 Keeping track of Time.
                                                            (line 13393)
* UValue "NAME" -- unknown:              Pthreads.          (line 12155)
* uw@ C-ADDR -- U gforth:                Memory Access.     (line  4506)
* Value W "NAME" -- core-ext:            Values.            (line  5738)
* var M V SIZE "NAME" -- M V' mini-oof:  Basic Mini-OOF Usage.
                                                            (line 11315)
* var SIZE -- oof:                       Class Declaration. (line 11253)
* Variable "NAME" -- core:               Variables.         (line  5642)
* view "NAME" -- gforth:                 Debugging.         (line 11872)
* vlist -- gforth:                       Word Lists.        (line  7664)
* Vocabulary "NAME" -- gforth:           Word Lists.        (line  7672)
* vocs -- gforth:                        Word Lists.        (line  7681)
* w! W C-ADDR -- gforth:                 Memory Access.     (line  4509)
* w/o -- FAM file:                       General files.     (line  7975)
* WARNING" COMPILATION 'CCC"' -- ; RUN-TIME F -- gforth: Exception Handling.
                                                            (line  5542)
* warning-color -- X gforth:             Terminal output.   (line  9018)
* warnings -- ADDR gforth:               Exception Handling.
                                                            (line  5545)
* where "NAME" -- gforth:                Locating uses of a word.
                                                            (line 11649)
* whereg "NAME" -- gforth:               Locating uses of a word.
                                                            (line 11676)
* WHILE COMPILATION DEST -- ORIG DEST ; RUN-TIME F -- core: Arbitrary control structures.
                                                            (line  5137)
* with O -- oof:                         The OOF base class.
                                                            (line 11244)
* within U1 U2 U3 -- F core-ext:         Numeric comparison.
                                                            (line  3951)
* word CHAR "<CHARS>CCC<CHAR>-- C-ADDR core: The Input Stream.
                                                            (line  7498)
* wordlist -- WID search:                Word Lists.        (line  7599)
* words -- tools:                        Word Lists.        (line  7660)
* write-file C-ADDR U1 WFILEID -- WIOR file: General files. (line  8012)
* write-line C-ADDR U WFILEID -- IOR file: General files.   (line  8014)
* WTF?? -- unknown:                      Debugging.         (line 11851)
* ww U -- gforth:                        Locating uses of a word.
                                                            (line 11653)
* x-size XC-ADDR U1 -- U2 xchar:         Xchars and Unicode.
                                                            (line  9310)
* x-width XC-ADDR U -- N xchar-ext:      Xchars and Unicode.
                                                            (line  9350)
* xc!+? XC XC-ADDR1 U1 -- XC-ADDR2 U2 F xchar-ext: Xchars and Unicode.
                                                            (line  9318)
* xc-size XC -- U xchar-ext:             Xchars and Unicode.
                                                            (line  9307)
* xc@+ XC-ADDR1 -- XC-ADDR2 XC xchar-ext: Xchars and Unicode.
                                                            (line  9314)
* xchar+ XC-ADDR1 -- XC-ADDR2 xchar-ext: Xchars and Unicode.
                                                            (line  9326)
* xchar- XC-ADDR1 -- XC-ADDR2 xchar-ext: Xchars and Unicode.
                                                            (line  9330)
* xchar-encoding -- ADDR U xchar-ext:    Xchars and Unicode.
                                                            (line  9365)
* xemit XC -- xchar-ext:                 Xchars and Unicode.
                                                            (line  9360)
* xkey -- XC xchar-ext:                  Xchars and Unicode.
                                                            (line  9356)
* xor W1 W2 -- W core:                   Bitwise operations.
                                                            (line  3890)
* xt-new ... CLASS XT -- OBJECT objects: Objects Glossary.  (line 11062)
* xt-see XT -- gforth:                   Examining compiled code.
                                                            (line 11704)
* x\string- XC-ADDR1 U1 -- XC-ADDR1 U2 xchar: Xchars and Unicode.
                                                            (line  9339)

Concept and Word Index
**********************

Not all entries listed in this index are present verbatim in the text.
This index also duplicates, in abbreviated form, all of the words listed
in the Word Index (only the names are listed for the words here).

* Menu:

* !:                                     Memory Access.     (line  4462)
* !!FIXME!!:                             Debugging.         (line 11854)
* !@:                                    Pthreads.          (line 12197)
* ", stack item type:                    Notation.          (line  3462)
* #:                                     Formatted numeric output.
                                                            (line  8573)
* #!:                                    Running Image Files.
                                                            (line 15102)
* #-prefix for decimal numbers:          Number Conversion. (line  7276)
* #>:                                    Formatted numeric output.
                                                            (line  8597)
* #>>:                                   Formatted numeric output.
                                                            (line  8602)
* #loc:                                  Debugging.         (line 11881)
* #s:                                    Formatted numeric output.
                                                            (line  8581)
* #tib:                                  The Text Interpreter.
                                                            (line  7132)
* $!:                                    String words.      (line  8865)
* $!len:                                 String words.      (line  8875)
* $+!:                                   String words.      (line  8889)
* $+!len:                                String words.      (line  8879)
* $-prefix for hexadecimal numbers:      Number Conversion. (line  7276)
* $.:                                    String words.      (line  8920)
* $?:                                    Passing Commands to the OS.
                                                            (line 13374)
* $@:                                    String words.      (line  8869)
* $@len:                                 String words.      (line  8872)
* $boot:                                 String words.      (line  8970)
* $del:                                  String words.      (line  8883)
* $exec:                                 String words.      (line  8913)
* $free:                                 String words.      (line  8895)
* $init:                                 String words.      (line  8898)
* $ins:                                  String words.      (line  8886)
* $iter:                                 String words.      (line  8905)
* $over:                                 String words.      (line  8910)
* $save:                                 String words.      (line  8964)
* $saved:                                String words.      (line  8977)
* $slurp:                                String words.      (line  8923)
* $slurp-file:                           String words.      (line  8926)
* $split:                                String words.      (line  8901)
* $tmp:                                  String words.      (line  8917)
* $Variable:                             String words.      (line  8981)
* $[]:                                   String words.      (line  8929)
* $[]!:                                  String words.      (line  8933)
* $[]#:                                  String words.      (line  8943)
* $[]+!:                                 String words.      (line  8936)
* $[].:                                  String words.      (line  8956)
* $[]@:                                  String words.      (line  8939)
* $[]boot:                               String words.      (line  8974)
* $[]free:                               String words.      (line  8959)
* $[]map:                                String words.      (line  8946)
* $[]save:                               String words.      (line  8967)
* $[]saved:                              String words.      (line  8979)
* $[]slurp:                              String words.      (line  8950)
* $[]slurp-file:                         String words.      (line  8953)
* $[]Variable:                           String words.      (line  8984)
* %-prefix for binary numbers:           Number Conversion. (line  7276)
* %align:                                Structure Glossary.
                                                            (line 10242)
* %alignment:                            Structure Glossary.
                                                            (line 10245)
* %alloc:                                Structure Glossary.
                                                            (line 10248)
* %allocate:                             Structure Glossary.
                                                            (line 10252)
* %allot:                                Structure Glossary.
                                                            (line 10256)
* %size:                                 Structure Glossary.
                                                            (line 10288)
* &-prefix for decimal numbers:          Number Conversion. (line  7276)
* ':                                     Execution token.   (line  6579)
* ' <1>:                                 The OOF base class.
                                                            (line 11235)
* '-prefix for character strings:        Number Conversion. (line  7276)
* 'cold:                                 Modifying the Startup Sequence.
                                                            (line 15151)
* 's:                                    Pthreads.          (line 12163)
* (:                                     Comments.          (line  3501)
* (local):                               Standard Forth locals.
                                                            (line 10000)
* ):                                     Assertions.        (line 11927)
* *:                                     Single precision.  (line  3570)
* */:                                    Integer division.  (line  3711)
* */f:                                   Integer division.  (line  3717)
* */mod:                                 Integer division.  (line  3723)
* */modf:                                Integer division.  (line  3731)
* */mods:                                Integer division.  (line  3727)
* */s:                                   Integer division.  (line  3714)
* +:                                     Single precision.  (line  3559)
* +!:                                    Memory Access.     (line  4465)
* +!@:                                   Pthreads.          (line 12200)
* +DO:                                   Arbitrary control structures.
                                                            (line  5164)
* +field:                                Forth200x Structures.
                                                            (line 10320)
* +load:                                 Blocks.            (line  8383)
* +LOOP:                                 Arbitrary control structures.
                                                            (line  5185)
* +ltrace:                               Debugging.         (line 11866)
* +thru:                                 Blocks.            (line  8387)
* +TO:                                   Values.            (line  5743)
* +x/string:                             Xchars and Unicode.
                                                            (line  9334)
* ,:                                     Dictionary allocation.
                                                            (line  4382)
* -:                                     Single precision.  (line  3566)
* --, tutorial:                           Stack-Effect Comments Tutorial.
                                                            (line  1169)
* -->:                                   Blocks.            (line  8391)
* --appl-image, command-line option:      Invoking Gforth.   (line   440)
* --application, gforthmi option:         gforthmi.          (line 14980)
* --clear-dictionary, command-line option: Invoking Gforth.  (line   519)
* -d, command-line option:               Invoking Gforth.   (line   467)
* --data-stack-size, command-line option: Invoking Gforth.   (line   467)
* --debug, command-line option:           Invoking Gforth.   (line   508)
* -DFORCE_REG:                           Portability.       (line 15211)
* --dictionary-size, command-line option: Invoking Gforth.   (line   457)
* --die-on-signal, command-line-option:   Invoking Gforth.   (line   523)
* -DO:                                   Arbitrary control structures.
                                                            (line  5170)
* -DUSE_FTOS:                            TOS Optimization.  (line 15553)
* -DUSE_NO_FTOS:                         TOS Optimization.  (line 15553)
* -DUSE_NO_TOS:                          TOS Optimization.  (line 15541)
* -DUSE_TOS:                             TOS Optimization.  (line 15541)
* --dynamic command-line option:          Dynamic Superinstructions.
                                                            (line 15424)
* --dynamic, command-line option:         Invoking Gforth.   (line   532)
* --enable-force-reg, configuration flag: Portability.       (line 15211)
* -f, command-line option:               Invoking Gforth.   (line   477)
* --fp-stack-size, command-line option:   Invoking Gforth.   (line   477)
* -h, command-line option:               Invoking Gforth.   (line   500)
* --help, command-line option:            Invoking Gforth.   (line   500)
* -i, command-line option:               Invoking Gforth.   (line   435)
* -i, invoke image file:                 Running Image Files.
                                                            (line 15040)
* --image file, invoke image file:        Running Image Files.
                                                            (line 15040)
* --image-file, command-line option:      Invoking Gforth.   (line   435)
* -l, command-line option:               Invoking Gforth.   (line   483)
* --locals-stack-size, command-line option: Invoking Gforth. (line   483)
* -LOOP:                                 Arbitrary control structures.
                                                            (line  5188)
* -ltrace:                               Debugging.         (line 11869)
* -m, command-line option:               Invoking Gforth.   (line   457)
* --no-dynamic command-line option:       Dynamic Superinstructions.
                                                            (line 15412)
* --no-dynamic, command-line option:      Invoking Gforth.   (line   532)
* --no-offset-im, command-line option:    Invoking Gforth.   (line   516)
* --no-super command-line option:         Dynamic Superinstructions.
                                                            (line 15412)
* --no-super, command-line option:        Invoking Gforth.   (line   537)
* --offset-image, command-line option:    Invoking Gforth.   (line   511)
* -p, command-line option:               Invoking Gforth.   (line   446)
* --path, command-line option:            Invoking Gforth.   (line   446)
* --print-metrics, command-line option:   Invoking Gforth.   (line   575)
* -r, command-line option:               Invoking Gforth.   (line   472)
* --return-stack-size, command-line option: Invoking Gforth. (line   472)
* -rot:                                  Data stack.        (line  4195)
* --ss-greedy, command-line option:       Invoking Gforth.   (line   562)
* --ss-min-..., command-line options:     Invoking Gforth.   (line   548)
* --ss-number, command-line option:       Invoking Gforth.   (line   542)
* -trailing:                             Memory Blocks.     (line  4688)
* -trailing-garbage:                     Xchars and Unicode.
                                                            (line  9345)
* -v, command-line option:               Invoking Gforth.   (line   504)
* --version, command-line option:         Invoking Gforth.   (line   504)
* --vm-commit, command-line option:       Invoking Gforth.   (line   488)
* .:                                     Simple numeric output.
                                                            (line  8425)
* .":                                    Displaying characters and strings.
                                                            (line  8733)
* .", how it works:                      How does that work?.
                                                            (line  3232)
* .(:                                    Displaying characters and strings.
                                                            (line  8740)
* ...:                                   Examining data.    (line 11723)
* .cover-raw:                            Code Coverage.     (line 12053)
* .coverage:                             Code Coverage.     (line 12040)
* .debugline:                            Debugging.         (line 11827)
* .emacs:                                Installing gforth.el.
                                                            (line 14652)
* .fi files:                             Image Files.       (line 14789)
* .gforth-history:                       Command-line editing.
                                                            (line   674)
* .id:                                   Name token.        (line  6730)
* .name:                                 Name token.        (line  6727)
* .path:                                 General Search Paths.
                                                            (line  8184)
* .r:                                    Simple numeric output.
                                                            (line  8440)
* .s:                                    Examining data.    (line 11725)
* .\":                                   Displaying characters and strings.
                                                            (line  8746)
* /:                                     Integer division.  (line  3664)
* /does-handler:                         Threading Words.   (line 13320)
* /f:                                    Integer division.  (line  3669)
* /f-stage1m:                            Two-stage integer division.
                                                            (line  3816)
* /f-stage2m:                            Two-stage integer division.
                                                            (line  3820)
* /l:                                    Address arithmetic.
                                                            (line  4627)
* /mod:                                  Integer division.  (line  3682)
* /modf:                                 Integer division.  (line  3688)
* /modf-stage2m:                         Two-stage integer division.
                                                            (line  3828)
* /mods:                                 Integer division.  (line  3685)
* /s:                                    Integer division.  (line  3667)
* /string:                               Memory Blocks.     (line  4692)
* /w:                                    Address arithmetic.
                                                            (line  4624)
* 0<:                                    Numeric comparison.
                                                            (line  3931)
* 0<=:                                   Numeric comparison.
                                                            (line  3933)
* 0<>:                                   Numeric comparison.
                                                            (line  3935)
* 0=:                                    Numeric comparison.
                                                            (line  3937)
* 0>:                                    Numeric comparison.
                                                            (line  3939)
* 0>=:                                   Numeric comparison.
                                                            (line  3941)
* 0x-prefix for hexadecimal numbers:     Number Conversion. (line  7276)
* 1+:                                    Single precision.  (line  3561)
* 1-:                                    Single precision.  (line  3568)
* 1/f:                                   Floating Point.    (line  4073)
* 2!:                                    Memory Access.     (line  4478)
* 2*:                                    Bitwise operations.
                                                            (line  3899)
* 2,:                                    Dictionary allocation.
                                                            (line  4385)
* 2/:                                    Bitwise operations.
                                                            (line  3905)
* 2>r:                                   Return stack.      (line  4259)
* 2@:                                    Memory Access.     (line  4474)
* 2Constant:                             Constants.         (line  5681)
* 2drop:                                 Data stack.        (line  4203)
* 2dup:                                  Data stack.        (line  4207)
* 2field::                               Forth200x Structures.
                                                            (line 10326)
* 2Literal:                              Literals.          (line  6794)
* 2nip:                                  Data stack.        (line  4205)
* 2over:                                 Data stack.        (line  4209)
* 2r>:                                   Return stack.      (line  4261)
* 2r@:                                   Return stack.      (line  4263)
* 2rdrop:                                Return stack.      (line  4265)
* 2rot:                                  Data stack.        (line  4215)
* 2swap:                                 Data stack.        (line  4213)
* 2tuck:                                 Data stack.        (line  4211)
* 2Variable:                             Variables.         (line  5644)
* ::                                     Colon Definitions. (line  5763)
* : <1>:                                 The OOF base class.
                                                            (line 11201)
* :, passing data across:                Literals.          (line  6807)
* :::                                    The OOF base class.
                                                            (line 11213)
* :: <1>:                                Basic Mini-OOF Usage.
                                                            (line 11330)
* :m:                                    Objects Glossary.  (line 11008)
* :noname:                               Anonymous Definitions.
                                                            (line  5773)
* :}d:                                   Closures.          (line  9905)
* :}h:                                   Closures.          (line  9909)
* :}l:                                   Closures.          (line  9901)
* ;:                                     Colon Definitions. (line  5765)
* ;>:                                    Closures.          (line  9957)
* ;code:                                 Assembler Definitions.
                                                            (line 12708)
* ;CODE ending sequence:                 programming-idef.  (line 14367)
* ;CODE, name not defined via CREATE:    programming-ambcond.
                                                            (line 14399)
* ;CODE, processing input:               programming-idef.  (line 14370)
* ;m:                                    Objects Glossary.  (line 11012)
* ;m usage:                              Method conveniences.
                                                            (line 10628)
* ;s:                                    Calls and returns. (line  5325)
* ;]:                                    Quotations.        (line  5840)
* <:                                     Numeric comparison.
                                                            (line  3919)
* <#:                                    Formatted numeric output.
                                                            (line  8564)
* <<#:                                   Formatted numeric output.
                                                            (line  8567)
* <=:                                    Numeric comparison.
                                                            (line  3921)
* <>:                                    Numeric comparison.
                                                            (line  3923)
* <bind>:                                Objects Glossary.  (line 10914)
* <event:                                Pthreads.          (line 12225)
* <to-inst>:                             Objects Glossary.  (line 11053)
* <{::                                   Closures.          (line  9954)
* =:                                     Numeric comparison.
                                                            (line  3925)
* =mkdir:                                Directories.       (line  8114)
* >:                                     Numeric comparison.
                                                            (line  3927)
* >=:                                    Numeric comparison.
                                                            (line  3929)
* >addr:                                 Closures.          (line  9913)
* >body:                                 CREATE..DOES> details.
                                                            (line  6113)
* >BODY of non-CREATEd words:            core-ambcond.      (line 13991)
* >code-address:                         Threading Words.   (line 13294)
* >definer:                              Threading Words.   (line 13348)
* >does-code:                            Threading Words.   (line 13307)
* >float:                                Line input and conversion.
                                                            (line  9225)
* >float1:                               Line input and conversion.
                                                            (line  9233)
* >in:                                   The Text Interpreter.
                                                            (line  7122)
* >IN greater than input buffer:         core-ambcond.      (line 13923)
* >l:                                    Locals implementation.
                                                            (line  9775)
* >name:                                 Name token.        (line  6697)
* >number:                               Line input and conversion.
                                                            (line  9212)
* >order:                                Word Lists.        (line  7611)
* >r:                                    Return stack.      (line  4251)
* ?:                                     Examining data.    (line 11756)
* ?!@:                                   Pthreads.          (line 12204)
* ???:                                   Debugging.         (line 11848)
* ?DO:                                   Arbitrary control structures.
                                                            (line  5161)
* ?dup:                                  Data stack.        (line  4197)
* ?DUP-0=-IF:                            Arbitrary control structures.
                                                            (line  5157)
* ?dup-IF:                               Arbitrary control structures.
                                                            (line  5152)
* ?events:                               Pthreads.          (line 12237)
* ?LEAVE:                                Arbitrary control structures.
                                                            (line  5197)
* ?of:                                   Arbitrary control structures.
                                                            (line  5231)
* @:                                     Memory Access.     (line  4459)
* @local#:                               Locals implementation.
                                                            (line  9763)
* [:                                     Literals.          (line  6777)
* [']:                                   Execution token.   (line  6591)
* [+LOOP]:                               Interpreter Directives.
                                                            (line  7416)
* [::                                    Quotations.        (line  5837)
* [?DO]:                                 Interpreter Directives.
                                                            (line  7408)
* [AGAIN]:                               Interpreter Directives.
                                                            (line  7424)
* [BEGIN]:                               Interpreter Directives.
                                                            (line  7420)
* [bind]:                                Objects Glossary.  (line 10920)
* [bind] usage:                          Class Binding.     (line 10583)
* [char]:                                Displaying characters and strings.
                                                            (line  8798)
* [COMP']:                               Compilation token. (line  6651)
* [current]:                             Objects Glossary.  (line 10953)
* [DO]:                                  Interpreter Directives.
                                                            (line  7410)
* [ELSE]:                                Interpreter Directives.
                                                            (line  7382)
* [ENDIF]:                               Interpreter Directives.
                                                            (line  7395)
* [FOR]:                                 Interpreter Directives.
                                                            (line  7412)
* [IFDEF]:                               Interpreter Directives.
                                                            (line  7398)
* [IFUNDEF]:                             Interpreter Directives.
                                                            (line  7403)
* [IF]:                                  Interpreter Directives.
                                                            (line  7374)
* [IF] and POSTPONE:                     programming-ambcond.
                                                            (line 14404)
* [IF], end of the input source before matching [ELSE] or [THEN]: programming-ambcond.
                                                            (line 14408)
* [LOOP]:                                Interpreter Directives.
                                                            (line  7414)
* [NEXT]:                                Interpreter Directives.
                                                            (line  7418)
* [parent]:                              Objects Glossary.  (line 11031)
* [parent] usage:                        Class Binding.     (line 10602)
* [REPEAT]:                              Interpreter Directives.
                                                            (line  7428)
* [THEN]:                                Interpreter Directives.
                                                            (line  7391)
* [to-inst]:                             Objects Glossary.  (line 11056)
* [UNTIL]:                               Interpreter Directives.
                                                            (line  7422)
* [WHILE]:                               Interpreter Directives.
                                                            (line  7426)
* [[:                                    Macros.            (line  6866)
* []:                                    The OOF base class.
                                                            (line 11207)
* [{::                                   Closures.          (line  9890)
* \:                                     Comments.          (line  3508)
* \, editing with Emacs:                 Emacs and Gforth.  (line 14621)
* \, line length in blocks:              block-idef.        (line 14042)
* \c:                                    Declaring C Functions.
                                                            (line 12414)
* \G:                                    Comments.          (line  3514)
* ]:                                     Literals.          (line  6780)
* ]L:                                    Literals.          (line  6788)
* ]]:                                    Macros.            (line  6863)
* {::                                    Standard Forth locals.
                                                            (line 10002)
* ~~:                                    Debugging.         (line 11821)
* ~~, removal with Emacs:                Emacs and Gforth.  (line 14621)
* ~~1bt:                                 Debugging.         (line 11845)
* ~~bt:                                  Debugging.         (line 11842)
* ~~Value:                               Debugging.         (line 11863)
* ~~Variable:                            Debugging.         (line 11860)
* abi-code:                              Assembler Definitions.
                                                            (line 12688)
* abort:                                 Exception Handling.
                                                            (line  5535)
* ABORT":                                Exception Handling.
                                                            (line  5530)
* ABORT", exception abort sequence:      core-idef.         (line 13695)
* abs:                                   Single precision.  (line  3574)
* abstract class:                        Basic Objects Usage.
                                                            (line 10483)
* abstract class <1>:                    Basic OOF Usage.   (line 11121)
* accept:                                Line input and conversion.
                                                            (line  9193)
* ACCEPT, display after end of input:    core-idef.         (line 13691)
* ACCEPT, editing:                       core-idef.         (line 13637)
* action-of:                             Deferred Words.    (line  6346)
* activate:                              Pthreads.          (line 12113)
* add-cflags:                            Declaring OS-level libraries.
                                                            (line 12563)
* add-incdir:                            Declaring OS-level libraries.
                                                            (line 12560)
* add-ldflags:                           Declaring OS-level libraries.
                                                            (line 12566)
* add-lib:                               Declaring OS-level libraries.
                                                            (line 12552)
* add-libpath:                           Declaring OS-level libraries.
                                                            (line 12556)
* addr:                                  Values.            (line  5746)
* address alignment exception:           core-ambcond.      (line 13944)
* address alignment exception, stack overflow: core-ambcond.
                                                            (line 13846)
* address arithmetic for structures:     Why explicit structure support?.
                                                            (line 10032)
* address arithmetic words:              Address arithmetic.
                                                            (line  4524)
* address of counted string:             String Formats.    (line  8693)
* address unit:                          Address arithmetic.
                                                            (line  4528)
* address unit, size in bits:            core-idef.         (line 13731)
* ADDRESS-UNIT-BITS:                     Address arithmetic.
                                                            (line  4621)
* after-locate:                          Locating source code definitions.
                                                            (line 11623)
* AGAIN:                                 Arbitrary control structures.
                                                            (line  5111)
* AHEAD:                                 Arbitrary control structures.
                                                            (line  5095)
* Alias:                                 Aliases.           (line  6397)
* aliases:                               Aliases.           (line  6370)
* align:                                 Dictionary allocation.
                                                            (line  4399)
* aligned:                               Address arithmetic.
                                                            (line  4574)
* aligned addresses:                     core-idef.         (line 13627)
* alignment faults:                      core-ambcond.      (line 13944)
* alignment of addresses for types:      Address arithmetic.
                                                            (line  4539)
* alignment tutorial:                    Alignment Tutorial.
                                                            (line  1905)
* allocate:                              Heap Allocation.   (line  4435)
* allot:                                 Dictionary allocation.
                                                            (line  4368)
* also:                                  Word Lists.        (line  7617)
* also, too many word lists in search order: search-ambcond.
                                                            (line 14442)
* also-path:                             General Search Paths.
                                                            (line  8181)
* ambiguous conditions, block words:     block-ambcond.     (line 14047)
* ambiguous conditions, core words:      core-ambcond.      (line 13811)
* ambiguous conditions, double words:    double-ambcond.    (line 14083)
* ambiguous conditions, facility words:  facility-ambcond.  (line 14128)
* ambiguous conditions, file words:      file-ambcond.      (line 14195)
* ambiguous conditions, floating-point words: floating-ambcond.
                                                            (line 14254)
* ambiguous conditions, locals words:    locals-ambcond.    (line 14340)
* ambiguous conditions, programming-tools words: programming-ambcond.
                                                            (line 14386)
* ambiguous conditions, search-order words: search-ambcond. (line 14430)
* and:                                   Bitwise operations.
                                                            (line  3886)
* angles in trigonometric operations:    Floating Point.    (line  4076)
* annotate-cov:                          Code Coverage.     (line 12043)
* ans-report.fs:                         Standard Report.   (line 13485)
* arg:                                   OS command line arguments.
                                                            (line  9410)
* argc:                                  OS command line arguments.
                                                            (line  9424)
* argument input source different than current input source for RESTORE-INPUT: core-ambcond.
                                                            (line 13930)
* argument type mismatch:                core-ambcond.      (line 13824)
* argument type mismatch, RESTORE-INPUT: core-ambcond.      (line 13930)
* arguments, OS command line:            OS command line arguments.
                                                            (line  9375)
* argv:                                  OS command line arguments.
                                                            (line  9428)
* arithmetic words:                      Arithmetic.        (line  3539)
* arithmetics tutorial:                  Arithmetics Tutorial.
                                                            (line   965)
* arrays:                                CREATE.            (line  5602)
* arrays tutorial:                       Arrays and Records Tutorial.
                                                            (line  2420)
* asptr:                                 The OOF base class.
                                                            (line 11205)
* asptr <1>:                             Class Declaration. (line 11261)
* assembler:                             Assembler and Code Words.
                                                            (line 12652)
* assembler <1>:                         Assembler Definitions.
                                                            (line 12681)
* ASSEMBLER, search order capability:    programming-idef.  (line 14375)
* assert(:                               Assertions.        (line 11924)
* assert-level:                          Assertions.        (line 11943)
* assert0(:                              Assertions.        (line 11911)
* assert1(:                              Assertions.        (line 11914)
* assert2(:                              Assertions.        (line 11917)
* assert3(:                              Assertions.        (line 11920)
* assertions:                            Assertions.        (line 11887)
* ASSUME-LIVE:                           Where are locals visible by name?.
                                                            (line  9644)
* at-xy:                                 Terminal output.   (line  8993)
* AT-XY can't be performed on user output device: facility-ambcond.
                                                            (line 14129)
* Attempt to use zero-length string as a name: core-ambcond.
                                                            (line 13917)
* attr!:                                 Terminal output.   (line  9027)
* au (address unit):                     Address arithmetic.
                                                            (line  4528)
* authors:                               Help on Gforth.    (line   633)
* authors of Gforth:                     Origin.            (line 15823)
* auto-indentation of Forth code in Emacs: Auto-Indentation.
                                                            (line 14725)
* a_, stack item type:                   Notation.          (line  3443)
* b:                                     Locating source code definitions.
                                                            (line 11609)
* backtrace:                             Error messages.    (line 13421)
* backtrace examination:                 Locating exception source.
                                                            (line 11684)
* backtraces with gforth-fast:           Error messages.    (line 13468)
* barrier:                               Pthreads.          (line 12208)
* base:                                  Number Conversion. (line  7263)
* base is not decimal (REPRESENT, F., FE., FS.): floating-ambcond.
                                                            (line 14274)
* base-execute:                          Number Conversion. (line  7259)
* basic objects usage:                   Basic Objects Usage.
                                                            (line 10469)
* batch processing with Gforth:          Invoking Gforth.   (line   586)
* before-locate:                         Locating source code definitions.
                                                            (line 11620)
* BEGIN:                                 Arbitrary control structures.
                                                            (line  5103)
* begin-structure:                       Forth200x Structures.
                                                            (line 10316)
* benchmarking Forth systems:            Performance.       (line 15586)
* Benchres:                              Performance.       (line 15666)
* bin:                                   General files.     (line  7977)
* bind:                                  Objects Glossary.  (line 10911)
* bind <1>:                              The OOF base class.
                                                            (line 11224)
* bind usage:                            Class Binding.     (line 10587)
* bind':                                 Objects Glossary.  (line 10917)
* bitwise operation words:               Bitwise operations.
                                                            (line  3886)
* bl:                                    Displaying characters and strings.
                                                            (line  8717)
* blank:                                 Memory Blocks.     (line  4665)
* blk:                                   Input Sources.     (line  7175)
* BLK, altering BLK:                     block-ambcond.     (line 14060)
* block:                                 Blocks.            (line  8339)
* block buffers:                         Blocks.            (line  8233)
* block number invalid:                  block-ambcond.     (line 14057)
* block read not possible:               block-ambcond.     (line 14048)
* block transfer, I/O exception:         block-ambcond.     (line 14053)
* block words, ambiguous conditions:     block-ambcond.     (line 14047)
* block words, implementation-defined options: block-idef.  (line 14037)
* block words, other system documentation: block-other.     (line 14071)
* block words, system documentation:     The optional Block word set.
                                                            (line 14034)
* block-included:                        Blocks.            (line  8398)
* block-offset:                          Blocks.            (line  8318)
* block-position:                        Blocks.            (line  8328)
* blocks:                                Blocks.            (line  8199)
* blocks file:                           Blocks.            (line  8222)
* blocks files, use with Emacs:          Blocks Files.      (line 14761)
* blocks in files:                       file-idef.         (line 14182)
* blocks.fb:                             Blocks.            (line  8228)
* Boolean flags:                         Boolean Flags.     (line  3521)
* bootmessage:                           Modifying the Startup Sequence.
                                                            (line 15156)
* bound:                                 The OOF base class.
                                                            (line 11226)
* bounds:                                Memory Blocks.     (line  4696)
* break":                                Singlestep Debugger.
                                                            (line 12024)
* break::                                Singlestep Debugger.
                                                            (line 12022)
* broken-pipe-error:                     Pipes.             (line  9276)
* bt:                                    Locating exception source.
                                                            (line 11688)
* buffer:                                Blocks.            (line  8346)
* bug reporting:                         Bugs.              (line 15796)
* bw:                                    Locating uses of a word.
                                                            (line 11661)
* bw-cover:                              Code Coverage.     (line 12060)
* bye:                                   Leaving Gforth.    (line   619)
* bye during gforthmi:                   gforthmi.          (line 14990)
* C function pointers to Forth words:    Callbacks.         (line 12572)
* C function pointers, calling from Forth: Calling C function pointers.
                                                            (line 12439)
* C functions, calls to:                 Calling C Functions.
                                                            (line 12284)
* C functions, declarations:             Declaring C Functions.
                                                            (line 12344)
* C interface:                           C Interface.       (line 12276)
* c!:                                    Memory Access.     (line  4471)
* C":                                    Displaying characters and strings.
                                                            (line  8789)
* c$+!:                                  String words.      (line  8892)
* c,:                                    Dictionary allocation.
                                                            (line  4375)
* c, stack item type:                    Notation.          (line  3429)
* C, using C for the engine:             Portability.       (line 15184)
* c-callback:                            Callbacks.         (line 12582)
* c-function:                            Declaring C Functions.
                                                            (line 12417)
* c-funptr:                              Calling C function pointers.
                                                            (line 12444)
* c-library:                             Defining library interfaces.
                                                            (line 12516)
* c-library-name:                        Defining library interfaces.
                                                            (line 12513)
* c-value:                               Declaring C Functions.
                                                            (line 12421)
* c-variable:                            Declaring C Functions.
                                                            (line 12425)
* c@:                                    Memory Access.     (line  4468)
* call-c:                                Low-Level C Interface Words.
                                                            (line 12631)
* Callback functions written in Forth:   Callbacks.         (line 12572)
* calling a definition:                  Calls and returns. (line  5283)
* calling C functions:                   Calling C Functions.
                                                            (line 12284)
* case:                                  Arbitrary control structures.
                                                            (line  5214)
* case as generalized control structure: General control structures with CASE.
                                                            (line  5004)
* CASE control structure:                Selection.         (line  4758)
* case sensitivity:                      Case insensitivity.
                                                            (line  3469)
* case-sensitivity characteristics:      core-idef.         (line 13776)
* case-sensitivity for name lookup:      core-idef.         (line 13654)
* catch:                                 Exception Handling.
                                                            (line  5375)
* catch and backtraces:                  Error messages.    (line 13457)
* catch and this:                        Objects Implementation.
                                                            (line 10834)
* catch in m: ... ;m:                    Method conveniences.
                                                            (line 10631)
* cell:                                  Address arithmetic.
                                                            (line  4571)
* cell size:                             core-idef.         (line 13756)
* cell%:                                 Structure Glossary.
                                                            (line 10260)
* cell+:                                 Address arithmetic.
                                                            (line  4568)
* cell-aligned addresses:                core-idef.         (line 13627)
* cells:                                 Address arithmetic.
                                                            (line  4565)
* CFA:                                   Execution token.   (line  6620)
* cfalign:                               Dictionary allocation.
                                                            (line  4418)
* cfaligned:                             Address arithmetic.
                                                            (line  4617)
* cfield::                               Forth200x Structures.
                                                            (line 10322)
* changing the compilation word list (during compilation): search-ambcond.
                                                            (line 14431)
* char:                                  Displaying characters and strings.
                                                            (line  8794)
* char size:                             core-idef.         (line 13759)
* char%:                                 Structure Glossary.
                                                            (line 10262)
* char+:                                 Address arithmetic.
                                                            (line  4562)
* character editing of ACCEPT and EXPECT: core-idef.        (line 13637)
* character set:                         core-idef.         (line 13644)
* character strings - compiling and displaying: Displaying characters and strings.
                                                            (line  8714)
* character strings - formats:           String Formats.    (line  8690)
* character strings - moving and copying: Memory Blocks.    (line  4633)
* character-aligned address requirements: core-idef.        (line 13649)
* character-set extensions and matching of names: core-idef.
                                                            (line 13654)
* characters - compiling and displaying: Displaying characters and strings.
                                                            (line  8714)
* characters tutorial:                   Characters and Strings Tutorial.
                                                            (line  1856)
* chars:                                 Address arithmetic.
                                                            (line  4559)
* child class:                           Object-Oriented Terminology.
                                                            (line 10409)
* child words:                           User-defined Defining Words.
                                                            (line  5932)
* class:                                 Object-Oriented Terminology.
                                                            (line 10376)
* class <1>:                             Objects Glossary.  (line 10923)
* class <2>:                             The OOF base class.
                                                            (line 11178)
* class <3>:                             Basic Mini-OOF Usage.
                                                            (line 11318)
* class binding:                         Class Binding.     (line 10574)
* class binding as optimization:         Class Binding.     (line 10607)
* class binding, alternative to:         Class Binding.     (line 10589)
* class binding, implementation:         Objects Implementation.
                                                            (line 10830)
* class declaration:                     Class Declaration. (line 11251)
* class definition, restrictions:        Basic Objects Usage.
                                                            (line 10521)
* class definition, restrictions <1>:    Basic OOF Usage.   (line 11154)
* class implementation:                  Class Implementation.
                                                            (line 11292)
* class implementation and representation: Objects Implementation.
                                                            (line 10815)
* class scoping implementation:          Objects Implementation.
                                                            (line 10849)
* class usage:                           Basic Objects Usage.
                                                            (line 10471)
* class usage <1>:                       Basic OOF Usage.   (line 11109)
* class->map:                            Objects Glossary.  (line 10927)
* class-inst-size:                       Objects Glossary.  (line 10932)
* class-inst-size discussion:            Creating objects.  (line 10546)
* class-override!:                       Objects Glossary.  (line 10936)
* class-previous:                        Objects Glossary.  (line 10939)
* class;:                                Class Declaration. (line 11287)
* class; usage:                          Basic OOF Usage.   (line 11109)
* class>order:                           Objects Glossary.  (line 10943)
* class?:                                The OOF base class.
                                                            (line 11182)
* classes and scoping:                   Classes and Scoping.
                                                            (line 10687)
* clear screen:                          Terminal output.   (line  9000)
* clear-libs:                            Declaring OS-level libraries.
                                                            (line 12549)
* clear-path:                            General Search Paths.
                                                            (line  8177)
* clearstack:                            Examining data.    (line 11748)
* clearstacks:                           Examining data.    (line 11751)
* clock tick duration:                   facility-idef.     (line 14115)
* close-dir:                             Directories.       (line  8098)
* close-file:                            General files.     (line  7988)
* close-pipe:                            Pipes.             (line  9267)
* closures:                              Closures.          (line  9882)
* cmove:                                 Memory Blocks.     (line  4652)
* cmove>:                                Memory Blocks.     (line  4657)
* code:                                  Assembler Definitions.
                                                            (line 12701)
* code address:                          Threading Words.   (line 13270)
* code address <1>:                      Threading Words.   (line 13286)
* code coverage:                         Code Coverage.     (line 12029)
* CODE ending sequence:                  programming-idef.  (line 14367)
* code field address:                    Execution token.   (line  6620)
* code field address <1>:                Threading Words.   (line 13286)
* code words:                            Assembler and Code Words.
                                                            (line 12652)
* CODE, processing input:                programming-idef.  (line 14370)
* code-address!:                         Threading Words.   (line 13297)
* colon definitions:                     Colon Definitions. (line  5752)
* colon definitions <1>:                 Anonymous Definitions.
                                                            (line  5770)
* colon definitions, nesting:            Quotations.        (line  5816)
* colon definitions, tutorial:           Colon Definitions Tutorial.
                                                            (line  1120)
* colon-sys, passing data across ::      Literals.          (line  6807)
* color-cover:                           Code Coverage.     (line 12063)
* color-execute:                         Terminal output.   (line  9030)
* combined words:                        Combined words.    (line  6458)
* command line arguments, OS:            OS command line arguments.
                                                            (line  9375)
* command-line editing:                  Command-line editing.
                                                            (line   642)
* command-line options:                  Invoking Gforth.   (line   409)
* comment editing commands:              Emacs and Gforth.  (line 14621)
* comments:                              Comments.          (line  3498)
* comments tutorial:                     Comments Tutorial. (line  1091)
* common-list:                           Locals implementation.
                                                            (line  9845)
* COMP':                                 Compilation token. (line  6654)
* comp-i.fs:                             gforthmi.          (line 14952)
* comp.lang.forth:                       Forth-related information.
                                                            (line 15884)
* compare:                               Memory Blocks.     (line  4668)
* comparison of object models:           Comparison with other object models.
                                                            (line 11499)
* comparison tutorial:                   Flags and Comparisons Tutorial.
                                                            (line  1444)
* compilation semantics:                 How does that work?.
                                                            (line  3145)
* compilation semantics <1>:             Interpretation and Compilation Semantics.
                                                            (line  6409)
* compilation semantics tutorial:        Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                            (line  2113)
* compilation token:                     Compilation token. (line  6633)
* compilation tokens, tutorial:          Compilation Tokens Tutorial.
                                                            (line  2582)
* compilation word list:                 Word Lists.        (line  7556)
* compilation word list, change before definition ends: search-ambcond.
                                                            (line 14431)
* compile state:                         The Text Interpreter.
                                                            (line  7012)
* compile,:                              Macros.            (line  6953)
* compile-lp+!:                          Locals implementation.
                                                            (line  9785)
* compile-only:                          Interpretation and Compilation Semantics.
                                                            (line  6432)
* compile-only warning, for ' etc.:      core-ambcond.      (line 13829)
* compile-only words:                    Interpretation and Compilation Semantics.
                                                            (line  6426)
* compiled code examination:             Examining compiled code.
                                                            (line 11693)
* compiling compilation semantics:       Macros.            (line  6823)
* compiling words:                       Compiling words.   (line  6736)
* cond:                                  Pthreads.          (line 12262)
* conditional compilation:               Interpreter Directives.
                                                            (line  7350)
* conditionals, tutorial:                Conditional execution Tutorial.
                                                            (line  1398)
* const-does>:                           Const-does>.       (line  6229)
* Constant:                              Constants.         (line  5676)
* constants:                             Constants.         (line  5658)
* construct:                             Objects Glossary.  (line 10946)
* construct discussion:                  Creating objects.  (line 10540)
* context:                               Word Lists.        (line  7687)
* context-sensitive help:                Emacs and Gforth.  (line 14644)
* contiguous regions and heap allocation: Heap Allocation.  (line  4425)
* contiguous regions in dictionary allocation: Dictionary allocation.
                                                            (line  4347)
* contof:                                Arbitrary control structures.
                                                            (line  5238)
* contributors to Gforth:                Origin.            (line 15823)
* control characters as delimiters:      core-idef.         (line 13670)
* control structures:                    Control Structures.
                                                            (line  4708)
* control structures for selection:      Selection.         (line  4721)
* control structures programming style:  Arbitrary control structures.
                                                            (line  5247)
* control structures, user-defined:      Arbitrary control structures.
                                                            (line  5080)
* control-flow stack:                    Arbitrary control structures.
                                                            (line  5080)
* control-flow stack items, locals information: Locals implementation.
                                                            (line  9835)
* control-flow stack underflow:          programming-ambcond.
                                                            (line 14390)
* control-flow stack, format:            core-idef.         (line 13678)
* convert:                               Line input and conversion.
                                                            (line  9243)
* convertin strings to numbers:          Line input and conversion.
                                                            (line  9188)
* core words, ambiguous conditions:      core-ambcond.      (line 13811)
* core words, implementation-defined options: core-idef.    (line 13626)
* core words, other system documentation: core-other.       (line 14003)
* core words, system documentation:      The Core Words.    (line 13623)
* count:                                 String Formats.    (line  8703)
* counted loops:                         Counted Loops.     (line  4834)
* counted loops with negative increment: Counted Loops.     (line  4902)
* counted string:                        String Formats.    (line  8693)
* counted string, maximum size:          core-idef.         (line 13704)
* counted strings:                       String Formats.    (line  8690)
* cov%:                                  Code Coverage.     (line 12049)
* cov+:                                  Code Coverage.     (line 12075)
* cputime:                               Keeping track of Time.
                                                            (line 13396)
* cr:                                    Displaying characters and strings.
                                                            (line  8756)
* Create:                                CREATE.            (line  5580)
* CREATE ... DOES>:                      User-defined Defining Words.
                                                            (line  5921)
* CREATE ... DOES>, applications:        CREATE..DOES> applications.
                                                            (line  6033)
* CREATE ... DOES>, details:             CREATE..DOES> details.
                                                            (line  6070)
* CREATE and alignment:                  Address arithmetic.
                                                            (line  4552)
* create-file:                           General files.     (line  7986)
* create...does> tutorial:               Defining Words Tutorial.
                                                            (line  2331)
* creating objects:                      Creating objects.  (line 10540)
* critical-section:                      Pthreads.          (line 12187)
* cross-compiler:                        cross.fs.          (line 15005)
* cross-compiler <1>:                    Cross Compiler.    (line 15679)
* cross.fs:                              cross.fs.          (line 15005)
* cross.fs <1>:                          Cross Compiler.    (line 15679)
* CS-DROP:                               Arbitrary control structures.
                                                            (line  5119)
* CS-PICK:                               Arbitrary control structures.
                                                            (line  5115)
* CS-PICK, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                            (line 14390)
* CS-ROLL:                               Arbitrary control structures.
                                                            (line  5117)
* CS-ROLL, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                            (line 14390)
* cs-vocabulary:                         Word Lists.        (line  7608)
* cs-wordlist:                           Word Lists.        (line  7605)
* CT (compilation token):                Compilation token. (line  6633)
* CT, tutorial:                          Compilation Tokens Tutorial.
                                                            (line  2582)
* current:                               Word Lists.        (line  7684)
* current':                              Objects Glossary.  (line 10950)
* current-interface:                     Objects Glossary.  (line 10956)
* current-interface discussion:          Objects Implementation.
                                                            (line 10815)
* currying:                              CREATE..DOES> applications.
                                                            (line  6054)
* cursor control:                        Displaying characters and strings.
                                                            (line  8762)
* cursor positioning:                    Terminal output.   (line  8991)
* c_, stack item type:                   Notation.          (line  3445)
* d+:                                    Double precision.  (line  3602)
* d, stack item type:                    Notation.          (line  3437)
* d-:                                    Double precision.  (line  3604)
* d.:                                    Simple numeric output.
                                                            (line  8450)
* d.r:                                   Simple numeric output.
                                                            (line  8458)
* d0<:                                   Numeric comparison.
                                                            (line  3972)
* d0<=:                                  Numeric comparison.
                                                            (line  3974)
* d0<>:                                  Numeric comparison.
                                                            (line  3976)
* d0=:                                   Numeric comparison.
                                                            (line  3978)
* d0>:                                   Numeric comparison.
                                                            (line  3980)
* d0>=:                                  Numeric comparison.
                                                            (line  3982)
* d2*:                                   Bitwise operations.
                                                            (line  3902)
* d2/:                                   Bitwise operations.
                                                            (line  3909)
* d<:                                    Numeric comparison.
                                                            (line  3960)
* d<=:                                   Numeric comparison.
                                                            (line  3962)
* d<>:                                   Numeric comparison.
                                                            (line  3964)
* d=:                                    Numeric comparison.
                                                            (line  3966)
* d>:                                    Numeric comparison.
                                                            (line  3968)
* d>=:                                   Numeric comparison.
                                                            (line  3970)
* d>f:                                   Floating Point.    (line  4015)
* D>F, d cannot be presented precisely as a float: floating-ambcond.
                                                            (line 14286)
* d>s:                                   Double precision.  (line  3600)
* D>S, d out of range of n:              double-ambcond.    (line 14084)
* dabs:                                  Double precision.  (line  3608)
* data space - reserving some:           Dictionary allocation.
                                                            (line  4343)
* data space available:                  core-other.        (line 14013)
* data space containing definitions gets de-allocated: core-ambcond.
                                                            (line 13940)
* data space pointer not properly aligned, ,, C,: core-ambcond.
                                                            (line 13952)
* data space read/write with incorrect alignment: core-ambcond.
                                                            (line 13944)
* data stack:                            Stack Manipulation.
                                                            (line  4165)
* data stack manipulation words:         Data stack.        (line  4178)
* data structure locals:                 Gforth locals.     (line  9499)
* data-relocatable image files:          Data-Relocatable Image Files.
                                                            (line 14922)
* data-space, read-only regions:         core-idef.         (line 13746)
* dbg:                                   Singlestep Debugger.
                                                            (line 12020)
* debug tracer editing commands:         Emacs and Gforth.  (line 14621)
* debug-fid:                             Debugging.         (line 11832)
* debugging:                             Debugging.         (line 11799)
* debugging output, finding the source location in Emacs: Emacs and Gforth.
                                                            (line 14636)
* debugging Singlestep:                  Singlestep Debugger.
                                                            (line 11963)
* dec.:                                  Simple numeric output.
                                                            (line  8429)
* decimal:                               Number Conversion. (line  7272)
* declaring C functions:                 Declaring C Functions.
                                                            (line 12344)
* decompilation tutorial:                Decompilation Tutorial.
                                                            (line  1152)
* default type of locals:                Gforth locals.     (line  9496)
* default-color:                         Terminal output.   (line  9012)
* Defer:                                 Deferred Words.    (line  6332)
* defer:                                 Class Declaration. (line 11266)
* defer!:                                Deferred Words.    (line  6336)
* defer@:                                Deferred Words.    (line  6342)
* deferred words:                        Deferred Words.    (line  6261)
* defers:                                Deferred Words.    (line  6349)
* definer:                               Threading Words.   (line 13345)
* definer!:                              Threading Words.   (line 13353)
* defines:                               Basic Mini-OOF Usage.
                                                            (line 11324)
* defining defining words:               User-defined Defining Words.
                                                            (line  5921)
* defining words:                        Defining Words.    (line  5561)
* defining words tutorial:               Defining Words Tutorial.
                                                            (line  2331)
* defining words with arbitrary semantics combinations: Combined words.
                                                            (line  6514)
* defining words without name:           Anonymous Definitions.
                                                            (line  5770)
* defining words, name given in a string: Supplying names.  (line  5846)
* defining words, simple:                CREATE.            (line  5567)
* defining words, user-defined:          User-defined Defining Words.
                                                            (line  5867)
* definition:                            Introducing the Text Interpreter.
                                                            (line  2752)
* definitions:                           Word Lists.        (line  7575)
* definitions <1>:                       The OOF base class.
                                                            (line 11180)
* definitions, tutorial:                 Colon Definitions Tutorial.
                                                            (line  1120)
* delete:                                String words.      (line  8857)
* delete-file:                           General files.     (line  7990)
* Depth:                                 Examining data.    (line 11742)
* depth changes during interpretation:   Stack depth changes.
                                                            (line 13528)
* depth-changes.fs:                      Stack depth changes.
                                                            (line 13528)
* design of stack effects, tutorial:     Designing the stack effect Tutorial.
                                                            (line  1316)
* dest, control-flow stack item:         Arbitrary control structures.
                                                            (line  5085)
* df!:                                   Memory Access.     (line  4499)
* df@:                                   Memory Access.     (line  4495)
* df@ or df! used with an address that is not double-float aligned: floating-ambcond.
                                                            (line 14255)
* dfalign:                               Dictionary allocation.
                                                            (line  4411)
* dfaligned:                             Address arithmetic.
                                                            (line  4609)
* dffield::                              Forth200x Structures.
                                                            (line 10332)
* dfloat%:                               Structure Glossary.
                                                            (line 10264)
* dfloat+:                               Address arithmetic.
                                                            (line  4606)
* dfloats:                               Address arithmetic.
                                                            (line  4602)
* df_, stack item type:                  Notation.          (line  3450)
* dict-new:                              Objects Glossary.  (line 10959)
* dict-new discussion:                   Creating objects.  (line 10540)
* dictionary:                            The Text Interpreter.
                                                            (line  7029)
* dictionary in persistent form:         Image Files.       (line 14789)
* dictionary overflow:                   core-ambcond.      (line 13862)
* dictionary size default:               Stack and Dictionary Sizes.
                                                            (line 15019)
* digits > 35:                           core-idef.         (line 13687)
* direct threaded inner interpreter:     Threading.         (line 15242)
* Directories:                           Directories.       (line  8079)
* disassembler, general:                 Common Disassembler.
                                                            (line 12843)
* discode:                               Common Disassembler.
                                                            (line 12846)
* dispose:                               The OOF base class.
                                                            (line 11192)
* dividing by zero:                      core-ambcond.      (line 13841)
* dividing by zero, floating-point:      floating-ambcond.  (line 14289)
* Dividing classes:                      Dividing classes.  (line 10713)
* dividing integers:                     Integer division.  (line  3626)
* dividing many integers with the same divisor: Two-stage integer division.
                                                            (line  3770)
* Division by zero:                      Integer division.  (line  3626)
* Division by zero <1>:                  Integer division.  (line  3755)
* division rounding:                     core-idef.         (line 13786)
* division with potentially negative operands: Arithmetic.  (line  3539)
* dmax:                                  Double precision.  (line  3612)
* dmin:                                  Double precision.  (line  3610)
* dnegate:                               Double precision.  (line  3606)
* DO:                                    Arbitrary control structures.
                                                            (line  5176)
* DO loops:                              Counted Loops.     (line  4834)
* docol::                                Threading Words.   (line 13327)
* docon::                                Threading Words.   (line 13330)
* documentation for a word:              Locating documentation.
                                                            (line 11635)
* dodefer::                              Threading Words.   (line 13339)
* dodoes routine:                        DOES>.             (line 15431)
* does-code!:                            Threading Words.   (line 13316)
* DOES>:                                 CREATE..DOES> details.
                                                            (line  6070)
* DOES> implementation:                  DOES>.             (line 15431)
* DOES> in a separate definition:        CREATE..DOES> details.
                                                            (line  6072)
* DOES> in interpretation state:         CREATE..DOES> details.
                                                            (line  6095)
* DOES> of non-CREATEd words:            core-ambcond.      (line 13993)
* does> tutorial:                        Defining Words Tutorial.
                                                            (line  2331)
* DOES>, visibility of current definition: core-idef.       (line 13806)
* does>-code:                            Threading Words.   (line 13300)
* DOES>-code:                            DOES>.             (line 15431)
* does>-handler:                         Threading Words.   (line 13300)
* DOES>-parts, stack effect:             User-defined Defining Words.
                                                            (line  6010)
* dofield::                              Threading Words.   (line 13342)
* DONE:                                  Arbitrary control structures.
                                                            (line  5202)
* double precision arithmetic words:     Double precision.  (line  3583)
* double words, ambiguous conditions:    double-ambcond.    (line 14083)
* double words, system documentation:    The optional Double Number word set.
                                                            (line 14080)
* double%:                               Structure Glossary.
                                                            (line 10266)
* double-cell numbers, input format:     Number Conversion. (line  7207)
* doubly indirect threaded code:         gforthmi.          (line 14990)
* douser::                               Threading Words.   (line 13336)
* dovar::                                Threading Words.   (line 13333)
* dpl:                                   Number Conversion. (line  7252)
* drop:                                  Data stack.        (line  4178)
* du/mod:                                Integer division.  (line  3708)
* du<:                                   Numeric comparison.
                                                            (line  3984)
* du<=:                                  Numeric comparison.
                                                            (line  3986)
* du>:                                   Numeric comparison.
                                                            (line  3988)
* du>=:                                  Numeric comparison.
                                                            (line  3990)
* dump:                                  Examining data.    (line 11759)
* dup:                                   Data stack.        (line  4182)
* duration of a system clock tick:       facility-idef.     (line 14115)
* dynamic allocation of memory:          Heap Allocation.   (line  4425)
* Dynamic superinstructions with replication: Dynamic Superinstructions.
                                                            (line 15339)
* Dynamically linked libraries in C interface: Declaring OS-level libraries.
                                                            (line 12525)
* e$,:                                   Pthreads.          (line 12247)
* early:                                 Class Declaration. (line 11271)
* early binding:                         Class Binding.     (line 10574)
* edit:                                  Locating source code definitions.
                                                            (line 11629)
* edit <1>:                              Debugging.         (line 11878)
* edit-line:                             Line input and conversion.
                                                            (line  9200)
* editing in ACCEPT and EXPECT:          core-idef.         (line 13637)
* eflit,:                                Pthreads.          (line 12251)
* eforth performance:                    Performance.       (line 15602)
* ekey:                                  Single-key input.  (line  9076)
* EKEY, encoding of keyboard events:     facility-idef.     (line 14108)
* ekey>char:                             Single-key input.  (line  9079)
* ekey>fkey:                             Single-key input.  (line  9082)
* ekey?:                                 Single-key input.  (line  9086)
* elements of a Forth system:            Review - elements of a Forth system.
                                                            (line  3294)
* elit,:                                 Pthreads.          (line 12244)
* ELSE:                                  Arbitrary control structures.
                                                            (line  5132)
* Emacs and Gforth:                      Emacs and Gforth.  (line 14621)
* emit:                                  Displaying characters and strings.
                                                            (line  8726)
* EMIT and non-graphic characters:       core-idef.         (line 13633)
* emit-file:                             General files.     (line  8016)
* empty-buffer:                          Blocks.            (line  8359)
* empty-buffers:                         Blocks.            (line  8355)
* end-c-library:                         Defining library interfaces.
                                                            (line 12519)
* end-class:                             Objects Glossary.  (line 10962)
* end-class <1>:                         Basic Mini-OOF Usage.
                                                            (line 11321)
* end-class usage:                       Basic Objects Usage.
                                                            (line 10471)
* end-class-noname:                      Objects Glossary.  (line 10966)
* end-code:                              Assembler Definitions.
                                                            (line 12696)
* end-interface:                         Objects Glossary.  (line 10969)
* end-interface usage:                   Object Interfaces. (line 10770)
* end-interface-noname:                  Objects Glossary.  (line 10973)
* end-methods:                           Objects Glossary.  (line 10976)
* end-struct:                            Structure Glossary.
                                                            (line 10268)
* end-struct usage:                      Structure Usage.   (line 10105)
* end-structure:                         Forth200x Structures.
                                                            (line 10318)
* endcase:                               Arbitrary control structures.
                                                            (line  5217)
* ENDIF:                                 Arbitrary control structures.
                                                            (line  5149)
* endless loop:                          Simple Loops.      (line  4825)
* endof:                                 Arbitrary control structures.
                                                            (line  5234)
* endscope:                              Where are locals visible by name?.
                                                            (line  9535)
* endtry:                                Exception Handling.
                                                            (line  5420)
* endtry-iferror:                        Exception Handling.
                                                            (line  5499)
* endwith:                               The OOF base class.
                                                            (line 11246)
* engine:                                Engine.            (line 15163)
* engine performance:                    Performance.       (line 15586)
* engine portability:                    Portability.       (line 15177)
* engine.s:                              Produced code.     (line 15578)
* engines, gforth vs. gforth-fast vs. gforth-itc: Direct or Indirect Threaded?.
                                                            (line 15323)
* environment variables:                 Environment variables.
                                                            (line   697)
* environment variables <1>:             gforthmi.          (line 14990)
* environment wordset:                   Notation.          (line  3408)
* environment-wordlist:                  Environmental Queries.
                                                            (line  7815)
* environment?:                          Environmental Queries.
                                                            (line  7810)
* ENVIRONMENT? string length, maximum:   core-idef.         (line 13714)
* environmental queries:                 Environmental Queries.
                                                            (line  7792)
* environmental restrictions:            Standard conformance.
                                                            (line 13600)
* equality of floats:                    Floating Point.    (line  4114)
* erase:                                 Memory Blocks.     (line  4649)
* error messages:                        Error messages.    (line 13421)
* error output, finding the source location in Emacs: Emacs and Gforth.
                                                            (line 14636)
* error-color:                           Terminal output.   (line  9015)
* etags.fs:                              Emacs Tags.        (line 14672)
* evaluate:                              Input Sources.     (line  7193)
* event-loop:                            Pthreads.          (line 12240)
* event::                                Pthreads.          (line 12231)
* event>:                                Pthreads.          (line 12228)
* examining data and code:               Examining data.    (line 11721)
* exception:                             Exception Handling.
                                                            (line  5356)
* exception abort sequence of ABORT":    core-idef.         (line 13695)
* exception source code:                 Locating exception source.
                                                            (line 11684)
* exception when including source:       file-idef.         (line 14166)
* exception words, implementation-defined options: exception-idef.
                                                            (line 14092)
* exception words, system documentation: The optional Exception word set.
                                                            (line 14089)
* exceptions:                            Exception Handling.
                                                            (line  5331)
* exceptions tutorial:                   Exceptions Tutorial.
                                                            (line  2272)
* executable image file:                 Running Image Files.
                                                            (line 15044)
* execute:                               Execution token.   (line  6624)
* execute-parsing:                       The Input Stream.  (line  7524)
* execute-parsing-file:                  The Input Stream.  (line  7540)
* execute-task:                          Pthreads.          (line 12101)
* executing code on startup:             Invoking Gforth.   (line   586)
* execution frequency:                   Code Coverage.     (line 12029)
* execution semantics:                   Interpretation and Compilation Semantics.
                                                            (line  6414)
* execution token:                       Introducing the Text Interpreter.
                                                            (line  2752)
* execution token <1>:                   Execution token.   (line  6570)
* execution token of last defined word:  Anonymous Definitions.
                                                            (line  5792)
* execution token of words with undefined execution semantics: core-ambcond.
                                                            (line 13829)
* execution tokens tutorial:             Execution Tokens Tutorial.
                                                            (line  2186)
* exercises:                             Exercises.         (line  3363)
* EXIT:                                  Calls and returns. (line  5319)
* exit in m: ... ;m:                     Method conveniences.
                                                            (line 10631)
* exitm:                                 Objects Glossary.  (line 10980)
* exitm discussion:                      Method conveniences.
                                                            (line 10631)
* expect:                                Line input and conversion.
                                                            (line  9246)
* EXPECT, display after end of input:    core-idef.         (line 13691)
* EXPECT, editing:                       core-idef.         (line 13637)
* explicit register declarations:        Portability.       (line 15211)
* exponent too big for conversion (DF!, DF@, SF!, SF@): floating-ambcond.
                                                            (line 14294)
* extended records:                      Structure Usage.   (line 10150)
* f!:                                    Memory Access.     (line  4484)
* f! used with an address that is not float aligned: floating-ambcond.
                                                            (line 14259)
* f*:                                    Floating Point.    (line  4027)
* f**:                                   Floating Point.    (line  4046)
* f+:                                    Floating Point.    (line  4023)
* f,:                                    Dictionary allocation.
                                                            (line  4378)
* f, stack item type:                    Notation.          (line  3427)
* f-:                                    Floating Point.    (line  4025)
* f.:                                    Simple numeric output.
                                                            (line  8467)
* f.rdp:                                 Simple numeric output.
                                                            (line  8499)
* f.s:                                   Examining data.    (line 11730)
* f/:                                    Floating Point.    (line  4029)
* f0<:                                   Floating Point.    (line  4142)
* f0<=:                                  Floating Point.    (line  4144)
* f0<>:                                  Floating Point.    (line  4146)
* f0=:                                   Floating Point.    (line  4148)
* f0>:                                   Floating Point.    (line  4150)
* f0>=:                                  Floating Point.    (line  4152)
* f2*:                                   Floating Point.    (line  4067)
* f2/:                                   Floating Point.    (line  4070)
* f83name, stack item type:              Notation.          (line  3460)
* f<:                                    Floating Point.    (line  4134)
* f<=:                                   Floating Point.    (line  4136)
* f<>:                                   Floating Point.    (line  4132)
* f=:                                    Floating Point.    (line  4130)
* f>:                                    Floating Point.    (line  4138)
* f>=:                                   Floating Point.    (line  4140)
* f>buf-rdp:                             Formatted numeric output.
                                                            (line  8613)
* f>d:                                   Floating Point.    (line  4019)
* F>D, integer part of float cannot be represented by d: floating-ambcond.
                                                            (line 14317)
* f>l:                                   Locals implementation.
                                                            (line  9777)
* f>s:                                   Floating Point.    (line  4017)
* f>str-rdp:                             Formatted numeric output.
                                                            (line  8607)
* f@:                                    Memory Access.     (line  4481)
* f@ used with an address that is not float aligned: floating-ambcond.
                                                            (line 14259)
* f@local#:                              Locals implementation.
                                                            (line  9765)
* fabs:                                  Floating Point.    (line  4033)
* facility words, ambiguous conditions:  facility-ambcond.  (line 14128)
* facility words, implementation-defined options: facility-idef.
                                                            (line 14107)
* facility words, system documentation:  The optional Facility word set.
                                                            (line 14104)
* facos:                                 Floating Point.    (line  4090)
* FACOS, |float|>1:                      floating-ambcond.  (line 14314)
* facosh:                                Floating Point.    (line  4106)
* FACOSH, float<1:                       floating-ambcond.  (line 14298)
* factoring:                             Introduction.      (line  2702)
* factoring similar colon definitions:   CREATE..DOES> applications.
                                                            (line  6035)
* factoring tutorial:                    Factoring Tutorial.
                                                            (line  1292)
* falign:                                Dictionary allocation.
                                                            (line  4403)
* faligned:                              Address arithmetic.
                                                            (line  4587)
* falog:                                 Floating Point.    (line  4064)
* False:                                 Boolean Flags.     (line  3528)
* fam (file access method):              General files.     (line  7971)
* fasin:                                 Floating Point.    (line  4088)
* FASIN, |float|>1:                      floating-ambcond.  (line 14314)
* fasinh:                                Floating Point.    (line  4104)
* FASINH, float<0:                       floating-ambcond.  (line 14309)
* fatan:                                 Floating Point.    (line  4092)
* fatan2:                                Floating Point.    (line  4094)
* FATAN2, both arguments are equal to zero: floating-ambcond.
                                                            (line 14277)
* fatanh:                                Floating Point.    (line  4108)
* FATANH, |float|>1:                     floating-ambcond.  (line 14314)
* fconstant:                             Constants.         (line  5683)
* fcos:                                  Floating Point.    (line  4081)
* fcosh:                                 Floating Point.    (line  4100)
* fdepth:                                Examining data.    (line 11744)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                            (line 15900)
* fdrop:                                 Floating point stack.
                                                            (line  4224)
* fdup:                                  Floating point stack.
                                                            (line  4228)
* fe.:                                   Simple numeric output.
                                                            (line  8471)
* fexp:                                  Floating Point.    (line  4051)
* fexpm1:                                Floating Point.    (line  4053)
* ffield::                               Forth200x Structures.
                                                            (line 10328)
* field:                                 Structure Glossary.
                                                            (line 10273)
* field naming convention:               Structure Naming Convention.
                                                            (line 10197)
* field usage:                           Structure Usage.   (line 10105)
* field usage in class definition:       Basic Objects Usage.
                                                            (line 10492)
* field::                                Forth200x Structures.
                                                            (line 10324)
* file access methods used:              file-idef.         (line 14140)
* file exceptions:                       file-idef.         (line 14147)
* file input nesting, maximum depth:     file-idef.         (line 14175)
* file line terminator:                  file-idef.         (line 14151)
* file name format:                      file-idef.         (line 14156)
* file search path:                      Search Paths.      (line  8124)
* file words, ambiguous conditions:      file-ambcond.      (line 14195)
* file words, implementation-defined options: file-idef.    (line 14139)
* file words, system documentation:      The optional File-Access word set.
                                                            (line 14136)
* file-handling:                         General files.     (line  7968)
* file-position:                         General files.     (line  8022)
* file-size:                             General files.     (line  8026)
* file-status:                           General files.     (line  8020)
* FILE-STATUS, returned information:     file-idef.         (line 14160)
* filename-match:                        Directories.       (line  8101)
* filenames in assertion output:         Assertions.        (line 11952)
* filenames in ~~ output:                Debugging.         (line 11834)
* files:                                 Files.             (line  7884)
* files containing blocks:               file-idef.         (line 14182)
* files containing Forth code, tutorial: Using files for Forth code Tutorial.
                                                            (line  1052)
* files tutorial:                        Files Tutorial.    (line  2009)
* fill:                                  Memory Blocks.     (line  4662)
* find:                                  Word Lists.        (line  7636)
* find-name:                             Name token.        (line  6685)
* find-name-in:                          Name token.        (line  6689)
* first definition:                      Your first definition.
                                                            (line  3004)
* first field optimization:              Structure Usage.   (line 10170)
* first field optimization, implementation: Structure Implementation.
                                                            (line 10231)
* fkey.:                                 Single-key input.  (line  9175)
* flags on the command line:             Invoking Gforth.   (line   409)
* flags tutorial:                        Flags and Comparisons Tutorial.
                                                            (line  1444)
* flavours of locals:                    Gforth locals.     (line  9485)
* FLiteral:                              Literals.          (line  6798)
* fln:                                   Floating Point.    (line  4056)
* FLN, float<=0:                         floating-ambcond.  (line 14305)
* flnp1:                                 Floating Point.    (line  4058)
* FLNP1, float<=-1:                      floating-ambcond.  (line 14301)
* float:                                 Address arithmetic.
                                                            (line  4583)
* float%:                                Structure Glossary.
                                                            (line 10280)
* float+:                                Address arithmetic.
                                                            (line  4580)
* floating point arithmetic words:       Floating Point.    (line  3995)
* floating point numbers, format and range: floating-idef.  (line 14230)
* floating point tutorial:               Floating Point Tutorial.
                                                            (line  1937)
* floating point unidentified fault, integer division: core-ambcond.
                                                            (line 13841)
* floating-point arithmetic, pitfalls:   Floating Point.    (line  4001)
* floating-point comparisons:            Floating Point.    (line  4114)
* floating-point dividing by zero:       floating-ambcond.  (line 14289)
* floating-point numbers, input format:  Number Conversion. (line  7207)
* floating-point numbers, rounding or truncation: floating-idef.
                                                            (line 14237)
* floating-point result out of range:    floating-ambcond.  (line 14263)
* floating-point stack:                  Stack Manipulation.
                                                            (line  4168)
* floating-point stack in the standard:  Stack Manipulation.
                                                            (line  4163)
* floating-point stack manipulation words: Floating point stack.
                                                            (line  4220)
* floating-point stack size:             floating-idef.     (line 14243)
* floating-point stack width:            floating-idef.     (line 14249)
* Floating-point unidentified fault:     Integer division.  (line  3626)
* Floating-point unidentified fault (on integer division): Integer division.
                                                            (line  3755)
* floating-point unidentified fault, F>D: floating-ambcond. (line 14317)
* floating-point unidentified fault, FACOS, FASIN or FATANH: floating-ambcond.
                                                            (line 14314)
* floating-point unidentified fault, FACOSH: floating-ambcond.
                                                            (line 14298)
* floating-point unidentified fault, FASINH or FSQRT: floating-ambcond.
                                                            (line 14309)
* floating-point unidentified fault, FLN or FLOG: floating-ambcond.
                                                            (line 14305)
* floating-point unidentified fault, FLNP1: floating-ambcond.
                                                            (line 14301)
* floating-point unidentified fault, FP divide-by-zero: floating-ambcond.
                                                            (line 14289)
* floating-point words, ambiguous conditions: floating-ambcond.
                                                            (line 14254)
* floating-point words, implementation-defined options: floating-idef.
                                                            (line 14229)
* floating-point words, system documentation: The optional Floating-Point word set.
                                                            (line 14226)
* floating-stack:                        Floating point stack.
                                                            (line  4220)
* floats:                                Address arithmetic.
                                                            (line  4577)
* flog:                                  Floating Point.    (line  4061)
* FLOG, float<=0:                        floating-ambcond.  (line 14305)
* floor:                                 Floating Point.    (line  4039)
* FLOORED:                               Integer division.  (line  3752)
* floored division:                      Integer division.  (line  3631)
* flush:                                 Blocks.            (line  8374)
* flush-file:                            General files.     (line  8018)
* flush-icache:                          Assembler Definitions.
                                                            (line 12713)
* fm/mod:                                Integer division.  (line  3699)
* fmax:                                  Floating Point.    (line  4035)
* fmin:                                  Floating Point.    (line  4037)
* fnegate:                               Floating Point.    (line  4031)
* fnip:                                  Floating point stack.
                                                            (line  4226)
* FOR:                                   Arbitrary control structures.
                                                            (line  5179)
* FOR loops:                             Counted Loops.     (line  4929)
* foreign language interface:            C Interface.       (line 12276)
* FORGET, deleting the compilation word list: programming-ambcond.
                                                            (line 14387)
* FORGET, name can't be found:           programming-ambcond.
                                                            (line 14396)
* FORGET, removing a needed definition:  programming-ambcond.
                                                            (line 14413)
* forgeting words:                       Forgetting words.  (line 11764)
* form:                                  Terminal output.   (line  8998)
* format and range of floating point numbers: floating-idef.
                                                            (line 14230)
* format of glossary entries:            Notation.          (line  3373)
* formatted numeric output:              Formatted numeric output.
                                                            (line  8540)
* Forth:                                 Word Lists.        (line  7622)
* Forth - an introduction:               Introduction.      (line  2678)
* Forth mode in Emacs:                   Emacs and Gforth.  (line 14621)
* Forth source files:                    Forth source files.
                                                            (line  7895)
* Forth Tutorial:                        Tutorial.          (line   861)
* Forth-related information:             Forth-related information.
                                                            (line 15884)
* forth-wordlist:                        Word Lists.        (line  7570)
* forth.el:                              Emacs and Gforth.  (line 14621)
* fover:                                 Floating point stack.
                                                            (line  4230)
* FP tutorial:                           Floating Point Tutorial.
                                                            (line  1937)
* fp!:                                   Stack pointer manipulation.
                                                            (line  4288)
* fp.:                                   Simple numeric output.
                                                            (line  8479)
* fp0:                                   Stack pointer manipulation.
                                                            (line  4283)
* fp@:                                   Stack pointer manipulation.
                                                            (line  4286)
* fpath:                                 Source Search Paths.
                                                            (line  8156)
* fpick:                                 Floating point stack.
                                                            (line  4236)
* free:                                  Heap Allocation.   (line  4442)
* frequently asked questions:            Forth-related information.
                                                            (line 15884)
* frot:                                  Floating point stack.
                                                            (line  4239)
* fround:                                Floating Point.    (line  4043)
* fs.:                                   Simple numeric output.
                                                            (line  8475)
* fsin:                                  Floating Point.    (line  4079)
* fsincos:                               Floating Point.    (line  4083)
* fsinh:                                 Floating Point.    (line  4098)
* fsqrt:                                 Floating Point.    (line  4049)
* FSQRT, float<0:                        floating-ambcond.  (line 14309)
* fswap:                                 Floating point stack.
                                                            (line  4234)
* ftan:                                  Floating Point.    (line  4086)
* FTAN on an argument r1 where cos(r1) is zero: floating-ambcond.
                                                            (line 14281)
* ftanh:                                 Floating Point.    (line  4102)
* ftuck:                                 Floating point stack.
                                                            (line  4232)
* fully relocatable image files:         Fully Relocatable Image Files.
                                                            (line 14939)
* functions, tutorial:                   Colon Definitions Tutorial.
                                                            (line  1120)
* fvariable:                             Variables.         (line  5646)
* f_, stack item type:                   Notation.          (line  3448)
* f~:                                    Floating Point.    (line  4126)
* f~abs:                                 Floating Point.    (line  4123)
* f~rel:                                 Floating Point.    (line  4120)
* g:                                     Locating source code definitions.
                                                            (line 11613)
* gdb disassembler:                      Common Disassembler.
                                                            (line 12843)
* general control structures (case):     General control structures with CASE.
                                                            (line  5004)
* general files:                         General files.     (line  7968)
* get-block-fid:                         Blocks.            (line  8324)
* get-current:                           Word Lists.        (line  7579)
* get-dir:                               Directories.       (line  8106)
* get-order:                             Word Lists.        (line  7585)
* get-recognizers:                       Recognizers.       (line  7452)
* getenv:                                Passing Commands to the OS.
                                                            (line 13378)
* gforth:                                Environmental Queries.
                                                            (line  7819)
* GFORTH -- environment variable:         Environment variables.
                                                            (line   725)
* GFORTH -- environment variable <1>:     gforthmi.          (line 14990)
* Gforth - leaving:                      Leaving Gforth.    (line   613)
* gforth engine:                         Direct or Indirect Threaded?.
                                                            (line 15323)
* Gforth environment:                    Gforth Environment.
                                                            (line   400)
* Gforth extensions:                     Standard vs Extensions.
                                                            (line 14447)
* Gforth files:                          Gforth Files.      (line   738)
* Gforth locals:                         Gforth locals.     (line  9451)
* Gforth performance:                    Performance.       (line 15586)
* gforth-ditc:                           gforthmi.          (line 14990)
* gforth-fast and backtraces:            Error messages.    (line 13468)
* gforth-fast engine:                    Direct or Indirect Threaded?.
                                                            (line 15323)
* gforth-fast, difference from gforth:   Error messages.    (line 13468)
* gforth-itc engine:                     Direct or Indirect Threaded?.
                                                            (line 15327)
* gforth.el:                             Emacs and Gforth.  (line 14621)
* gforth.el, installation:               Installing gforth.el.
                                                            (line 14652)
* gforth.fi, relocatability:             Fully Relocatable Image Files.
                                                            (line 14939)
* GFORTHD -- environment variable:        Environment variables.
                                                            (line   727)
* GFORTHD -- environment variable <1>:    gforthmi.          (line 14990)
* GFORTHHIST -- environment variable:     Environment variables.
                                                            (line   699)
* gforthmi:                              gforthmi.          (line 14952)
* GFORTHPATH -- environment variable:     Environment variables.
                                                            (line   702)
* GFORTHSYSTEMPREFIX -- environment variable: Environment variables.
                                                            (line   718)
* gg:                                    Locating uses of a word.
                                                            (line 11666)
* giving a name to a library interface:  Defining library interfaces.
                                                            (line 12471)
* glossary notation format:              Notation.          (line  3373)
* GNU C for the engine:                  Portability.       (line 15194)
* goals of the Gforth project:           Goals.             (line   363)
* halt:                                  Pthreads.          (line 12133)
* header space:                          Word Lists.        (line  7547)
* heap allocation:                       Heap Allocation.   (line  4425)
* heap-new:                              Objects Glossary.  (line 10983)
* heap-new discussion:                   Creating objects.  (line 10540)
* heap-new usage:                        Basic Objects Usage.
                                                            (line 10514)
* help:                                  Help on Gforth.    (line   624)
* help <1>:                              Help on Gforth.    (line   626)
* help <2>:                              Locating documentation.
                                                            (line 11635)
* here:                                  Dictionary allocation.
                                                            (line  4361)
* hex:                                   Number Conversion. (line  7268)
* hex.:                                  Simple numeric output.
                                                            (line  8432)
* highlighting Forth code in Emacs:      Hilighting.        (line 14687)
* hilighting Forth code in Emacs:        Hilighting.        (line 14687)
* history file:                          Command-line editing.
                                                            (line   674)
* hold:                                  Formatted numeric output.
                                                            (line  8587)
* how::                                  Class Declaration. (line 11284)
* hybrid direct/indirect threaded code:  Direct or Indirect Threaded?.
                                                            (line 15315)
* i:                                     Counted Loops.     (line  4851)
* I/O - blocks:                          Blocks.            (line  8199)
* I/O - file-handling:                   Files.             (line  7884)
* I/O - keyboard and display:            Other I/O.         (line  8417)
* I/O - see character strings:           String Formats.    (line  8690)
* I/O - see input:                       Line input and conversion.
                                                            (line  9188)
* I/O exception in block transfer:       block-ambcond.     (line 14053)
* id.:                                   Name token.        (line  6724)
* IDE (integrated development environment): Locating source code definitions.
                                                            (line 11572)
* IF:                                    Arbitrary control structures.
                                                            (line  5090)
* IF control structure:                  Selection.         (line  4721)
* if, tutorial:                          Conditional execution Tutorial.
                                                            (line  1398)
* iferror:                               Exception Handling.
                                                            (line  5423)
* image file:                            Image Files.       (line 14789)
* image file background:                 Image File Background.
                                                            (line 14817)
* image file initialization sequence:    Modifying the Startup Sequence.
                                                            (line 15117)
* image file invocation:                 Running Image Files.
                                                            (line 15040)
* image file loader:                     Image File Background.
                                                            (line 14852)
* image file, data-relocatable:          Data-Relocatable Image Files.
                                                            (line 14922)
* image file, executable:                Running Image Files.
                                                            (line 15044)
* image file, fully relocatable:         Fully Relocatable Image Files.
                                                            (line 14939)
* image file, non-relocatable:           Non-Relocatable Image Files.
                                                            (line 14903)
* image file, stack and dictionary sizes: Stack and Dictionary Sizes.
                                                            (line 15019)
* image file, turnkey applications:      Modifying the Startup Sequence.
                                                            (line 15133)
* image license:                         Image Licensing Issues.
                                                            (line 14796)
* immediate:                             Interpretation and Compilation Semantics.
                                                            (line  6428)
* immediate words:                       How does that work?.
                                                            (line  3169)
* immediate words <1>:                   Interpretation and Compilation Semantics.
                                                            (line  6426)
* immediate, tutorial:                   Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                            (line  2113)
* implementation:                        Objects Glossary.  (line 10986)
* implementation of locals:              Locals implementation.
                                                            (line  9757)
* implementation of structures:          Structure Implementation.
                                                            (line 10213)
* implementation usage:                  Object Interfaces. (line 10770)
* implementation-defined options, block words: block-idef.  (line 14037)
* implementation-defined options, core words: core-idef.    (line 13626)
* implementation-defined options, exception words: exception-idef.
                                                            (line 14092)
* implementation-defined options, facility words: facility-idef.
                                                            (line 14107)
* implementation-defined options, file words: file-idef.    (line 14139)
* implementation-defined options, floating-point words: floating-idef.
                                                            (line 14229)
* implementation-defined options, locals words: locals-idef.
                                                            (line 14331)
* implementation-defined options, memory-allocation words: memory-idef.
                                                            (line 14354)
* implementation-defined options, programming-tools words: programming-idef.
                                                            (line 14366)
* implementation-defined options, search-order words: search-idef.
                                                            (line 14421)
* in-lining of constants:                Constants.         (line  5698)
* include:                               Forth source files.
                                                            (line  7935)
* include search path:                   Search Paths.      (line  8124)
* include, placement in files:           Emacs Tags.        (line 14672)
* include-file:                          Forth source files.
                                                            (line  7921)
* INCLUDE-FILE, file-id is invalid:      file-ambcond.      (line 14204)
* INCLUDE-FILE, I/O exception reading or closing file-id: file-ambcond.
                                                            (line 14208)
* included:                              Forth source files.
                                                            (line  7925)
* INCLUDED, I/O exception reading or closing file-id: file-ambcond.
                                                            (line 14208)
* INCLUDED, named file cannot be opened: file-ambcond.      (line 14212)
* included?:                             Forth source files.
                                                            (line  7928)
* including files:                       Forth source files.
                                                            (line  7895)
* including files, stack effect:         Forth source files.
                                                            (line  7909)
* indentation of Forth code in Emacs:    Auto-Indentation.  (line 14725)
* indirect threaded inner interpreter:   Threading.         (line 15231)
* infile-execute:                        Redirection.       (line  8066)
* info-color:                            Terminal output.   (line  9021)
* inheritance:                           Object-Oriented Terminology.
                                                            (line 10409)
* init:                                  The OOF base class.
                                                            (line 11190)
* init-asm:                              Assembler Definitions.
                                                            (line 12685)
* init-object:                           Objects Glossary.  (line 10990)
* init-object discussion:                Creating objects.  (line 10546)
* initialization sequence of image file: Modifying the Startup Sequence.
                                                            (line 15117)
* initiate:                              Pthreads.          (line 12120)
* inner interpreter implementation:      Threading.         (line 15225)
* inner interpreter optimization:        Scheduling.        (line 15252)
* inner interpreter, direct threaded:    Threading.         (line 15242)
* inner interpreter, indirect threaded:  Threading.         (line 15231)
* input buffer:                          The Text Interpreter.
                                                            (line  7021)
* input format for double-cell numbers:  Number Conversion. (line  7207)
* input format for floating-point numbers: Number Conversion.
                                                            (line  7207)
* input format for single-cell numbers:  Number Conversion. (line  7207)
* input from pipes:                      Gforth in pipes.   (line   759)
* input line size, maximum:              file-idef.         (line 14179)
* input line terminator:                 core-idef.         (line 13699)
* Input Redirection:                     Redirection.       (line  8048)
* input sources:                         Input Sources.     (line  7158)
* input stream:                          The Input Stream.  (line  7464)
* input, linewise from terminal:         Line input and conversion.
                                                            (line  9188)
* input, single-key:                     Single-key input.  (line  9044)
* insert:                                String words.      (line  8861)
* inst-value:                            Objects Glossary.  (line 10994)
* inst-value usage:                      Method conveniences.
                                                            (line 10660)
* inst-value visibility:                 Classes and Scoping.
                                                            (line 10693)
* inst-var:                              Objects Glossary.  (line 10998)
* inst-var implementation:               Objects Implementation.
                                                            (line 10844)
* inst-var usage:                        Method conveniences.
                                                            (line 10638)
* inst-var visibility:                   Classes and Scoping.
                                                            (line 10693)
* instance variables:                    Object-Oriented Terminology.
                                                            (line 10383)
* instruction pointer:                   Threading.         (line 15235)
* insufficient data stack or return stack space: core-ambcond.
                                                            (line 13846)
* insufficient space for loop control parameters: core-ambcond.
                                                            (line 13859)
* insufficient space in the dictionary:  core-ambcond.      (line 13862)
* integer types, ranges:                 core-idef.         (line 13739)
* integrated development environment:    Locating source code definitions.
                                                            (line 11572)
* interface:                             Objects Glossary.  (line 11002)
* interface implementation:              Objects Implementation.
                                                            (line 10855)
* interface to C functions:              C Interface.       (line 12276)
* interface usage:                       Object Interfaces. (line 10770)
* interfaces for objects:                Object Interfaces. (line 10749)
* interpret state:                       The Text Interpreter.
                                                            (line  7012)
* Interpret/Compile states:              Interpret/Compile states.
                                                            (line  7336)
* interpret/compile::                    Combined words.    (line  6461)
* interpretation semantics:              How does that work?.
                                                            (line  3141)
* interpretation semantics <1>:          Interpretation and Compilation Semantics.
                                                            (line  6402)
* interpretation semantics tutorial:     Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                            (line  2113)
* interpreter - outer:                   The Text Interpreter.
                                                            (line  7007)
* interpreter directives:                Interpreter Directives.
                                                            (line  7350)
* Interpreting a compile-only word:      core-ambcond.      (line 13869)
* Interpreting a compile-only word, for a local: locals-ambcond.
                                                            (line 14341)
* interpreting a word with undefined interpretation semantics: core-ambcond.
                                                            (line 13869)
* invalid block number:                  block-ambcond.     (line 14057)
* Invalid memory address:                core-ambcond.      (line 13818)
* Invalid memory address, stack overflow: core-ambcond.     (line 13846)
* Invalid name argument, TO:             core-ambcond.      (line 13966)
* Invalid name argument, TO <1>:         locals-ambcond.    (line 14346)
* invert:                                Bitwise operations.
                                                            (line  3892)
* invoking a selector:                   Object-Oriented Terminology.
                                                            (line 10397)
* invoking Gforth:                       Invoking Gforth.   (line   409)
* invoking image files:                  Running Image Files.
                                                            (line 15040)
* ior type description:                  Notation.          (line  3458)
* ior values and meaning:                file-idef.         (line 14169)
* ior values and meaning <1>:            memory-idef.       (line 14355)
* IS:                                    Deferred Words.    (line  6339)
* is:                                    The OOF base class.
                                                            (line 11230)
* items on the stack after interpretation: Stack depth changes.
                                                            (line 13528)
* j:                                     Counted Loops.     (line  4853)
* k:                                     Counted Loops.     (line  4855)
* k-alt-mask:                            Single-key input.  (line  9149)
* k-ctrl-mask:                           Single-key input.  (line  9147)
* k-delete:                              Single-key input.  (line  9112)
* k-down:                                Single-key input.  (line  9097)
* k-end:                                 Single-key input.  (line  9102)
* k-f1:                                  Single-key input.  (line  9116)
* k-f10:                                 Single-key input.  (line  9134)
* k-f11:                                 Single-key input.  (line  9136)
* k-f12:                                 Single-key input.  (line  9138)
* k-f2:                                  Single-key input.  (line  9118)
* k-f3:                                  Single-key input.  (line  9120)
* k-f4:                                  Single-key input.  (line  9122)
* k-f5:                                  Single-key input.  (line  9124)
* k-f6:                                  Single-key input.  (line  9126)
* k-f7:                                  Single-key input.  (line  9128)
* k-f8:                                  Single-key input.  (line  9130)
* k-f9:                                  Single-key input.  (line  9132)
* k-home:                                Single-key input.  (line  9099)
* k-insert:                              Single-key input.  (line  9110)
* k-left:                                Single-key input.  (line  9091)
* k-next:                                Single-key input.  (line  9107)
* k-prior:                               Single-key input.  (line  9104)
* k-right:                               Single-key input.  (line  9093)
* k-shift-mask:                          Single-key input.  (line  9145)
* k-up:                                  Single-key input.  (line  9095)
* kern*.fi, relocatability:              Fully Relocatable Image Files.
                                                            (line 14939)
* key:                                   Single-key input.  (line  9047)
* key-file:                              General files.     (line  7999)
* key?:                                  Single-key input.  (line  9050)
* key?-file:                             General files.     (line  8006)
* keyboard events, encoding in EKEY:     facility-idef.     (line 14108)
* Kuehling, David:                       Emacs and Gforth.  (line 14621)
* l:                                     Locating source code definitions.
                                                            (line 11602)
* l!:                                    Memory Access.     (line  4518)
* labels as values:                      Threading.         (line 15225)
* laddr#:                                Locals implementation.
                                                            (line  9767)
* LANG -- environment variable:           Environment variables.
                                                            (line   707)
* last word was headerless:              core-ambcond.      (line 13963)
* late binding:                          Class Binding.     (line 10574)
* latest:                                Name token.        (line  6693)
* latestxt:                              Anonymous Definitions.
                                                            (line  5792)
* LC_ALL -- environment variable:         Environment variables.
                                                            (line   709)
* LC_CTYPE -- environment variable:       Environment variables.
                                                            (line   711)
* LEAVE:                                 Arbitrary control structures.
                                                            (line  5194)
* leaving definitions, tutorial:         Leaving definitions or loops Tutorial.
                                                            (line  1685)
* leaving Gforth:                        Leaving Gforth.    (line   613)
* leaving loops, tutorial:               Leaving definitions or loops Tutorial.
                                                            (line  1685)
* length of a line affected by \:        block-idef.        (line 14042)
* lib-error:                             Low-Level C Interface Words.
                                                            (line 12628)
* lib-sym:                               Low-Level C Interface Words.
                                                            (line 12626)
* Libraries in C interface:              Declaring OS-level libraries.
                                                            (line 12525)
* library interface names:               Defining library interfaces.
                                                            (line 12471)
* license:                               Help on Gforth.    (line   636)
* license for images:                    Image Licensing Issues.
                                                            (line 14796)
* lifetime of locals:                    How long do locals live?.
                                                            (line  9680)
* line input from terminal:              Line input and conversion.
                                                            (line  9188)
* line terminator on input:              core-idef.         (line 13699)
* link:                                  The OOF base class.
                                                            (line 11228)
* list:                                  Blocks.            (line  8331)
* LIST display format:                   block-idef.        (line 14038)
* list-size:                             Locals implementation.
                                                            (line  9849)
* Literal:                               Literals.          (line  6783)
* literal tutorial:                      Literal Tutorial.  (line  2499)
* Literals:                              Literals.          (line  6747)
* ll:                                    Locating uses of a word.
                                                            (line 11671)
* load:                                  Blocks.            (line  8377)
* load-cov:                              Code Coverage.     (line 12072)
* loader for image files:                Image File Background.
                                                            (line 14852)
* loading files at startup:              Invoking Gforth.   (line   586)
* loading Forth code, tutorial:          Using files for Forth code Tutorial.
                                                            (line  1052)
* local in interpretation state:         locals-ambcond.    (line 14341)
* local variables, tutorial:             Local Variables Tutorial.
                                                            (line  1363)
* locale and case-sensitivity:           core-idef.         (line 13654)
* locals:                                Locals.            (line  9437)
* locals and return stack:               Return stack.      (line  4244)
* locals flavours:                       Gforth locals.     (line  9485)
* locals implementation:                 Locals implementation.
                                                            (line  9757)
* locals information on the control-flow stack: Locals implementation.
                                                            (line  9835)
* locals lifetime:                       How long do locals live?.
                                                            (line  9680)
* locals programming style:              Locals programming style.
                                                            (line  9694)
* locals stack:                          Stack Manipulation.
                                                            (line  4173)
* locals stack <1>:                      Locals implementation.
                                                            (line  9757)
* locals types:                          Gforth locals.     (line  9477)
* locals visibility:                     Where are locals visible by name?.
                                                            (line  9528)
* locals words, ambiguous conditions:    locals-ambcond.    (line 14340)
* locals words, implementation-defined options: locals-idef.
                                                            (line 14331)
* locals words, system documentation:    The optional Locals word set.
                                                            (line 14328)
* locals, default type:                  Gforth locals.     (line  9496)
* locals, Gforth style:                  Gforth locals.     (line  9451)
* locals, maximum number in a definition: locals-idef.      (line 14332)
* locals, Standard Forth style:          Standard Forth locals.
                                                            (line  9963)
* locate:                                Locating source code definitions.
                                                            (line 11592)
* locate <1>:                            Debugging.         (line 11874)
* lock:                                  Pthreads.          (line 12175)
* long long:                             Portability.       (line 15194)
* LOOP:                                  Arbitrary control structures.
                                                            (line  5182)
* loop control parameters not available: core-ambcond.      (line 13958)
* loops without count:                   Simple Loops.      (line  4803)
* loops, counted:                        Counted Loops.     (line  4834)
* loops, counted, tutorial:              Counted loops Tutorial.
                                                            (line  1593)
* loops, endless:                        Simple Loops.      (line  4825)
* loops, indefinite, tutorial:           General Loops Tutorial.
                                                            (line  1528)
* lp!:                                   Stack pointer manipulation.
                                                            (line  4302)
* lp! <1>:                               Locals implementation.
                                                            (line  9773)
* lp+!#:                                 Locals implementation.
                                                            (line  9769)
* lp0:                                   Stack pointer manipulation.
                                                            (line  4297)
* lp@:                                   Stack pointer manipulation.
                                                            (line  4300)
* lshift:                                Bitwise operations.
                                                            (line  3894)
* LSHIFT, large shift counts:            core-ambcond.      (line 13987)
* m*:                                    Mixed precision.   (line  3619)
* m*/:                                   Integer division.  (line  3745)
* m+:                                    Mixed precision.   (line  3617)
* m::                                    Objects Glossary.  (line 11005)
* m: usage:                              Method conveniences.
                                                            (line 10628)
* macros:                                Compiling words.   (line  6736)
* Macros:                                Macros.            (line  6823)
* macros, advanced tutorial:             Advanced macros Tutorial.
                                                            (line  2527)
* mapping block ranges to files:         file-idef.         (line 14182)
* marker:                                Forgetting words.  (line 11767)
* max:                                   Single precision.  (line  3578)
* maxalign:                              Dictionary allocation.
                                                            (line  4415)
* maxaligned:                            Address arithmetic.
                                                            (line  4613)
* maxdepth-.s:                           Examining data.    (line 11735)
* maximum depth of file input nesting:   file-idef.         (line 14175)
* maximum number of locals in a definition: locals-idef.    (line 14332)
* maximum number of word lists in search order: search-idef.
                                                            (line 14422)
* maximum size of a counted string:      core-idef.         (line 13704)
* maximum size of a definition name, in characters: core-idef.
                                                            (line 13711)
* maximum size of a parsed string:       core-idef.         (line 13708)
* maximum size of input line:            file-idef.         (line 14179)
* maximum string length for ENVIRONMENT?, in characters: core-idef.
                                                            (line 13714)
* memory access words:                   Memory Access.     (line  4459)
* memory access/allocation tutorial:     Memory Tutorial.   (line  1766)
* memory alignment tutorial:             Alignment Tutorial.
                                                            (line  1905)
* memory block words:                    Memory Blocks.     (line  4633)
* memory overcommit for dictionary and stacks: Invoking Gforth.
                                                            (line   488)
* memory words:                          Memory.            (line  4307)
* memory-allocation word set:            Heap Allocation.   (line  4425)
* memory-allocation words, implementation-defined options: memory-idef.
                                                            (line 14354)
* memory-allocation words, system documentation: The optional Memory-Allocation word set.
                                                            (line 14351)
* message send:                          Object-Oriented Terminology.
                                                            (line 10397)
* metacompiler:                          cross.fs.          (line 15005)
* metacompiler <1>:                      Cross Compiler.    (line 15679)
* method:                                Object-Oriented Terminology.
                                                            (line 10392)
* method <1>:                            Objects Glossary.  (line 11015)
* method <2>:                            Class Declaration. (line 11274)
* method <3>:                            Basic Mini-OOF Usage.
                                                            (line 11312)
* method conveniences:                   Method conveniences.
                                                            (line 10622)
* method map:                            Objects Implementation.
                                                            (line 10801)
* method selector:                       Object-Oriented Terminology.
                                                            (line 10386)
* method usage:                          Basic OOF Usage.   (line 11109)
* methods:                               Objects Glossary.  (line 11019)
* methods...end-methods:                 Dividing classes.  (line 10713)
* min:                                   Single precision.  (line  3576)
* mini-oof:                              Mini-OOF.          (line 11296)
* mini-oof example:                      Mini-OOF Example.  (line 11337)
* mini-oof usage:                        Basic Mini-OOF Usage.
                                                            (line 11304)
* mini-oof.fs, differences to other models: Comparison with other object models.
                                                            (line 11556)
* minimum search order:                  search-idef.       (line 14425)
* miscellaneous words:                   Miscellaneous Words.
                                                            (line 13406)
* mixed precision arithmetic words:      Mixed precision.   (line  3617)
* mkdir-parents:                         Directories.       (line  8117)
* mod:                                   Integer division.  (line  3673)
* modf:                                  Integer division.  (line  3678)
* modf-stage2m:                          Two-stage integer division.
                                                            (line  3824)
* modifying >IN:                         How does that work?.
                                                            (line  3096)
* modifying the contents of the input buffer or a string literal: core-ambcond.
                                                            (line 13879)
* mods:                                  Integer division.  (line  3676)
* modulus:                               Integer division.  (line  3626)
* most recent definition does not have a name (IMMEDIATE): core-ambcond.
                                                            (line 13963)
* motivation for object-oriented programming: Why object-oriented programming?.
                                                            (line 10347)
* move:                                  Memory Blocks.     (line  4645)
* ms:                                    Keeping track of Time.
                                                            (line 13387)
* MS, repeatability to be expected:      facility-idef.     (line 14120)
* Multiple exits from begin:             BEGIN loops with multiple exits.
                                                            (line  4948)
* multitasker:                           Multitasker.       (line 12081)
* Must now be used inside C-LIBRARY, see C interface doc: Migrating the C interface from earlier Gforth.
                                                            (line 12639)
* n:                                     Locating source code definitions.
                                                            (line 11605)
* n, stack item type:                    Notation.          (line  3433)
* naligned:                              Structure Glossary.
                                                            (line 10282)
* name:                                  The Input Stream.  (line  7495)
* name dictionary:                       Introducing the Text Interpreter.
                                                            (line  2748)
* name field address:                    Name token.        (line  6675)
* name lookup, case-sensitivity:         core-idef.         (line 13654)
* name not defined by VALUE or (LOCAL) used by TO: locals-ambcond.
                                                            (line 14346)
* name not defined by VALUE used by TO:  core-ambcond.      (line 13966)
* name not found:                        core-ambcond.      (line 13812)
* name not found (', POSTPONE, ['], [COMPILE]): core-ambcond.
                                                            (line 13971)
* name token:                            Name token.        (line  6671)
* name, maximum length:                  core-idef.         (line 13711)
* name>comp:                             Name token.        (line  6718)
* name>compile:                          Name token.        (line  6708)
* name>int:                              Name token.        (line  6711)
* name>interpret:                        Name token.        (line  6704)
* name>string:                           Name token.        (line  6721)
* name?int:                              Name token.        (line  6714)
* names for defined words:               Supplying names.   (line  5846)
* needs:                                 Forth source files.
                                                            (line  7947)
* negate:                                Single precision.  (line  3572)
* negative increment for counted loops:  Counted Loops.     (line  4902)
* Neon model:                            Comparison with other object models.
                                                            (line 11506)
* nested colon definitions:              Quotations.        (line  5816)
* new:                                   The OOF base class.
                                                            (line 11197)
* new <1>:                               Basic Mini-OOF Usage.
                                                            (line 11327)
* newline character on input:            core-idef.         (line 13699)
* newtask:                               Pthreads.          (line 12095)
* newtask4:                              Pthreads.          (line 12107)
* new[]:                                 The OOF base class.
                                                            (line 11199)
* NEXT:                                  Arbitrary control structures.
                                                            (line  5191)
* NEXT, direct threaded:                 Threading.         (line 15242)
* NEXT, indirect threaded:               Threading.         (line 15231)
* next-arg:                              OS command line arguments.
                                                            (line  9384)
* next-case:                             Arbitrary control structures.
                                                            (line  5223)
* nextname:                              Supplying names.   (line  5850)
* NFA:                                   Name token.        (line  6675)
* nip:                                   Data stack.        (line  4180)
* non-graphic characters and EMIT:       core-idef.         (line 13633)
* non-relocatable image files:           Non-Relocatable Image Files.
                                                            (line 14903)
* noname:                                Anonymous Definitions.
                                                            (line  5787)
* notation of glossary entries:          Notation.          (line  3373)
* nothrow:                               Exception Handling.
                                                            (line  5377)
* nt:                                    Locating exception source.
                                                            (line 11686)
* NT Forth performance:                  Performance.       (line 15602)
* number conversion:                     Number Conversion. (line  7207)
* number conversion - traps for the unwary: Number Conversion.
                                                            (line  7294)
* number of bits in one address unit:    core-idef.         (line 13731)
* number representation and arithmetic:  core-idef.         (line 13735)
* numeric comparison words:              Numeric comparison.
                                                            (line  3916)
* numeric output - formatted:            Formatted numeric output.
                                                            (line  8540)
* numeric output - simple/free-format:   Simple numeric output.
                                                            (line  8420)
* nw:                                    Locating uses of a word.
                                                            (line 11656)
* object:                                Object-Oriented Terminology.
                                                            (line 10379)
* object <1>:                            Objects Glossary.  (line 11024)
* object <2>:                            Basic Mini-OOF Usage.
                                                            (line 11309)
* object allocation options:             Creating objects.  (line 10540)
* object class:                          The Objects base class.
                                                            (line 10531)
* object creation:                       Creating objects.  (line 10540)
* object interfaces:                     Object Interfaces. (line 10749)
* object models, comparison:             Comparison with other object models.
                                                            (line 11499)
* object-map discussion:                 Objects Implementation.
                                                            (line 10797)
* object-oriented programming:           Objects.           (line 10418)
* object-oriented programming <1>:       OOF.               (line 11068)
* object-oriented programming motivation: Why object-oriented programming?.
                                                            (line 10347)
* object-oriented programming style:     Object-Oriented Programming Style.
                                                            (line 10555)
* object-oriented terminology:           Object-Oriented Terminology.
                                                            (line 10372)
* objects:                               Objects.           (line 10418)
* objects, basic usage:                  Basic Objects Usage.
                                                            (line 10469)
* objects.fs:                            Objects.           (line 10418)
* objects.fs <1>:                        OOF.               (line 11068)
* objects.fs Glossary:                   Objects Glossary.  (line 10911)
* objects.fs implementation:             Objects Implementation.
                                                            (line 10797)
* objects.fs properties:                 Properties of the Objects model.
                                                            (line 10435)
* of:                                    Arbitrary control structures.
                                                            (line  5227)
* off:                                   Boolean Flags.     (line  3533)
* on:                                    Boolean Flags.     (line  3530)
* once:                                  Debugging.         (line 11839)
* Only:                                  Word Lists.        (line  7626)
* oof:                                   OOF.               (line 11068)
* oof.fs:                                Objects.           (line 10418)
* oof.fs <1>:                            OOF.               (line 11068)
* oof.fs base class:                     The OOF base class.
                                                            (line 11164)
* oof.fs properties:                     Properties of the OOF model.
                                                            (line 11081)
* oof.fs usage:                          Basic OOF Usage.   (line 11104)
* oof.fs, differences to other models:   Comparison with other object models.
                                                            (line 11541)
* open-blocks:                           Blocks.            (line  8312)
* open-dir:                              Directories.       (line  8083)
* open-file:                             General files.     (line  7984)
* open-lib:                              Low-Level C Interface Words.
                                                            (line 12624)
* open-path-file:                        General Search Paths.
                                                            (line  8171)
* open-pipe:                             Pipes.             (line  9265)
* operating system - passing commands:   Passing Commands to the OS.
                                                            (line 13360)
* operator's terminal facilities available: core-other.     (line 14007)
* options on the command line:           Invoking Gforth.   (line   409)
* or:                                    Bitwise operations.
                                                            (line  3888)
* order:                                 Word Lists.        (line  7630)
* orig, control-flow stack item:         Arbitrary control structures.
                                                            (line  5085)
* OS command line arguments:             OS command line arguments.
                                                            (line  9375)
* os-class:                              Environmental Queries.
                                                            (line  7824)
* other system documentation, block words: block-other.     (line 14071)
* other system documentation, core words: core-other.       (line 14003)
* outer interpreter:                     Introducing the Text Interpreter.
                                                            (line  2711)
* outer interpreter <1>:                 Stacks and Postfix notation.
                                                            (line  2819)
* outer interpreter <2>:                 The Text Interpreter.
                                                            (line  7007)
* outfile-execute:                       Redirection.       (line  8063)
* output in pipes:                       Gforth in pipes.   (line   767)
* Output Redirection:                    Redirection.       (line  8048)
* output to terminal:                    Terminal output.   (line  8990)
* over:                                  Data stack.        (line  4184)
* overcommit memory for dictionary and stacks: Invoking Gforth.
                                                            (line   488)
* overflow of the pictured numeric output string: core-ambcond.
                                                            (line 13882)
* overrides:                             Objects Glossary.  (line 11027)
* overrides usage:                       Basic Objects Usage.
                                                            (line 10492)
* pad:                                   Memory Blocks.     (line  4701)
* PAD size:                              core-idef.         (line 13773)
* PAD use by nonstandard words:          core-other.        (line 14004)
* page:                                  Terminal output.   (line  9002)
* parameter stack:                       Stack Manipulation.
                                                            (line  4165)
* parameters are not of the same type (DO, ?DO, WITHIN): core-ambcond.
                                                            (line 13974)
* parent class:                          Object-Oriented Terminology.
                                                            (line 10409)
* parent class binding:                  Class Binding.     (line 10595)
* parse:                                 The Input Stream.  (line  7483)
* parse area:                            The Text Interpreter.
                                                            (line  7048)
* parse-name:                            The Input Stream.  (line  7488)
* parse-word:                            The Input Stream.  (line  7491)
* parsed string overflow:                core-ambcond.      (line 13885)
* parsed string, maximum size:           core-idef.         (line 13708)
* parsing words:                         How does that work?.
                                                            (line  3084)
* parsing words <1>:                     How does that work?.
                                                            (line  3108)
* parsing words <2>:                     The Text Interpreter.
                                                            (line  7070)
* pass:                                  Pthreads.          (line 12117)
* patching threaded code:                Dynamic Superinstructions.
                                                            (line 15419)
* path for included:                     Search Paths.      (line  8124)
* path+:                                 General Search Paths.
                                                            (line  8187)
* path=:                                 General Search Paths.
                                                            (line  8190)
* pause:                                 Pthreads.          (line 12123)
* pedigree of Gforth:                    Origin.            (line 15846)
* perform:                               Execution token.   (line  6627)
* performance of some Forth interpreters: Performance.      (line 15586)
* persistent form of dictionary:         Image Files.       (line 14789)
* PFE performance:                       Performance.       (line 15602)
* pi:                                    Floating Point.    (line  4110)
* pick:                                  Data stack.        (line  4190)
* pictured numeric output:               Formatted numeric output.
                                                            (line  8540)
* pictured numeric output buffer, size:  core-idef.         (line 13769)
* pictured numeric output string, overflow: core-ambcond.   (line 13882)
* pipes, creating your own:              Pipes.             (line  9261)
* pipes, Gforth as part of:              Gforth in pipes.   (line   756)
* postpone:                              Macros.            (line  6840)
* postpone <1>:                          The OOF base class.
                                                            (line 11237)
* POSTPONE applied to [IF]:              programming-ambcond.
                                                            (line 14404)
* POSTPONE or [COMPILE] applied to TO:   core-ambcond.      (line 13979)
* postpone tutorial:                     POSTPONE Tutorial. (line  2445)
* postpone,:                             Compilation token. (line  6657)
* Pountain's object-oriented model:      Comparison with other object models.
                                                            (line 11521)
* precision:                             Simple numeric output.
                                                            (line  8491)
* precompiled Forth code:                Image Files.       (line 14789)
* previous:                              Word Lists.        (line  7614)
* previous, search order empty:          search-ambcond.    (line 14439)
* primitive source format:               Automatic Generation.
                                                            (line 15462)
* primitive-centric threaded code:       Direct or Indirect Threaded?.
                                                            (line 15300)
* primitives, assembly code listing:     Produced code.     (line 15578)
* primitives, automatic generation:      Automatic Generation.
                                                            (line 15453)
* primitives, implementation:            Primitives.        (line 15450)
* primitives, keeping the TOS in a register: TOS Optimization.
                                                            (line 15532)
* prims2x.fs:                            Automatic Generation.
                                                            (line 15453)
* print:                                 Objects Glossary.  (line 11034)
* printdebugdata:                        Debugging.         (line 11825)
* private discussion:                    Classes and Scoping.
                                                            (line 10702)
* procedures, tutorial:                  Colon Definitions Tutorial.
                                                            (line  1120)
* program data space available:          core-other.        (line 14013)
* programming style, arbitrary control structures: Arbitrary control structures.
                                                            (line  5247)
* programming style, locals:             Locals programming style.
                                                            (line  9694)
* programming style, object-oriented:    Object-Oriented Programming Style.
                                                            (line 10555)
* programming tools:                     Programming Tools. (line 11569)
* programming-tools words, ambiguous conditions: programming-ambcond.
                                                            (line 14386)
* programming-tools words, implementation-defined options: programming-idef.
                                                            (line 14366)
* programming-tools words, system documentation: The optional Programming-Tools word set.
                                                            (line 14363)
* prompt:                                core-idef.         (line 13783)
* pronounciation of words:               Notation.          (line  3405)
* protected:                             Objects Glossary.  (line 11038)
* protected discussion:                  Classes and Scoping.
                                                            (line 10702)
* pthread:                               Pthreads.          (line 12090)
* pthread_cond_broadcast:                Pthreads.          (line 12267)
* pthread_cond_signal:                   Pthreads.          (line 12265)
* pthread_cond_timedwait:                Pthreads.          (line 12271)
* pthread_cond_wait:                     Pthreads.          (line 12269)
* ptr:                                   The OOF base class.
                                                            (line 11203)
* ptr <1>:                               Class Declaration. (line 11258)
* public:                                Objects Glossary.  (line 11041)
* query:                                 Input Sources.     (line  7199)
* quit:                                  Miscellaneous Words.
                                                            (line 13409)
* quotations:                            Quotations.        (line  5816)
* r, stack item type:                    Notation.          (line  3441)
* r/o:                                   General files.     (line  7971)
* r/w:                                   General files.     (line  7973)
* r>:                                    Return stack.      (line  4253)
* r@:                                    Return stack.      (line  4255)
* ranges for integer types:              core-idef.         (line 13739)
* rdrop:                                 Return stack.      (line  4257)
* read-dir:                              Directories.       (line  8087)
* read-file:                             General files.     (line  7995)
* read-line:                             General files.     (line  7997)
* read-only data space regions:          core-idef.         (line 13746)
* reading from file positions not yet written: file-ambcond.
                                                            (line 14200)
* receiving object:                      Object-Oriented Terminology.
                                                            (line 10403)
* reciprocal of integer:                 Two-stage integer division.
                                                            (line  3770)
* recongizers:                           Recognizers.       (line  7433)
* records:                               Structures.        (line 10019)
* records tutorial:                      Arrays and Records Tutorial.
                                                            (line  2420)
* recover (old Gforth versions):         Exception Handling.
                                                            (line  5462)
* recurse:                               Calls and returns. (line  5293)
* RECURSE appears after DOES>:           core-ambcond.      (line 13927)
* recursion tutorial:                    Recursion Tutorial.
                                                            (line  1646)
* recursive:                             Calls and returns. (line  5289)
* recursive definitions:                 Calls and returns. (line  5283)
* Redirection:                           Redirection.       (line  8048)
* refill:                                The Input Stream.  (line  7507)
* relocating loader:                     Image File Background.
                                                            (line 14852)
* relocation at load-time:               Image File Background.
                                                            (line 14843)
* relocation at run-time:                Image File Background.
                                                            (line 14837)
* remainder:                             Integer division.  (line  3626)
* rename-file:                           General files.     (line  7992)
* REPEAT:                                Arbitrary control structures.
                                                            (line  5142)
* repeatability to be expected from the execution of MS: facility-idef.
                                                            (line 14120)
* replace-word:                          Debugging.         (line 11857)
* Replication:                           Dynamic Superinstructions.
                                                            (line 15339)
* report the words used in your program: Standard Report.   (line 13485)
* reposition-file:                       General files.     (line  8024)
* REPOSITION-FILE, outside the file's boundaries: file-ambcond.
                                                            (line 14196)
* represent:                             Formatted numeric output.
                                                            (line  8605)
* REPRESENT, results when float is out of range: floating-idef.
                                                            (line 14233)
* require:                               Forth source files.
                                                            (line  7944)
* require, placement in files:           Emacs Tags.        (line 14672)
* required:                              Forth source files.
                                                            (line  7938)
* reserving data space:                  Dictionary allocation.
                                                            (line  4343)
* resize:                                Heap Allocation.   (line  4448)
* resize-file:                           General files.     (line  8028)
* restart:                               Pthreads.          (line 12130)
* restore:                               Exception Handling.
                                                            (line  5495)
* restore-input:                         Input Sources.     (line  7184)
* RESTORE-INPUT, Argument type mismatch: core-ambcond.      (line 13930)
* restrict:                              Interpretation and Compilation Semantics.
                                                            (line  6436)
* Result out of range:                   Integer division.  (line  3626)
* result out of range:                   core-ambcond.      (line 13888)
* Result out of range (on integer division): Integer division.
                                                            (line  3755)
* return stack:                          Stack Manipulation.
                                                            (line  4170)
* return stack and locals:               Return stack.      (line  4244)
* return stack dump with gforth-fast:    Error messages.    (line 13468)
* return stack manipulation words:       Return stack.      (line  4244)
* return stack space available:          core-other.        (line 14018)
* return stack tutorial:                 Return Stack Tutorial.
                                                            (line  1714)
* return stack underflow:                core-ambcond.      (line 13899)
* returning from a definition:           Calls and returns. (line  5283)
* roll:                                  Data stack.        (line  4201)
* Root:                                  Word Lists.        (line  7667)
* rot:                                   Data stack.        (line  4193)
* rounding of floating-point numbers:    floating-idef.     (line 14237)
* rp!:                                   Stack pointer manipulation.
                                                            (line  4295)
* rp0:                                   Stack pointer manipulation.
                                                            (line  4290)
* rp@:                                   Stack pointer manipulation.
                                                            (line  4293)
* rshift:                                Bitwise operations.
                                                            (line  3896)
* RSHIFT, large shift counts:            core-ambcond.      (line 13987)
* run-time code generation, tutorial:    Advanced macros Tutorial.
                                                            (line  2527)
* running Gforth:                        Invoking Gforth.   (line   409)
* running image files:                   Running Image Files.
                                                            (line 15040)
* Rydqvist, Goran:                       Emacs and Gforth.  (line 14621)
* S":                                    Displaying characters and strings.
                                                            (line  8762)
* S", number of string buffers:          file-idef.         (line 14186)
* S", size of string buffer:             file-idef.         (line 14190)
* s>d:                                   Double precision.  (line  3598)
* s>f:                                   Floating Point.    (line  4013)
* s>number?:                             Line input and conversion.
                                                            (line  9206)
* s>unumber?:                            Line input and conversion.
                                                            (line  9209)
* save-buffer:                           Blocks.            (line  8372)
* save-buffers:                          Blocks.            (line  8368)
* save-cov:                              Code Coverage.     (line 12069)
* save-input:                            Input Sources.     (line  7179)
* savesystem:                            Non-Relocatable Image Files.
                                                            (line 14917)
* savesystem during gforthmi:            gforthmi.          (line 14990)
* scope:                                 Where are locals visible by name?.
                                                            (line  9533)
* scope of locals:                       Where are locals visible by name?.
                                                            (line  9528)
* scoping and classes:                   Classes and Scoping.
                                                            (line 10687)
* scr:                                   Blocks.            (line  8335)
* seal:                                  Word Lists.        (line  7677)
* search:                                Memory Blocks.     (line  4682)
* search order stack:                    Word Lists.        (line  7551)
* search order, maximum depth:           search-idef.       (line 14422)
* search order, minimum:                 search-idef.       (line 14425)
* search order, tutorial:                Wordlists and Search Order Tutorial.
                                                            (line  2614)
* search path control, source files:     Source Search Paths.
                                                            (line  8152)
* search path control, source files <1>: General Search Paths.
                                                            (line  8166)
* search path for files:                 Search Paths.      (line  8124)
* search-order words, ambiguous conditions: search-ambcond. (line 14430)
* search-order words, implementation-defined options: search-idef.
                                                            (line 14421)
* search-order words, system documentation: The optional Search-Order word set.
                                                            (line 14418)
* search-wordlist:                       Word Lists.        (line  7652)
* see:                                   Examining compiled code.
                                                            (line 11698)
* see tutorial:                          Decompilation Tutorial.
                                                            (line  1152)
* SEE, source and format of output:      programming-idef.  (line 14378)
* see-code:                              Examining compiled code.
                                                            (line 11712)
* see-code-range:                        Examining compiled code.
                                                            (line 11716)
* selection control structures:          Selection.         (line  4721)
* selector:                              Object-Oriented Terminology.
                                                            (line 10386)
* selector <1>:                          Objects Glossary.  (line 11045)
* selector implementation, class:        Objects Implementation.
                                                            (line 10805)
* selector invocation:                   Object-Oriented Terminology.
                                                            (line 10397)
* selector invocation, restrictions:     Basic Objects Usage.
                                                            (line 10521)
* selector invocation, restrictions <1>: Basic OOF Usage.   (line 11154)
* selector usage:                        Basic Objects Usage.
                                                            (line 10471)
* selectors and stack effects:           Object-Oriented Programming Style.
                                                            (line 10557)
* selectors common to hardly-related classes: Object Interfaces.
                                                            (line 10754)
* self:                                  The OOF base class.
                                                            (line 11219)
* semantics tutorial:                    Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                            (line  2113)
* semantics, interpretation and compilation: Interpretation and Compilation Semantics.
                                                            (line  6402)
* semaphore:                             Pthreads.          (line 12172)
* set-current:                           Word Lists.        (line  7582)
* set-dir:                               Directories.       (line  8110)
* set-order:                             Word Lists.        (line  7591)
* set-precision:                         Simple numeric output.
                                                            (line  8495)
* set-recognizers:                       Recognizers.       (line  7456)
* sf!:                                   Memory Access.     (line  4491)
* sf@:                                   Memory Access.     (line  4487)
* sf@ or sf! used with an address that is not single-float aligned: floating-ambcond.
                                                            (line 14270)
* sfalign:                               Dictionary allocation.
                                                            (line  4407)
* sfaligned:                             Address arithmetic.
                                                            (line  4598)
* sffield::                              Forth200x Structures.
                                                            (line 10330)
* sfloat%:                               Structure Glossary.
                                                            (line 10286)
* sfloat+:                               Address arithmetic.
                                                            (line  4595)
* sfloats:                               Address arithmetic.
                                                            (line  4591)
* sf_, stack item type:                  Notation.          (line  3452)
* sh:                                    Passing Commands to the OS.
                                                            (line 13363)
* Shared libraries in C interface:       Declaring OS-level libraries.
                                                            (line 12525)
* shell commands:                        Passing Commands to the OS.
                                                            (line 13360)
* shift-args:                            OS command line arguments.
                                                            (line  9418)
* sign:                                  Formatted numeric output.
                                                            (line  8591)
* silent exiting from Gforth:            Gforth in pipes.   (line   769)
* simple defining words:                 CREATE.            (line  5567)
* simple loops:                          Simple Loops.      (line  4803)
* simple-fkey-string:                    Single-key input.  (line  9180)
* simple-see:                            Examining compiled code.
                                                            (line 11707)
* simple-see-range:                      Examining compiled code.
                                                            (line 11710)
* single precision arithmetic words:     Single precision.  (line  3551)
* single-assignment style for locals:    Locals programming style.
                                                            (line  9713)
* single-cell numbers, input format:     Number Conversion. (line  7207)
* single-key input:                      Single-key input.  (line  9044)
* singlestep Debugger:                   Singlestep Debugger.
                                                            (line 11963)
* size of buffer at WORD:                core-idef.         (line 13749)
* size of the dictionary and the stacks: Invoking Gforth.   (line   457)
* size of the keyboard terminal buffer:  core-idef.         (line 13762)
* size of the pictured numeric output buffer: core-idef.    (line 13769)
* size of the scratch area returned by PAD: core-idef.      (line 13773)
* size parameters for command-line options: Invoking Gforth.
                                                            (line   457)
* sl@:                                   Memory Access.     (line  4512)
* SLiteral:                              Literals.          (line  6802)
* slurp-fid:                             General files.     (line  8033)
* slurp-file:                            General files.     (line  8030)
* sm/rem:                                Integer division.  (line  3702)
* source:                                The Text Interpreter.
                                                            (line  7127)
* source code for exception:             Locating exception source.
                                                            (line 11684)
* source code of a word:                 Locating source code definitions.
                                                            (line 11572)
* source location of error or debugging output in Emacs: Emacs and Gforth.
                                                            (line 14636)
* source-id:                             Input Sources.     (line  7170)
* SOURCE-ID, behaviour when BLK is non-zero: file-ambcond.  (line 14220)
* sourcefilename:                        Forth source files.
                                                            (line  7950)
* sourceline#:                           Forth source files.
                                                            (line  7957)
* sp!:                                   Stack pointer manipulation.
                                                            (line  4281)
* sp0:                                   Stack pointer manipulation.
                                                            (line  4276)
* sp@:                                   Stack pointer manipulation.
                                                            (line  4279)
* space:                                 Displaying characters and strings.
                                                            (line  8720)
* space delimiters:                      core-idef.         (line 13670)
* spaces:                                Displaying characters and strings.
                                                            (line  8723)
* span:                                  Line input and conversion.
                                                            (line  9254)
* speed, startup:                        Startup speed.     (line   799)
* stack depth changes during interpretation: Stack depth changes.
                                                            (line 13528)
* stack effect:                          Notation.          (line  3383)
* Stack effect design, tutorial:         Designing the stack effect Tutorial.
                                                            (line  1316)
* stack effect of DOES>-parts:           User-defined Defining Words.
                                                            (line  6010)
* stack effect of included files:        Forth source files.
                                                            (line  7909)
* stack effects of selectors:            Object-Oriented Programming Style.
                                                            (line 10557)
* stack empty:                           core-ambcond.      (line 13899)
* stack item types:                      Notation.          (line  3423)
* stack manipulation tutorial:           Stack Manipulation Tutorial.
                                                            (line  1007)
* stack manipulation words:              Stack Manipulation.
                                                            (line  4163)
* stack manipulation words, floating-point stack: Floating point stack.
                                                            (line  4220)
* stack manipulation words, return stack: Return stack.     (line  4244)
* stack manipulations words, data stack: Data stack.        (line  4178)
* stack overflow:                        core-ambcond.      (line 13846)
* stack pointer manipulation words:      Stack pointer manipulation.
                                                            (line  4276)
* stack size default:                    Stack and Dictionary Sizes.
                                                            (line 15019)
* stack size, cache-friendly:            Stack and Dictionary Sizes.
                                                            (line 15032)
* stack space available:                 core-other.        (line 14023)
* stack tutorial:                        Stack Tutorial.    (line   943)
* stack underflow:                       core-ambcond.      (line 13899)
* stack-effect comments, tutorial:       Stack-Effect Comments Tutorial.
                                                            (line  1169)
* stacksize:                             Pthreads.          (line 12104)
* stacksize4:                            Pthreads.          (line 12110)
* staged/-divisor:                       Two-stage integer division.
                                                            (line  3855)
* staged/-size:                          Two-stage integer division.
                                                            (line  3813)
* Standard conformance of Gforth:        Standard conformance.
                                                            (line 13569)
* starting Gforth tutorial:              Starting Gforth Tutorial.
                                                            (line   886)
* startup sequence for image file:       Modifying the Startup Sequence.
                                                            (line 15117)
* Startup speed:                         Startup speed.     (line   799)
* state - effect on the text interpreter: How does that work?.
                                                            (line  3112)
* STATE values:                          core-idef.         (line 13793)
* state-smart words (are a bad idea):    Combined words.    (line  6492)
* static:                                Class Declaration. (line 11279)
* stderr:                                General files.     (line  8042)
* stderr and pipes:                      Gforth in pipes.   (line   794)
* stdin:                                 General files.     (line  8036)
* stdout:                                General files.     (line  8039)
* stop:                                  Pthreads.          (line 12136)
* stop-ns:                               Pthreads.          (line 12139)
* str<:                                  Memory Blocks.     (line  4677)
* str=:                                  Memory Blocks.     (line  4675)
* string larger than pictured numeric output area (f., fe., fs.): floating-ambcond.
                                                            (line 14321)
* string longer than a counted string returned by WORD: core-ambcond.
                                                            (line 13983)
* string words:                          String words.      (line  8853)
* string-prefix?:                        Memory Blocks.     (line  4679)
* strings - see character strings:       String Formats.    (line  8690)
* strings tutorial:                      Characters and Strings Tutorial.
                                                            (line  1856)
* struct:                                Structure Glossary.
                                                            (line 10291)
* struct usage:                          Structure Usage.   (line 10105)
* structs tutorial:                      Arrays and Records Tutorial.
                                                            (line  2420)
* structure extension:                   Structure Usage.   (line 10150)
* structure glossary:                    Structure Glossary.
                                                            (line 10242)
* structure implementation:              Structure Implementation.
                                                            (line 10213)
* structure naming convention:           Structure Naming Convention.
                                                            (line 10189)
* structure naming convention <1>:       Structure Naming Convention.
                                                            (line 10203)
* structure of Forth programs:           Forth is written in Forth.
                                                            (line  3255)
* structure usage:                       Structure Usage.   (line 10105)
* structures:                            Structures.        (line 10019)
* structures containing arrays:          Structure Usage.   (line 10162)
* structures containing structures:      Structure Usage.   (line 10142)
* Structures in Forth200x:               Forth200x Structures.
                                                            (line 10297)
* structures using address arithmetic:   Why explicit structure support?.
                                                            (line 10032)
* sub-list?:                             Locals implementation.
                                                            (line  9847)
* success-color:                         Terminal output.   (line  9024)
* super:                                 The OOF base class.
                                                            (line 11215)
* superclass binding:                    Class Binding.     (line 10595)
* Superinstructions:                     Dynamic Superinstructions.
                                                            (line 15339)
* sw@:                                   Memory Access.     (line  4503)
* swap:                                  Data stack.        (line  4188)
* symmetric division:                    Integer division.  (line  3631)
* syntax tutorial:                       Syntax Tutorial.   (line   897)
* system:                                Passing Commands to the OS.
                                                            (line 13367)
* system dictionary space required, in address units: core-other.
                                                            (line 14028)
* system documentation:                  Standard conformance.
                                                            (line 13608)
* system documentation, block words:     The optional Block word set.
                                                            (line 14034)
* system documentation, core words:      The Core Words.    (line 13623)
* system documentation, double words:    The optional Double Number word set.
                                                            (line 14080)
* system documentation, exception words: The optional Exception word set.
                                                            (line 14089)
* system documentation, facility words:  The optional Facility word set.
                                                            (line 14104)
* system documentation, file words:      The optional File-Access word set.
                                                            (line 14136)
* system documentation, floating-point words: The optional Floating-Point word set.
                                                            (line 14226)
* system documentation, locals words:    The optional Locals word set.
                                                            (line 14328)
* system documentation, memory-allocation words: The optional Memory-Allocation word set.
                                                            (line 14351)
* system documentation, programming-tools words: The optional Programming-Tools word set.
                                                            (line 14363)
* system documentation, search-order words: The optional Search-Order word set.
                                                            (line 14418)
* system prompt:                         core-idef.         (line 13783)
* s\":                                   Displaying characters and strings.
                                                            (line  8774)
* table:                                 Word Lists.        (line  7602)
* TAGS file:                             Emacs Tags.        (line 14672)
* target compiler:                       cross.fs.          (line 15005)
* target compiler <1>:                   Cross Compiler.    (line 15679)
* task:                                  Pthreads.          (line 12098)
* terminal buffer, size:                 core-idef.         (line 13762)
* terminal input buffer:                 The Text Interpreter.
                                                            (line  7021)
* terminal output:                       Terminal output.   (line  8990)
* terminal size:                         Terminal output.   (line  8996)
* terminology for object-oriented programming: Object-Oriented Terminology.
                                                            (line 10372)
* text interpreter:                      Introducing the Text Interpreter.
                                                            (line  2711)
* text interpreter <1>:                  Stacks and Postfix notation.
                                                            (line  2819)
* text interpreter <2>:                  The Text Interpreter.
                                                            (line  7007)
* text interpreter - effect of state:    How does that work?.
                                                            (line  3112)
* text interpreter - input sources:      The Text Interpreter.
                                                            (line  7108)
* text interpreter - input sources <1>:  Input Sources.     (line  7158)
* THEN:                                  Arbitrary control structures.
                                                            (line  5099)
* this:                                  Objects Glossary.  (line 11050)
* this and catch:                        Objects Implementation.
                                                            (line 10834)
* this implementation:                   Objects Implementation.
                                                            (line 10834)
* this usage:                            Method conveniences.
                                                            (line 10628)
* ThisForth performance:                 Performance.       (line 15602)
* threaded code implementation:          Threading.         (line 15225)
* threading words:                       Threading Words.   (line 13270)
* threading, direct or indirect?:        Direct or Indirect Threaded?.
                                                            (line 15290)
* threading-method:                      Threading Words.   (line 13290)
* throw:                                 Exception Handling.
                                                            (line  5335)
* THROW-codes used in the system:        exception-idef.    (line 14093)
* thru:                                  Blocks.            (line  8380)
* tib:                                   The Text Interpreter.
                                                            (line  7130)
* tick ('):                              Execution token.   (line  6573)
* TILE performance:                      Performance.       (line 15602)
* time&date:                             Keeping track of Time.
                                                            (line 13389)
* time-related words:                    Keeping track of Time.
                                                            (line 13387)
* TMP, TEMP - environment variable:      Environment variables.
                                                            (line   729)
* TO:                                    Values.            (line  5740)
* TO on non-VALUEs:                      core-ambcond.      (line 13966)
* TO on non-VALUEs and non-locals:       locals-ambcond.    (line 14346)
* to-this:                               Objects Glossary.  (line 11059)
* tokens for words:                      Tokens for Words.  (line  6564)
* TOS definition:                        Stacks and Postfix notation.
                                                            (line  2854)
* TOS optimization for primitives:       TOS Optimization.  (line 15532)
* toupper:                               Displaying characters and strings.
                                                            (line  8729)
* trigonometric operations:              Floating Point.    (line  4076)
* True:                                  Boolean Flags.     (line  3526)
* truncation of floating-point numbers:  floating-idef.     (line 14237)
* try:                                   Exception Handling.
                                                            (line  5417)
* tt:                                    Locating exception source.
                                                            (line 11684)
* tuck:                                  Data stack.        (line  4186)
* turnkey image files:                   Modifying the Startup Sequence.
                                                            (line 15133)
* Tutorial:                              Tutorial.          (line   861)
* type:                                  Displaying characters and strings.
                                                            (line  8749)
* types of locals:                       Gforth locals.     (line  9477)
* types of stack items:                  Notation.          (line  3423)
* types tutorial:                        Types Tutorial.    (line  1245)
* typewhite:                             Displaying characters and strings.
                                                            (line  8753)
* u*/:                                   Integer division.  (line  3720)
* u*/mod:                                Integer division.  (line  3735)
* U+DO:                                  Arbitrary control structures.
                                                            (line  5167)
* u, stack item type:                    Notation.          (line  3435)
* U-DO:                                  Arbitrary control structures.
                                                            (line  5173)
* u.:                                    Simple numeric output.
                                                            (line  8436)
* u.r:                                   Simple numeric output.
                                                            (line  8446)
* u/:                                    Integer division.  (line  3671)
* u/-stage1m:                            Two-stage integer division.
                                                            (line  3833)
* u/-stage2m:                            Two-stage integer division.
                                                            (line  3837)
* u/mod:                                 Integer division.  (line  3691)
* u/mod-stage2m:                         Two-stage integer division.
                                                            (line  3845)
* u<:                                    Numeric comparison.
                                                            (line  3943)
* u<=:                                   Numeric comparison.
                                                            (line  3945)
* u>:                                    Numeric comparison.
                                                            (line  3947)
* u>=:                                   Numeric comparison.
                                                            (line  3949)
* ud, stack item type:                   Notation.          (line  3439)
* ud.:                                   Simple numeric output.
                                                            (line  8454)
* ud.r:                                  Simple numeric output.
                                                            (line  8463)
* ud/mod:                                Integer division.  (line  3741)
* UDefer:                                Pthreads.          (line 12157)
* ul@:                                   Memory Access.     (line  4515)
* um*:                                   Mixed precision.   (line  3621)
* um/mod:                                Integer division.  (line  3705)
* umod:                                  Integer division.  (line  3680)
* umod-stage2m:                          Two-stage integer division.
                                                            (line  3841)
* undefined word:                        core-ambcond.      (line 13812)
* undefined word, ', POSTPONE, ['], [COMPILE]: core-ambcond.
                                                            (line 13971)
* under+:                                Single precision.  (line  3563)
* unexpected end of the input buffer:    core-ambcond.      (line 13917)
* unlock:                                Pthreads.          (line 12178)
* unloop:                                Arbitrary control structures.
                                                            (line  5200)
* unmapped block numbers:                file-ambcond.      (line 14215)
* UNREACHABLE:                           Where are locals visible by name?.
                                                            (line  9571)
* UNTIL:                                 Arbitrary control structures.
                                                            (line  5107)
* UNTIL loop:                            Simple Loops.      (line  4814)
* unused:                                Dictionary allocation.
                                                            (line  4364)
* unwind-protect:                        Exception Handling.
                                                            (line  5436)
* update:                                Blocks.            (line  8361)
* UPDATE, no current block buffer:       block-ambcond.     (line 14066)
* updated?:                              Blocks.            (line  8364)
* upper and lower case:                  Case insensitivity.
                                                            (line  3469)
* use:                                   Blocks.            (line  8315)
* User:                                  Variables.         (line  5653)
* user input device, method of selecting: core-idef.        (line 13717)
* user output device, method of selecting: core-idef.       (line 13722)
* user space:                            Variables.         (line  5648)
* user variables:                        Variables.         (line  5648)
* user':                                 Pthreads.          (line 12160)
* user-defined defining words:           User-defined Defining Words.
                                                            (line  5867)
* Uses of a word:                        Locating uses of a word.
                                                            (line 11649)
* utime:                                 Keeping track of Time.
                                                            (line 13393)
* UValue:                                Pthreads.          (line 12155)
* uw@:                                   Memory Access.     (line  4506)
* Value:                                 Values.            (line  5738)
* value-flavoured locals:                Gforth locals.     (line  9485)
* values:                                Values.            (line  5727)
* var:                                   Class Declaration. (line 11253)
* var <1>:                               Basic Mini-OOF Usage.
                                                            (line 11315)
* Variable:                              Variables.         (line  5642)
* variable-flavoured locals:             Gforth locals.     (line  9485)
* variables:                             Variables.         (line  5617)
* variadic C functions:                  Declaring C Functions.
                                                            (line 12394)
* versions, invoking other versions of Gforth: Invoking Gforth.
                                                            (line   597)
* view:                                  Debugging.         (line 11872)
* view (called locate in Gforth):        Locating source code definitions.
                                                            (line 11572)
* viewing the documentation of a word in Emacs: Emacs and Gforth.
                                                            (line 14644)
* viewing the source of a word in Emacs: Emacs Tags.        (line 14672)
* virtual function:                      Object-Oriented Terminology.
                                                            (line 10386)
* virtual function table:                Objects Implementation.
                                                            (line 10801)
* virtual machine:                       Engine.            (line 15163)
* virtual machine instructions, implementation: Primitives. (line 15450)
* visibility of locals:                  Where are locals visible by name?.
                                                            (line  9528)
* vlist:                                 Word Lists.        (line  7664)
* Vocabularies, detailed explanation:    Vocabularies.      (line  7694)
* Vocabulary:                            Word Lists.        (line  7672)
* vocs:                                  Word Lists.        (line  7681)
* vocstack empty, previous:              search-ambcond.    (line 14439)
* vocstack full, also:                   search-ambcond.    (line 14442)
* w!:                                    Memory Access.     (line  4509)
* w, stack item type:                    Notation.          (line  3431)
* w/o:                                   General files.     (line  7975)
* WARNING":                              Exception Handling.
                                                            (line  5542)
* warning-color:                         Terminal output.   (line  9018)
* warnings:                              Exception Handling.
                                                            (line  5545)
* where:                                 Locating uses of a word.
                                                            (line 11649)
* where to go next:                      Where to go next.  (line  3326)
* whereg:                                Locating uses of a word.
                                                            (line 11676)
* WHILE:                                 Arbitrary control structures.
                                                            (line  5137)
* WHILE loop:                            Simple Loops.      (line  4803)
* wid:                                   Word Lists.        (line  7559)
* wid, stack item type:                  Notation.          (line  3456)
* Win32Forth performance:                Performance.       (line 15602)
* wior type description:                 Notation.          (line  3458)
* wior values and meaning:               file-idef.         (line 14169)
* with:                                  The OOF base class.
                                                            (line 11244)
* within:                                Numeric comparison.
                                                            (line  3951)
* word:                                  Introducing the Text Interpreter.
                                                            (line  2752)
* word <1>:                              The Input Stream.  (line  7498)
* WORD buffer size:                      core-idef.         (line 13749)
* word glossary entry format:            Notation.          (line  3373)
* word list for defining locals:         Locals implementation.
                                                            (line  9797)
* word lists:                            Word Lists.        (line  7547)
* word lists - example:                  Word list example. (line  7777)
* word lists - why use them?:            Why use word lists?.
                                                            (line  7729)
* word name too long:                    core-ambcond.      (line 13815)
* WORD, string overflow:                 core-ambcond.      (line 13983)
* wordlist:                              Word Lists.        (line  7599)
* wordlists tutorial:                    Wordlists and Search Order Tutorial.
                                                            (line  2614)
* words:                                 Words.             (line  3370)
* words <1>:                             Word Lists.        (line  7660)
* words used in your program:            Standard Report.   (line 13485)
* words, forgetting:                     Forgetting words.  (line 11764)
* wordset:                               Notation.          (line  3408)
* write-file:                            General files.     (line  8012)
* write-line:                            General files.     (line  8014)
* WTF??:                                 Debugging.         (line 11851)
* ww:                                    Locating uses of a word.
                                                            (line 11653)
* x-size:                                Xchars and Unicode.
                                                            (line  9310)
* x-width:                               Xchars and Unicode.
                                                            (line  9350)
* xc!+?:                                 Xchars and Unicode.
                                                            (line  9318)
* xc-size:                               Xchars and Unicode.
                                                            (line  9307)
* xc@+:                                  Xchars and Unicode.
                                                            (line  9314)
* xchar+:                                Xchars and Unicode.
                                                            (line  9326)
* xchar-:                                Xchars and Unicode.
                                                            (line  9330)
* xchar-encoding:                        Xchars and Unicode.
                                                            (line  9365)
* xemit:                                 Xchars and Unicode.
                                                            (line  9360)
* xkey:                                  Xchars and Unicode.
                                                            (line  9356)
* xor:                                   Bitwise operations.
                                                            (line  3890)
* xt:                                    Introducing the Text Interpreter.
                                                            (line  2752)
* xt <1>:                                Execution token.   (line  6570)
* XT tutorial:                           Execution Tokens Tutorial.
                                                            (line  2186)
* xt, stack item type:                   Notation.          (line  3454)
* xt-new:                                Objects Glossary.  (line 11062)
* xt-see:                                Examining compiled code.
                                                            (line 11704)
* x\string-:                             Xchars and Unicode.
                                                            (line  9339)
* zero-length string as a name:          core-ambcond.      (line 13917)
* Zsoter's object-oriented model:        Comparison with other object models.
                                                            (line 11527)

